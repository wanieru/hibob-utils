// ==UserScript==
// @name        HiBob Time Utilities
// @version     1.1.6
// @author      Funday Factory
// @description Utilities to make it easier to log time in HiBob
// @match       https://app.hibob.com/*
// @namespace   http://tampermonkey.net/
// @icon        https://www.google.com/s2/favicons?sz=64&domain=hibob.com
// @grant       none
// ==/UserScript==

(()=>{"use strict";class e{static xhr(e,t,n){return new Promise((a=>{let s=new XMLHttpRequest;s.open(e,t),s.setRequestHeader("Accept","application/json"),s.setRequestHeader("Content-Type","application/json"),s.onreadystatechange=()=>{if(4===s.readyState){let e;try{e=JSON.parse(s.responseText)}catch(t){e={result:s.responseText}}if(200!==s.status){if(e.hasOwnProperty("error")){const t=e.hasOwnProperty("key")?e.key:s.status.toString();alert(`HiBob Utils: Error ${t} - ${e.error}`)}else alert(`HiBob Utils: Error ${s.status} - check the developer console for more information.`);console.log(`HiBob Utils: Error ${s.status}.`),console.log(s)}a({status:s.status,body:e})}},s.send(JSON.stringify(n))}))}}class t{static parse(e){if(!e)return null;const t=e.split("T");return t.length<2&&t.push("00:00"),new Date(t.join("T")).getTime()}static format(e,t){if(!e)return"";const n=new Date(e);return`${n.getFullYear()}-${(n.getMonth()+1).toString().padStart(2,"0")}-${n.getDate().toString().padStart(2,"0")}${t?`T${n.getHours().toString().padStart(2,"0")}:${n.getMinutes().toString().padStart(2,"0")}`:""}`}static formatHour(e){const t=Math.floor(e%24),n=Math.round(60*(e-t));return`${t.toString().padStart(2,"0")}:${n.toString().padStart(2,"0")}`}static getWeekNumberFromDate(e){var t=new Date(e);t.setHours(0,0,0,0),t.setDate(t.getDate()+3-(t.getDay()+6)%7);var n=new Date(t.getFullYear(),0,4);return 1+Math.round(((t.getTime()-n.getTime())/864e5-3+(n.getDay()+6)%7)/7)}static parseTimeTohours(e){const t=e.split(":");return parseInt(t[0])+parseInt(t[1])/60}}class n{static async submit(n,a){if(a.some((e=>!e.reasonId)))return console.log("WARNING: SOME ENTRIES HAVE NO REASON SET - NOT SUBMITTING!!",n,a),!1;const s=a.map((e=>{var a;return{start:t.format(n+3600*e.startHour*1e3,!0),end:e.lengthHours?t.format(n+3600*(e.startHour+e.lengthHours)*1e3,!0):void 0,reason:e.reasonId,comment:null!==(a=e.comment)&&void 0!==a?a:void 0}})),o=t.format(n,!1),i=await this.getUserId();return 200===(await e.xhr("POST",`https://app.hibob.com/api/attendance/employees/${i}/attendance/entries?forDate=${o}`,s)).status}static async timelogReasons(){return(await this.metadata()).timeLogEntryReason.values.map((e=>({id:e.serverId,name:e.value})))}static async attendance(t){return(await e.xhr("GET",`https://app.hibob.com/api/employees/attendance/my/sheets/${t}`,{})).body}static async sheets(){const t=await this.getUserId();return(await e.xhr("GET",`https://app.hibob.com/api/employees/${t}/timelog/attendance/sheets`,{})).body}static async metadata(){return(await e.xhr("GET","https://app.hibob.com/api/company/metadata/lists/?includeArchived=true",{})).body}static async getUserId(){var e;return"string"!=typeof this.userId&&await this.userInfo(),null!==(e=this.userId)&&void 0!==e?e:""}static async userInfo(){const t=await e.xhr("GET","https://app.hibob.com/api/user",{});return this.userId=t.body.id,t.body}}class a{static for(e){return new Promise((t=>{window.setTimeout((()=>t()),e)}))}static until(e){return new Promise((t=>{const n=window.setInterval((()=>{e()&&(t(),window.clearInterval(n))}),1)}))}}var s,o;!function(e){e[e.FixAll=0]="FixAll",e[e.FixLatest=1]="FixLatest"}(s||(s={}));class i{constructor(){this.handlers=[]}on(e,t){this.handlers.push({handler:e,context:t})}off(e,t){this.handlers=this.handlers.filter((n=>n.handler!==e||n.context!==t))}fire(e){this.handlers.forEach((t=>t.handler.call(t.context,e)))}}class r{static initialize(){const e=document.createElement("link");e.href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200",e.rel="stylesheet",document.head.appendChild(e)}static get(e,t=!1){const n=document.createElement("span");return n.className="material-symbols-outlined",n.innerText=e,n.style.verticalAlign="middle",n.style.fontSize="1.5em",n.style.fontVariationSettings="'FILL' "+(t?1:0),n}}class l{static round(e,t){return Math.round(e*10**t)/10**t}static floor(e,t){return Math.floor(e*10**t)/10**t}static ceil(e,t){return Math.ceil(e*10**t)/10**t}static sum(e){let t=0;for(let n=0;n<e.length;n++)t+=e[n];return t}}!function(e){e[e.Waiting=0]="Waiting",e[e.Saving=1]="Saving",e[e.Saved=2]="Saved",e[e.Error=3]="Error"}(o||(o={}));class d{constructor(){this.sheets=[],this.onDateUpdated=new i,this.onReasonsUpdated=new i,this.onSheetUpdated=new i,this.onSheetsUpdated=new i,this.onSaveStatusUpdated=new i,this.saveHandle=-1,this.saving=!1,this.calculatingFlex=!1,this.fetchingSheets=!1,this.reasons=[]}async initialize(){await this.fetchSheets(),await this.fetchReasons(),this.onSaveStatusUpdated.fire(o.Saved)}async fetchSheets(){var e,s;await a.until((()=>!this.fetchingSheets)),this.fetchingSheets=!0,this.sheets=[];const o=await n.sheets();for(const n of o.employeeSheets){const a=null!==(e=t.parse(n.cycleStartDate))&&void 0!==e?e:0,o=null!==(s=t.parse(n.cycleEndDate))&&void 0!==s?s:0,i={id:n.id,status:n.status,start:a,end:o,dates:[],locked:n.locked,hoursPerDay:0};this.sheets.push(i)}this.sheets.sort(((e,t)=>t.start-e.start)),this.onSheetsUpdated.fire(this.sheets),this.fetchingSheets=!1}async fetchReasons(){this.reasons=(await n.metadata()).timeLogEntryReason.values,this.onReasonsUpdated.fire(this.reasons)}async fetchSheet(e){var a;const s=this.sheets.find((t=>t.id===e));if(!s)return;const o=await n.attendance(e);s.hoursPerDay=o.summary.potentialWorkingHours/o.summary.potentialWorkingDays,s.dates=[];for(const e of o.attendance){const n={dirty:!1,date:null!==(a=t.parse(e.date))&&void 0!==a?a:Date.now(),nonWorkingDay:"WeekendEvent"===e.status||"ApproveTimeoffRequest"===e.status,hoursToWork:s.hoursPerDay,favorited:!1,dateDescription:e.note.description,entries:e.entries.map((n=>{var a,s,o,i,r;return{startHour:l.floor(((null!==(a=t.parse(n.start))&&void 0!==a?a:Date.now())-(null!==(s=t.parse(e.date))&&void 0!==s?s:Date.now()))/36e5,2),lengthHours:l.ceil(((null!==(o=t.parse(n.end))&&void 0!==o?o:Date.now())-(null!==(i=t.parse(n.start))&&void 0!==i?i:Date.now()))/36e5,2),reasonId:n.reason,comment:null!==(r=n.comment)&&void 0!==r?r:null,hasComment:!!n.comment}})).sort(((e,t)=>e.startHour-t.startHour))};"number"==typeof e.paidTimeoffSeconds&&e.paidTimeoffSeconds>0?n.hoursToWork-=e.paidTimeoffSeconds/3600:n.nonWorkingDay&&(n.hoursToWork=0),s.dates.push(n)}s.dates.sort(((e,t)=>t.date-e.date));const i=await this.getFavoritedDate();i&&i.sheet===s&&(i.date.favorited=!0),this.onSheetUpdated.fire(s)}changeStartHour(e,t,n){const a=this.sheets.find((t=>t.dates.some((t=>t===e))));a&&(e.entries[t].startHour=n,e.dirty=!0,this.queueSave(),this.onDateUpdated.fire({sheet:a,date:e}))}changeLengthHours(e,t,n){const a=this.sheets.find((t=>t.dates.some((t=>t===e))));a&&(e.entries[t].lengthHours=n,e.dirty=!0,this.queueSave(),this.onDateUpdated.fire({sheet:a,date:e}))}changeReason(e,t,n){const a=this.sheets.find((t=>t.dates.some((t=>t===e))));a&&(e.entries[t].reasonId=n,e.dirty=!0,this.queueSave(),this.onDateUpdated.fire({sheet:a,date:e}))}changeComment(e,t,n){const a=this.sheets.find((t=>t.dates.some((t=>t===e))));a&&(e.entries[t].comment=n,e.entries[t].hasComment=!0,e.dirty=!0,this.queueSave(),this.onDateUpdated.fire({sheet:a,date:e}))}toggleComment(e,t){const n=this.sheets.find((t=>t.dates.some((t=>t===e))));n&&(e.entries[t].hasComment=!e.entries[t].hasComment,e.entries[t].comment=e.entries[t].hasComment?"":null,e.dirty=!0,this.queueSave(),this.onDateUpdated.fire({sheet:n,date:e}))}async setFavoritedDate(e){const n=this.sheets.find((t=>t.dates.some((t=>t===e))));if(!n)return;const a=await this.getFavoritedDate();a&&(a.date.favorited=!1,this.onDateUpdated.fire(a)),e.favorited=!0,this.onDateUpdated.fire({sheet:n,date:e}),window.localStorage.setItem("tl_favorite",JSON.stringify({date:t.format(e.date,!1)}))}async getFavoritedDate(){const e=window.localStorage.getItem("tl_favorite");if(!e)return null;const n=JSON.parse(e),a=t.parse(n.date);if("number"==typeof a){const e=this.sheets.find((e=>e.start<=a&&e.end>=a));if(e){e.dates.length<1&&await this.fetchSheet(e.id);const t=e.dates.find((e=>e.date===a));if(t)return{sheet:e,date:t}}}return null}deleteEntry(e,t){const n=this.sheets.find((t=>t.dates.some((t=>t===e))));n&&(e.entries.splice(t,1),e.dirty=!0,this.queueSave(),this.onDateUpdated.fire({sheet:n,date:e}))}async findLastEntry(e){const t=this.sheets.find((t=>t.dates.some((t=>t===e))));if(!t)return;let n=t.dates.indexOf(e),a=-1;for(let e=this.sheets.indexOf(t);e<this.sheets.length;e++){const t=this.sheets[e];for(t.dates.length<1&&await this.fetchSheet(t.id);n<t.dates.length;n++){const e=t.dates[n];if(e.entries.length>0)return a<0?e.entries[e.entries.length-1]:e.entries[a];a=0}n=0}}async newEntry(e){const t=this.sheets.find((t=>t.dates.some((t=>t===e))));if(!t)return;const n=await this.findLastEntry(e);let a=8.5,s=l.round(t.hoursPerDay,2),o="";n&&(e.entries.includes(n)&&(a=n.startHour+n.lengthHours,s=1),o=n.reasonId),e.entries.push({startHour:a,lengthHours:s,reasonId:o,comment:null,hasComment:!1}),e.dirty=!0,this.queueSave(),this.onDateUpdated.fire({sheet:t,date:e})}async pasteFromStarred(e){if(e.entries.length>0)return;const t=this.sheets.find((t=>t.dates.some((t=>t===e))));if(!t)return;const n=await this.getFavoritedDate();if(n&&n.date!==e){for(const t of n.date.entries)e.entries.push({startHour:t.startHour,lengthHours:t.lengthHours,reasonId:t.reasonId,comment:t.comment,hasComment:t.hasComment});e.dirty=!0,this.queueSave(),this.onDateUpdated.fire({sheet:t,date:e})}}queueSave(){window.clearTimeout(this.saveHandle),this.saveHandle=window.setTimeout((()=>this.save()),500),this.onSaveStatusUpdated.fire(o.Waiting)}async save(){await a.until((()=>!this.saving)),this.saving=!0,this.onSaveStatusUpdated.fire(o.Saving);const e=a.for(100);let t=!1;for(const e of this.sheets)for(const a of e.dates)a.dirty&&(await n.submit(a.date,a.entries)?a.dirty=!1:t=!0);await e,this.onSaveStatusUpdated.fire(t?o.Error:o.Saved),this.saving=!1}setAdjustedDateBalances(e){e=[...e].sort(((e,t)=>e.appliedOn-t.appliedOn)),localStorage.setItem("tl_adjusted_date_balances",JSON.stringify(e))}getAdjustedDateBalances(){var e;return JSON.parse(null!==(e=localStorage.getItem("tl_adjusted_date_balances"))&&void 0!==e?e:"[]")}async fixOverdueFlexBalance(){var e;const n=await this.getFlexStatus(),a=this.getAdjustedDateBalances();for(const s of n.overdueDates)a.push({date:s.date,adjustment:-l.round(s.reallocatedBalance,3),appliedOn:null!==(e=t.parse(t.format(Date.now(),!1)))&&void 0!==e?e:0});this.setAdjustedDateBalances(a)}getFlexPolicy(){return{previousDaysIncluded:28,flexWarningThreshold:21}}async clearSheetBalanceCache(){if(this.sheets)for(let e=0;e<this.sheets.length;e++){const t=this.sheets[e];if(!t)continue;const n=`tl_cached_hour_balances_${t.id}`;t.locked&&null!==window.localStorage.getItem(n)&&window.localStorage.removeItem(n)}}async getCachedBalances(){var e;const n={};for(let a=this.sheets.length-1;a>=0;a--){const s=this.sheets[a];if(!s)continue;let o=[];const i=`tl_cached_hour_balances_${s.id}`;if(s.locked&&null!==window.localStorage.getItem(i))o=JSON.parse(null!==(e=window.localStorage.getItem(i))&&void 0!==e?e:"[]");else{if(s.dates.length<1&&await this.fetchSheet(s.id),s.dates.some((e=>e.entries.length>0&&e.entries.some((e=>e.lengthHours>0)))))for(const e of s.dates){const t=l.sum(e.entries.map((e=>e.lengthHours)))-e.hoursToWork;o.push({date:e.date,balance:t})}s.locked&&s.id>0&&window.localStorage.setItem(i,JSON.stringify(o))}n[s.id.toString()]=o.map((e=>({date:e.date,dateString:t.format(e.date,!1),realBalance:e.balance,reallocatedBalance:l.round(e.balance,3)}))).sort(((e,t)=>e.date-t.date))}return n}async getFlexStatus(){var e,n,s;const o=this.getFlexPolicy(),i=null!==(e=t.parse(t.format(Date.now(),!1)))&&void 0!==e?e:0,r=null!==(n=t.parse(t.format(i-864e5*(o.previousDaysIncluded-1),!1)))&&void 0!==n?n:0,d=null!==(s=t.parse(t.format(i-864e5*(o.flexWarningThreshold-1),!1)))&&void 0!==s?s:0,c=[];let h=0;if(this.sheets){await a.until((()=>!this.calculatingFlex)),this.calculatingFlex=!0;const e=await this.getCachedBalances();for(let t=this.sheets.length-1;t>=0;t--){const n=e[this.sheets[t].id];n&&c.push(...n)}const t=[...this.getAdjustedDateBalances()];for(let e=0;e<c.length;e++){const n=c[e];for(let t=0;t<e&&0!==n.reallocatedBalance;t++){const e=c[t],a=Math.min(Math.abs(n.reallocatedBalance),Math.abs(e.reallocatedBalance));n.reallocatedBalance<0&&e.reallocatedBalance>0?(e.reallocatedBalance-=a,n.reallocatedBalance+=a):n.reallocatedBalance>0&&e.reallocatedBalance<0&&(e.reallocatedBalance+=a,n.reallocatedBalance-=a),e.reallocatedBalance=l.round(e.reallocatedBalance,3)}for(n.reallocatedBalance=l.round(n.reallocatedBalance,3);t.length>0&&t[0].appliedOn<n.date;)this.applyDateAdjustment(t[0],c),t.splice(0,1)}for(const e of t)this.applyDateAdjustment(e,c);h=l.sum(c.map((e=>l.round(e.reallocatedBalance,3)))),this.calculatingFlex=!1}return{balance:h,unbalancedDates:c.filter((e=>0!==e.reallocatedBalance)),overdueDates:c.filter((e=>0!==e.reallocatedBalance&&e.date<=r)),warningDates:c.filter((e=>0!==e.reallocatedBalance&&e.date<=d&&e.date>r))}}applyDateAdjustment(e,t){for(let n=0;n<t.length;n++){const a=t[n];if(a.date===e.date){a.reallocatedBalance+=e.adjustment,a.reallocatedBalance=l.round(a.reallocatedBalance,3);break}}}}r.initialize(),new class{constructor(){this.sheetDropdownOptions=[],this.sheetDates=[],this.weekSums=[],this.reasons=[],this.onDarkModeChange=new i,window.timelog=this,this.addButton()}async addButton(){for(;;){const e=document.querySelector("div.app-content > app-top-bar.app-top-bar > div.actions");if(e){this.toggleButton=document.createElement("button"),this.toggleButton.className="tl-toggle-btn",this.toggleButton.appendChild(r.get("sentiment_very_satisfied")),this.toggleButton.title="HiBob Utilities",this.toggleButton.onclick=()=>this.toggleVisible(),e.appendChild(this.toggleButton),this.createUI(),await this.createModel(),"#tl-ui"===location.hash&&this.toggleVisible(),this.onDarkModeChange.fire(this.isDarkMode());break}await a.for(1)}}toggleVisible(){var e;this.timelogUIOuter&&("none"===this.timelogUIOuter.style.display?(this.timelogUIOuter.style.display="block",location.hash="#tl-ui",document.body.style.overflow="hidden",this.sheetContainer&&(this.sheetContainer.innerHTML=""),null===(e=this.model)||void 0===e||e.fetchSheets()):(this.timelogUIOuter.style.display="none",location.hash="",document.body.style.overflow="initial"))}isDarkMode(){return"true"===localStorage.getItem("tl_dark_mode")}toggleDarkMode(){this.isDarkMode()?localStorage.setItem("tl_dark_mode","false"):localStorage.setItem("tl_dark_mode","true"),this.onDarkModeChange.fire(this.isDarkMode())}createUI(){const e=document.createElement("style");e.innerHTML="\n.tl-toggle-btn\n{\n    border: none;\n    background: none;\n    font-size: 2em;\n}\n.tl-close-btn\n{\n    font-size: 2em;\n    position: absolute;\n    right: 5px;\n}\n.tl-ui\n{\n    position: fixed;\n    z-index: 1000;\n    inset: 0px;\n    background-color: white;\n    overflow-y: scroll;\n    padding: 10px;\n}        \n.tl-date\n{\n    margin-top: 10px;\n    padding: 10px;\n    border: 1px solid gray;\n    border-radius: 5px;\n}\n.tl-save-status, .tl-add-entry-btn\n{\n    margin-left: 10px;\n}\n.tl-entry\n{\n    margin-top: 5px;\n}\n.tl-entry > *\n{\n    margin-left: 5px;\n}\n.tl-entry > input[type=number]\n{\n    width: 50px;\n}\n.tl-entry > input[type=time]\n{\n    width: 75px;\n}\n.tl-save-status\n{\n    font-weight: bold;\n}\n.tl-sheet-select\n{\n    margin-left: 5px;\n}\n.tl-date-label\n{\n    font-weight: bold;\n}\n.tl-date-label.tl-date-label-weekend\n{\n    font-weight: initial;\n    font-style: italic;\n    color: gray;\n}\n.tl-entry-reason \n{\n    padding: 3px;\n}\n.tl-remove-entry-btn\n{\n    float: right;\n}\n.tl-week-seperator\n{\n    margin-top: 57px;\n}\n.tl-balance-label\n{\n    margin: 5px;\n    display: inline-block;\n}\n.tl-balance-help\n{\n    display: inline-block;\n    cursor: help;\n}\n\n.tl-ui-inner\n{\n    display: table;\n    margin-left: auto;\n    margin-right: auto;\n}\n.tl-ui-inner, .tl-week-seperator, .tl-date\n{\n    min-width: 650px;\n}\n.tl-entry-comment {\n    margin-top: 5px;\n    margin-bottom: 15px;\n    width: 100%;\n    display: none;\n}\n.tl-has-comment .tl-entry-comment\n{\n    display: block;\n}\n.tl-success\n{\n    color: #02B875;\n}\n.tl-warning\n{\n    color: #F0AF52;\n}\n.tl-danger\n{\n    color: #DA5652;\n}\n.tl-sum-hours\n{\n    position: absolute;\n    margin-top: -23px;\n}\n.tl-week-sum\n{\n    position: absolute;\n    margin-top: -57px;\n    text-decoration: underline;\n}\n.tl-ui button.tl-star-button, .tl-ui.tl-dark button.tl-star-button\n{\n    background: none;\n    border: none;\n    margin: 0;\n    padding: 0;\n}\n.tl-ui button.tl-star-button.tl-favorite, .tl-ui.tl-dark button.tl-star-button.tl-favorite\n{\n    color: #f1a00b;\n    opacity: 1;\n}\n.tl-paste-btn {\n    margin-left: 5px;\n    display: none;\n}\n.tl-has-favorite .tl-paste-btn:not(.tl-hide-favorite-button)\n{\n    display: inline-block;\n}\n.tl-show-on-hover\n{\n    opacity: 0;\n}\n.tl-date:hover .tl-show-on-hover\n{\n    opacity: 1;\n}\n.tl-no-reason-warning {\n    margin-left: 180px;\n    position: absolute;\n    margin-top: -22px;\n    font-weight: bold;\n    background-color: white;\n    user-select: none;\n    pointer-events: none;\n}\n.tl-no-reason-warning.tl-has-reason\n{\n    display: none;\n}\n.tl-clickable\n{\n    cursor: pointer;\n}\n.tl-dark-mode-btn {\n    position: fixed;\n    bottom: 5px;\n    right: 20px;\n}\n.tl-ui button\n{\n    background-color: #d9d9d9;\n    border: 1px solid gray;\n    border-radius: 5px;\n}\n.tl-ui button:hover\n{\n    background-color: #efebeb;\n}\n\n.tl-ui.tl-dark\n{\n    background-color: #1E1E1E;\n    color: white;\n}\n.tl-ui.tl-dark select, .tl-ui.tl-dark input {\n    color: white;\n    background-color: #252526;\n    border: 1px gray solid;\n    color-scheme: dark;\n}\n.tl-ui.tl-dark button\n{\n    background-color: #333333;\n    border: 1px solid #282828;\n    color: white;\n}\n.tl-ui.tl-dark button:hover\n{\n    background-color: #525252;\n}\n.tl-ui.tl-dark .tl-no-reason-warning\n{\n    background-color: #252526;\n}\n.tl-weekend-description {\n    color: gray;\n    font-style: italic;\n    float: right;\n    margin-top: 2px;\n    display: inline-block;\n    max-width: 400px;\n    overflow: hidden;\n    max-height: 35px;\n}\n.tl-weekend-description.tl-weekend-description-hidden\n{\n    display: none;\n}\n.tl-version-number {\n    position: fixed;\n    bottom: 5px;\n    left: 5px;\n}\n\n.tl-settings {\n    position: fixed;\n    inset: 0;\n    z-index: 100;\n}\n.tl-settings-back {\n    inset: 0;\n    position: absolute;\n    background-color: black;\n    opacity: 0.5;\n    cursor: pointer;\n}\n\n.tl-settings.tl-settings-hidden {\n    display: none;\n}\n\n.tl-settings-version {\n    margin: 5px 10px;\n    border-bottom: 1px solid gray;\n}\n\n.tl-settings-version:last-child {\n    border-bottom: 0;\n}\n\n.tl-settings-title {\n    font-weight: bold;\n    font-size: 1.25em;\n}\n.tl-settings-inner {\n    position: absolute;\n    background-color: white;\n    height: 70vh;\n    width: 90vw;\n    left: 5vw;\n    top: 15vh;\n    border: 1px solid gray;\n    border-radius: 10px;\n    padding: 10px;\n    overflow: auto;\n}\n.tl-settings-version button\n{\n    margin-left: 5px;\n    margin-bottom: 15px;\n}\n\n.tl-dark .tl-settings-inner\n{\n    background-color: #1a1a1a;\n}\n\n.tl-balance-warning\n{\n    font-size: 0.8em;\n    display: inline-block;\n    text-decoration: underline;\n    cursor: help;\n}\n.tl-hidden\n{\n    display: none;\n}\n\n",document.body.appendChild(e),this.timelogUIOuter=document.createElement("div"),this.timelogUIOuter.className="tl-ui",this.timelogUIOuter.style.display="none",document.body.append(this.timelogUIOuter),this.timelogUIInner=document.createElement("div"),this.timelogUIInner.className="tl-ui-inner",this.timelogUIOuter.append(this.timelogUIInner);const t=document.createElement("button");t.className="tl-close-btn",t.appendChild(r.get("close")),t.onclick=()=>this.toggleVisible(),this.timelogUIInner.appendChild(t),this.darkModeButton=document.createElement("button"),this.darkModeButton.className="tl-dark-mode-btn",this.darkModeButton.onclick=()=>this.toggleDarkMode(),this.timelogUIInner.appendChild(this.darkModeButton),this.onDarkModeChange.on((e=>{var t,n;e?null===(t=this.timelogUIOuter)||void 0===t||t.classList.add("tl-dark"):null===(n=this.timelogUIOuter)||void 0===n||n.classList.remove("tl-dark"),this.darkModeButton&&(this.darkModeButton.innerHTML="",this.darkModeButton.append(e?r.get("light_mode"):r.get("dark_mode")))}),this);const n=this.createSettingsWindow();this.timelogUIInner.appendChild(n);const a=document.createElement("div");a.append(r.get("settings",!0)),a.append(" 1.1.6"),a.className="tl-version-number",a.onclick=()=>n.classList.remove("tl-settings-hidden"),a.style.cursor="pointer",a.style.textDecoration="underline",this.timelogUIInner.appendChild(a);const s=document.createElement("span");s.innerText="Sheet:",this.timelogUIInner.appendChild(s),this.sheetDropdown=document.createElement("select"),this.sheetDropdown.className="tl-sheet-select",this.sheetDropdown.onchange=()=>this.onSelectedSheetChange(),this.timelogUIInner.appendChild(this.sheetDropdown),this.saveStatus=document.createElement("span"),this.saveStatus.className="tl-save-status",this.saveStatus.onclick=()=>this.onSaveStatusClick(),this.timelogUIInner.append(this.saveStatus);const o=document.createElement("div");o.className="tl-balance",this.timelogUIInner.append(o),this.balanceLabel=document.createElement("div"),this.balanceLabel.innerText="Balance: ",this.balanceLabel.className="tl-balance-label",o.append(this.balanceLabel),this.balanceWarning=document.createElement("div"),this.balanceWarning.className="tl-balance-warning tl-warning tl-hidden",o.append(this.balanceWarning),this.fixBalanceButton=document.createElement("button"),this.fixBalanceButton.append(r.get("build",!0)),this.fixBalanceButton.className="tl-fix-balance-button tl-hidden",this.fixBalanceButton.append(" Fix"),this.fixBalanceButton.onclick=()=>this.fixBalance(),o.append(this.fixBalanceButton),this.sheetContainer=document.createElement("div"),this.sheetContainer.className="tl-sheet",this.timelogUIInner.appendChild(this.sheetContainer)}createSettingsWindow(){const e=document.createElement("div");e.className="tl-settings tl-settings-hidden";const t=document.createElement("div");t.className="tl-settings-back",e.append(t),t.onclick=()=>e.classList.add("tl-settings-hidden");const n=document.createElement("div");n.className="tl-settings-inner",e.append(n);const a=document.createElement("div");a.className="tl-settings-version",n.append(a);const s=document.createElement("button");s.className="tl-settings-reload-locked-sheets-button",s.append(r.get("cached")),s.append(" Reload Locked Sheets"),s.style.cursor="help",s.title="Recalculates flex balance for all locked sheets.",s.onclick=()=>{var e;return null===(e=this.model)||void 0===e?void 0:e.clearSheetBalanceCache().then((()=>this.updateBalance()))},a.appendChild(s);const o=document.createElement("button");o.className="tl-settings-reset-cancelled-flex-button",o.append(r.get("settings_backup_restore")),o.append(" Reset Cancelled Flex"),o.style.cursor="help",o.title="Resets any flex hour which you're previously cancelled for being overdue.",o.onclick=()=>{var e;null===(e=this.model)||void 0===e||e.setAdjustedDateBalances([]),this.updateBalance()},a.appendChild(o);const i=[{version:"1.1.6 - 26/10/2022",text:["Holidays are now shown in the alternative timelog UI","Holidays are considered in the flex time calculation."]},{version:"1.1.4 - 03/10/2022",text:["Add a warning when unbalanced flex days are close to expiring.","Add button to cancel old unbalanced flex for extraordinary situations","Add buttons to delete cached data in the settings menu."]},{version:"1.1.3 - 03/10/2022",text:["Fixed how flex hours is calculated.","A warning is showed if you have unbalanced flex days that are older than 28 days."]},{version:"1.1.2 - 03/10/2022",text:["Fixed problem where you couldn't log time on some days, where you were supposed to."]},{version:"1.1.1 - 30/09/2022",text:["Added changelog","Show descriptions on non-working days"]}];for(const e of i){const t=document.createElement("div");t.className="tl-settings-version",n.append(t);const a=document.createElement("div");a.className="tl-settings-title",a.innerText=e.version,t.append(a);const s=document.createElement("ul");s.className="tl-settings-list",t.append(s);for(const t of e.text){const e=document.createElement("li");e.innerText=t,s.append(e)}}return e}async createModel(){this.model&&(this.model.onDateUpdated.off(this.onDateUpdated,this),this.model.onReasonsUpdated.off(this.onReasonsUpdated,this),this.model.onSaveStatusUpdated.off(this.onSaveStatusUpdated,this),this.model.onSheetUpdated.off(this.onSheetUpdated,this),this.model.onSheetsUpdated.off(this.onSheetsUpdated,this)),this.model=new d,this.model.onDateUpdated.on(this.onDateUpdated,this),this.model.onReasonsUpdated.on(this.onReasonsUpdated,this),this.model.onSaveStatusUpdated.on(this.onSaveStatusUpdated,this),this.model.onSheetUpdated.on(this.onSheetUpdated,this),this.model.onSheetsUpdated.on(this.onSheetsUpdated,this),await this.model.initialize()}getDateContainer(e){if(this.selectedSheet===e.sheet&&this.sheetContainer){let t=this.sheetDates.find((t=>t.date===e.date));if(!t){if(t={date:e.date,parent:document.createElement("div"),title:document.createElement("span"),entries:[],starButton:document.createElement("button"),pasteButton:document.createElement("button"),weekendDescription:document.createElement("div")},this.sheetDates.push(t),t.parent.className="tl-date",this.sheetContainer.appendChild(t.parent),1===new Date(e.date.date).getDay()){const e=document.createElement("div");e.className="tl-week-seperator",this.sheetContainer.appendChild(e)}if(t.parent.append(t.starButton),t.starButton.onclick=()=>{var t;return null===(t=this.model)||void 0===t?void 0:t.setFavoritedDate(e.date)},t.starButton.className="tl-star-button tl-show-on-hover",t.starButton.title="Favorite Day",t.title.className="tl-date-label",t.title.innerText=new Date(e.date.date).toDateString(),e.date.nonWorkingDay&&t.title.classList.add("tl-date-label-weekend"),t.parent.append(t.title),t.weekendDescription.className="tl-weekend-description",t.parent.append(t.weekendDescription),!e.sheet.locked){const n=document.createElement("button");n.appendChild(r.get("add")),n.className="tl-add-entry-btn tl-show-on-hover",n.onclick=()=>{var t;return null===(t=this.model)||void 0===t?void 0:t.newEntry(e.date)},t.parent.append(n),t.pasteButton=document.createElement("button"),t.pasteButton.appendChild(r.get("switch_access_shortcut_add")),t.pasteButton.title="Paste from Favorite Day",t.pasteButton.className="tl-paste-btn tl-show-on-hover",t.pasteButton.onclick=()=>{var t;return null===(t=this.model)||void 0===t?void 0:t.pasteFromStarred(e.date)},t.parent.append(t.pasteButton)}this.addToWeekSum(t)}return t}return null}getEntryContainer(e,n,a){let s=n.entries.find((e=>e.entry===a));if(!s){s={entry:a,parent:document.createElement("div"),startHour:document.createElement("input"),endHour:document.createElement("input"),length:document.createElement("input"),reason:document.createElement("select"),comment:document.createElement("input"),commentButton:document.createElement("button"),noReasonWarning:document.createElement("div")},n.entries.push(s),s.parent.className="tl-entry",n.parent.appendChild(s.parent),s.startHour.type="time",s.startHour.className="tl-entry-start",e.sheet.locked&&(s.startHour.disabled=!0),s.startHour.onchange=()=>{var n,o,i;const r=a.startHour+a.lengthHours;null===(n=this.model)||void 0===n||n.changeStartHour(e.date,e.date.entries.indexOf(a),t.parseTimeTohours(null!==(o=null==s?void 0:s.startHour.value)&&void 0!==o?o:"08:00"));const d=l.round(r-a.startHour,2);null===(i=this.model)||void 0===i||i.changeLengthHours(e.date,e.date.entries.indexOf(a),d)},s.parent.appendChild(s.startHour);const o=document.createElement("span");o.className="tl-end-label",o.innerText="-",s.parent.appendChild(o),s.endHour.type="time",s.endHour.className="tl-entry-end",e.sheet.locked&&(s.endHour.disabled=!0),s.endHour.onchange=()=>{var n;if(null==s?void 0:s.endHour){const o=l.round(t.parseTimeTohours(s.endHour.value)-a.startHour,2);null===(n=this.model)||void 0===n||n.changeLengthHours(e.date,e.date.entries.indexOf(a),o)}},s.parent.appendChild(s.endHour),s.reason.onchange=()=>{var t,n;return null===(t=this.model)||void 0===t?void 0:t.changeReason(e.date,e.date.entries.indexOf(a),null!==(n=null==s?void 0:s.reason.value)&&void 0!==n?n:"")},e.sheet.locked&&(s.reason.disabled=!0),s.reason.className="tl-entry-reason",s.parent.appendChild(s.reason),this.updateReasonsDropdown(s.reason),1===n.entries.length&&(n.sumHours=document.createElement("span"),n.sumHours.className="tl-sum-hours",s.parent.append(n.sumHours)),s.length.type="number",s.length.className="tl-entry-length",s.length.step="0.01",e.sheet.locked&&(s.length.disabled=!0),s.length.onchange=()=>{var t;null===(t=this.model)||void 0===t||t.changeLengthHours(e.date,e.date.entries.indexOf(a),parseFloat((null==s?void 0:s.length.value)||"0"))},s.parent.appendChild(s.length);const i=document.createElement("span");if(i.className="tl-duration-label",i.innerText="hour(s)",s.parent.appendChild(i),!e.sheet.locked){s.commentButton.className="tl-add-comment-btn tl-show-on-hover",s.commentButton.onclick=()=>{var t;return null===(t=this.model)||void 0===t?void 0:t.toggleComment(e.date,e.date.entries.indexOf(a))},s.parent.appendChild(s.commentButton);const t=document.createElement("button");t.appendChild(r.get("delete")),t.className="tl-remove-entry-btn tl-show-on-hover",t.onclick=()=>{var t;return null===(t=this.model)||void 0===t?void 0:t.deleteEntry(e.date,e.date.entries.indexOf(a))},s.parent.appendChild(t)}s.noReasonWarning.append(r.get("warning",!0)),s.noReasonWarning.append(" No reason selected!"),s.noReasonWarning.className="tl-no-reason-warning tl-warning tl-has-reason",s.parent.appendChild(s.noReasonWarning),s.comment.type="text",s.comment.placeholder="Write a note...",s.comment.title="Write a note...",s.comment.className="tl-entry-comment",e.sheet.locked&&(s.comment.disabled=!0),s.comment.onchange=()=>{var t,n;null===(t=this.model)||void 0===t||t.changeComment(e.date,e.date.entries.indexOf(a),null!==(n=null==s?void 0:s.comment.value)&&void 0!==n?n:"")},s.parent.appendChild(s.comment)}return s}addToWeekSum(e){if(this.weekSums.length<1||0===new Date(e.date.date).getDay()){const t={dates:[e],element:document.createElement("div")};t.element.className="tl-week-sum",this.weekSums.push(t),e.parent.appendChild(t.element),e.parent.style.marginTop="38px"}else this.weekSums[this.weekSums.length-1].dates.push(e)}onDateUpdated(e){var n,a,s;if(this.selectedSheet===e.sheet&&this.sheetContainer){let o=this.getDateContainer(e);if(o){for(const a of e.date.entries){let s=this.getEntryContainer(e,o,a);s.startHour.value=t.formatHour(a.startHour),s.length.value=a.lengthHours.toString(),s.endHour.value=t.formatHour(a.startHour+a.lengthHours),s.reason.value=a.reasonId,s.comment.value=null!==(n=a.comment)&&void 0!==n?n:"",a.reasonId?s.noReasonWarning.classList.add("tl-has-reason"):s.noReasonWarning.classList.remove("tl-has-reason"),s.commentButton.title=a.hasComment?"Remove note":"Add note",s.commentButton.innerHTML="",s.commentButton.appendChild(r.get(a.hasComment?"speaker_notes_off":"speaker_notes")),a.hasComment?s.parent.classList.add("tl-has-comment"):s.parent.classList.remove("tl-has-comment")}const i=o.entries.filter((t=>!e.date.entries.find((e=>e===t.entry))));if(o.entries=o.entries.filter((e=>!i.includes(e))),i.forEach((e=>e.parent.remove())),o.sumHours){const t=l.sum(e.date.entries.map((e=>e.lengthHours)));o.sumHours.innerText=`${l.round(t,2)} hour${1===t?"":"s"}`}o.starButton.innerHTML="",o.starButton.disabled=e.date.favorited,o.starButton.classList.remove("tl-favorite"),o.starButton.appendChild(r.get("star",e.date.favorited)),e.date.favorited&&o.starButton.classList.add("tl-favorite"),o.entries.length>0||o.date.favorited?o.pasteButton.classList.add("tl-hide-favorite-button"):o.pasteButton.classList.remove("tl-hide-favorite-button"),o.title.title=null!==(a=e.date.dateDescription)&&void 0!==a?a:"",e.date.nonWorkingDay&&e.date.entries.length<1?(o.weekendDescription.classList.remove("tl-weekend-description-hidden"),o.weekendDescription.innerText=null!==(s=e.date.dateDescription)&&void 0!==s?s:""):o.weekendDescription.classList.add("tl-weekend-description-hidden")}const i=this.weekSums.find((t=>t.dates.some((t=>t.date===e.date))));if(i){const e=l.sum(i.dates.map((e=>l.sum(e.entries.map((e=>e.entry.lengthHours)))))),n=l.sum(i.dates.map((e=>e.date.hoursToWork))),a=t.getWeekNumberFromDate(i.dates[0].date.date);i.element.innerHTML=`<b>Week ${a}</b>: ${l.round(e,2)} / ${l.round(n,2)} hours`}}this.updateBalance()}updateReasonsDropdown(e){e.innerHTML="";for(const t of this.reasons){const n=document.createElement("option");n.value=t.serverId,n.innerText=t.value,e.appendChild(n)}}onReasonsUpdated(e){this.reasons=e;for(const e of this.sheetDates)for(const t of e.entries)this.updateReasonsDropdown(t.reason)}onSaveStatusUpdated(e){this.saveStatus&&(this.saveStatus.innerHTML="",this.saveStatus.classList.remove("tl-success"),this.saveStatus.classList.remove("tl-warning"),this.saveStatus.classList.remove("tl-clickable"),e===o.Saved&&(this.saveStatus.appendChild(r.get("cloud_done",!0)),this.saveStatus.append(" Saved"),this.saveStatus.classList.add("tl-success")),e===o.Waiting&&(this.saveStatus.appendChild(r.get("pending")),this.saveStatus.append(" Pending...")),e===o.Saving&&(this.saveStatus.appendChild(r.get("cloud_upload")),this.saveStatus.append(" Saving...")),e===o.Error&&(this.saveStatus.appendChild(r.get("cloud_off")),this.saveStatus.append(" Failed!"),this.saveStatus.classList.add("tl-warning"),this.saveStatus.classList.add("tl-clickable")))}onSaveStatusClick(){var e,t;(null===(e=this.saveStatus)||void 0===e?void 0:e.classList.contains("tl-clickable"))&&(null===(t=this.model)||void 0===t||t.save())}onSheetUpdated(e){if(this.sheetDropdown&&!this.sheetDropdownOptions.find((t=>t.sheet===e))){const t=document.createElement("option");t.value=e.id.toString(),t.innerText=`${new Date(e.start).toDateString()} - ${new Date(e.end).toDateString()}${e.locked?" (locked)":""}`,this.sheetDropdownOptions.push({sheet:e,element:t}),this.sheetDropdown.appendChild(t)}this.selectedSheet===e&&(this.sheetContainer&&(this.sheetContainer.innerHTML=""),this.sheetDates=[],this.weekSums=[]);for(const t of e.dates)this.onDateUpdated({sheet:e,date:t});this.updateBalance()}onSheetsUpdated(e){this.sheetDropdown&&(this.sheetDropdown.innerHTML=""),this.sheetDropdownOptions=[];for(const t of e)this.onSheetUpdated(t);this.onSelectedSheetChange()}onSelectedSheetChange(){var e;if(!this.sheetDropdown)return;this.sheetContainer&&(this.sheetContainer.innerHTML=""),this.sheetDates=[];const t=this.sheetDropdown.value;this.selectedSheet=null===(e=this.sheetDropdownOptions.find((e=>e.element.value===t)))||void 0===e?void 0:e.sheet,this.selectedSheet&&this.model&&this.model.fetchSheet(this.selectedSheet.id)}async updateBalance(){var e,n,a,s,o;if(!this.model||!this.balanceLabel||!this.selectedSheet)return;const i=await this.model.getFlexStatus(),d=l.round(i.balance,2);if(this.balanceLabel.innerText=`Flex: ${d} hour${1!=d?"s":""}${0===d?" 🥳":""}`,null===(e=this.balanceWarning)||void 0===e||e.classList.add("tl-hidden"),null===(n=this.fixBalanceButton)||void 0===n||n.classList.add("tl-hidden"),i.overdueDates.length+i.warningDates.length>0&&this.balanceWarning){const e=this.model.getFlexPolicy();this.balanceWarning.classList.remove("tl-hidden"),this.balanceWarning.innerHTML="",this.balanceWarning.append(r.get("warning",!0)),i.overdueDates.length>0?(null===(a=this.fixBalanceButton)||void 0===a||a.classList.remove("tl-hidden"),this.balanceWarning.append(`You have ${i.overdueDates.length} unbalanced flex date${1===i.overdueDates.length?"":"s"} older than ${e.previousDaysIncluded} days!`),this.balanceWarning.title+=`Overdue dates: ${i.overdueDates.map((e=>t.format(e.date,!1))).join(", ")}`):i.warningDates.length>0&&this.balanceWarning.append(`${i.warningDates.length} unbalanced flex date${1===i.warningDates.length?"":"s"} will soon be older than ${e.previousDaysIncluded} days!`),this.balanceWarning.title="",i.overdueDates.length>0&&(this.balanceWarning.title+=`Overdue dates: ${i.overdueDates.map((e=>t.format(e.date,!1))).join(", ")}`),i.warningDates.length>0&&(this.balanceWarning.title+=`${this.balanceWarning.title.length>0?"\n":""}Soon overdue dates: ${i.warningDates.map((e=>t.format(e.date,!1))).join(", ")}`),this.balanceWarning.append(" "),this.balanceWarning.append(r.get("info",!1))}await this.model.getFavoritedDate()?null===(s=this.sheetContainer)||void 0===s||s.classList.add("tl-has-favorite"):null===(o=this.sheetContainer)||void 0===o||o.classList.remove("tl-has-favorite")}fixBalance(){var e;confirm("Are you sure you want to cancel out all overdue flex time? Please coorindate with a supervisor before using this feature.")&&(null===(e=this.model)||void 0===e||e.fixOverdueFlexBalance(),this.updateBalance())}},new class{constructor(){this.submitting=!1,this.createUI(),this.clockInButtonFinder()}createUI(){const e=document.createElement("style");e.innerHTML="\n.re-label\n{\n    font-size: 1.5em;\n    margin-bottom: 10px;\n}\n.re-reason-select\n{\n    padding: 5px;\n}\n.re-reason-ui\n{\n    z-index: 2000;\n    position: fixed;\n    inset: 0;\n    background-color: rgba(0,0,0,0.75);\n    padding-top: 45vh;\n    text-align: center;\n    color: white;\n    font-weight: bold;\n}\n.re-btn\n{\n    padding: 0 var(--button-padding-x, 15px);\n    min-width: 80px;\n    height: var(--button-size, 30px);\n    font-weight: 600;\n    font-size: var(--button-font-size, 12px);\n    font-family: var(--body-font-family);\n    border: 0;\n    border-radius: 4px;\n    margin: 5px;\n}\n.re-btn.re-primary\n{\n    color: var(--primary-bg-text-color, white);\n    background-color: var(--primary-600);\n}\n.re-btn.re-secondary\n{\n    color: var(--secondary-bg-text-color, #535353);\n    background-color: var(--secondary-600);\n}\n.re-blur\n{\n    filter: blur(2px);\n}\n.re-submitting .re-btn\n{\n    display: none;\n}\n.re-submitting-text\n{\n    display: none;\n    font-size: 1.5em;\n}\n.re-submitting .re-submitting-text\n{\n    display: block;\n}\n",document.body.append(e),this.reasonEnhancementUI=document.createElement("div"),this.reasonEnhancementUI.className="re-reason-ui",this.reasonEnhancementUI.style.display="none",document.body.appendChild(this.reasonEnhancementUI);const t=document.createElement("div");t.innerText="Choose Default Reason",t.className="re-label",this.reasonEnhancementUI.appendChild(t),this.reasonSelect=document.createElement("select"),this.reasonSelect.className="re-reason-select",this.reasonSelect.onchange=()=>this.saveDefaultReasonValue(),this.reasonEnhancementUI.appendChild(this.reasonSelect),this.reasonEnhancementUI.appendChild(document.createElement("br"));const n=document.createElement("button");n.className="re-cancel-btn re-btn re-secondary",n.innerText="Cancel",n.onclick=()=>this.cancel(),this.reasonEnhancementUI.appendChild(n);const a=document.createElement("button");a.className="re-submit-btn re-btn re-primary",a.innerText="Submit",a.onclick=()=>this.submit(),this.reasonEnhancementUI.appendChild(a);const s=document.createElement("div");s.className="re-submitting-text",s.innerText="Submitting...",this.reasonEnhancementUI.appendChild(s)}async clockInButtonFinder(){for(var e;;)this.findUnenhancedButtons("b-button.punch-clock-button, b-button.time-widget-clock-in-btn, b-button.time-widget-clock-out-btn").forEach((e=>this.enhanceClockInButton(e,s.FixLatest))),this.findUnenhancedButtons("b-button.quick-fix-apply-button").forEach((e=>this.enhanceClockInButton(e,s.FixAll))),this.appRoot||(this.appRoot=null!==(e=document.querySelector("app-root"))&&void 0!==e?e:void 0),await a.for(10)}findUnenhancedButtons(e){var t=[],n=document.querySelectorAll(e);for(const e of n)e.classList.contains("re-enhanced")||(e.classList.add("re-enhanced"),t.push(e));return t}enhanceClockInButton(e,t){e.addEventListener("click",(()=>this.showReasonFixer(t)))}saveDefaultReasonValue(){this.reasonSelect&&window.localStorage.setItem("re-last-reason",this.reasonSelect.value)}loadDefaultReasonValue(){var e;this.reasonSelect&&(this.reasonSelect.value=null!==(e=window.localStorage.getItem("re-last-reason"))&&void 0!==e?e:"")}async showReasonFixer(e){if(this.reasonEnhancementUI&&(await a.for(250),this.setUIVisible(!0),this.mode=e,this.reasonSelect)){const e=await n.metadata();this.reasonSelect.innerHTML="";for(const t of e.timeLogEntryReason.values){const e=document.createElement("option");e.value=t.serverId,e.innerText=t.value,this.reasonSelect.appendChild(e)}this.loadDefaultReasonValue()}}cancel(){this.setUIVisible(!1)}setUIVisible(e){this.reasonEnhancementUI&&(this.reasonEnhancementUI.style.display=e?"block":"none"),this.appRoot&&(e?this.appRoot.classList.add("re-blur"):this.appRoot.classList.remove("re-blur"))}async submit(){var e,t;await a.until((()=>!this.submitting)),this.submitting=!0,null===(e=this.reasonEnhancementUI)||void 0===e||e.classList.add("re-submitting"),this.mode===s.FixAll&&await this.fixAll(),this.mode===s.FixLatest&&await this.fixLatest(),this.setUIVisible(!1),null===(t=this.reasonEnhancementUI)||void 0===t||t.classList.remove("re-submitting"),this.submitting=!1}async fixAll(){if(!this.reasonSelect)return;const e=this.reasonSelect.value,a=await n.sheets();for(const s of a.employeeSheets){if(s.locked)continue;const a=await n.attendance(s.id);for(const s of a.attendance)if(s.entries.some((e=>!e.reason))){const a=t.parse(s.date);if("number"!=typeof a)continue;const o=s.entries.map((n=>{var s,o,i,r;return{startHour:((null!==(s=t.parse(n.start))&&void 0!==s?s:Date.now())-a)/36e5,lengthHours:n.end?((null!==(o=t.parse(n.end))&&void 0!==o?o:Date.now())-(null!==(i=t.parse(n.start))&&void 0!==i?i:Date.now()))/36e5:null,reasonId:n.reason||e,comment:null!==(r=n.comment)&&void 0!==r?r:null}}));await n.submit(a,o)}}}async fixLatest(){if(!this.reasonSelect)return;const e=this.reasonSelect.value;let a=null;const s=await n.sheets();for(const e of s.employeeSheets){if(e.locked)continue;const s=await n.attendance(e.id);for(const e of s.attendance){const n=t.parse(e.date);if("number"==typeof n&&(!a||n>a.date)){const s=e.entries.map((e=>{var a,s,o,i;return{startHour:((null!==(a=t.parse(e.start))&&void 0!==a?a:Date.now())-n)/36e5,lengthHours:e.end?((null!==(s=t.parse(e.end))&&void 0!==s?s:Date.now())-(null!==(o=t.parse(e.start))&&void 0!==o?o:Date.now()))/36e5:null,reasonId:e.reason,comment:null!==(i=e.comment)&&void 0!==i?i:null}}));a={date:n,entries:s}}}}if(a){for(const t of a.entries)t.reasonId=t.reasonId||e;await n.submit(a.date,a.entries)}}}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,