// ==UserScript==
// @name        HiBob Time Utilities
// @version     1.1.13
// @author      Funday Factory
// @description Utilities to make it easier to log time in HiBob
// @match       https://app.hibob.com/*
// @namespace   http://tampermonkey.net/
// @icon        https://www.google.com/s2/favicons?sz=64&domain=hibob.com
// @grant       none
// ==/UserScript==

(()=>{"use strict";class e{static parse(e){if(!e)return null;const t=e.split("T");return t.length<2&&t.push("00:00"),new Date(t.join("T")).getTime()}static format(e,t){if(!e)return"";const n=new Date(e);return`${n.getFullYear()}-${(n.getMonth()+1).toString().padStart(2,"0")}-${n.getDate().toString().padStart(2,"0")}${t?`T${n.getHours().toString().padStart(2,"0")}:${n.getMinutes().toString().padStart(2,"0")}`:""}`}static formatHour(e){const t=Math.floor(e%24),n=Math.round(60*(e-t));return`${t.toString().padStart(2,"0")}:${n.toString().padStart(2,"0")}`}static getWeekNumberFromDate(e){var t=new Date(e);t.setHours(0,0,0,0),t.setDate(t.getDate()+3-(t.getDay()+6)%7);var n=new Date(t.getFullYear(),0,4);return 1+Math.round(((t.getTime()-n.getTime())/864e5-3+(n.getDay()+6)%7)/7)}static parseTimeTohours(e){const t=e.split(":");return parseInt(t[0])+parseInt(t[1])/60}}class t{constructor(){this.handlers=[]}on(e,t){this.handlers.push({handler:e,context:t})}off(e,t){this.handlers=this.handlers.filter((n=>n.handler!==e||n.context!==t))}fire(e){this.handlers.forEach((t=>t.handler.call(t.context,e)))}}class n{static round(e,t){return Math.round(e*10**t)/10**t}static floor(e,t){return Math.floor(e*10**t)/10**t}static ceil(e,t){return Math.ceil(e*10**t)/10**t}static sum(e){let t=0;for(let n=0;n<e.length;n++)t+=e[n];return t}}class a{static scale(e){return e*this.scaling.scale}static unscale(e){return e/this.scaling.scale}static getUnitName(e=null){return null===e?this.scaling.unitGeneral:1===e?this.scaling.unitSingular:this.scaling.unitPlural}static format(e){return`${n.round(this.scale(e),2)} ${this.getUnitName(e)}`}}a.scaling={unitGeneral:"hour(s)",unitPlural:"hours",unitSingular:"hour",scale:1};class s{static initialize(){const e=document.createElement("link");e.href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200",e.rel="stylesheet",document.head.appendChild(e)}static get(e,t=!1){const n=document.createElement("span");return n.className="material-symbols-outlined",n.innerText=e,n.style.verticalAlign="middle",n.style.fontSize="1.5em",n.style.fontVariationSettings="'FILL' "+(t?1:0),n}}class o{static for(e){return new Promise((t=>{window.setTimeout((()=>t()),e)}))}static until(e){return new Promise((t=>{const n=window.setInterval((()=>{e()&&(t(),window.clearInterval(n))}),1)}))}}class i{static xhr(e,t,n){return new Promise((a=>{let s=new XMLHttpRequest;s.open(e,t),s.setRequestHeader("Accept","application/json"),s.setRequestHeader("Content-Type","application/json"),s.onreadystatechange=()=>{if(4===s.readyState){let e;try{e=JSON.parse(s.responseText)}catch(t){e={result:s.responseText}}if(200!==s.status){if(e.hasOwnProperty("error")){const t=e.hasOwnProperty("key")?e.key:s.status.toString();alert(`HiBob Utils: Error ${t} - ${e.error}`)}else alert(`HiBob Utils: Error ${s.status} - check the developer console for more information.`);console.log(`HiBob Utils: Error ${s.status}.`),console.log(s)}a({status:s.status,body:e})}},s.send(JSON.stringify(n))}))}}class r{static async submit(t,n){if(n.some((e=>!e.reasonId)))return console.log("WARNING: SOME ENTRIES HAVE NO REASON SET - NOT SUBMITTING!!",t,n),!1;const a=n.map((n=>{var a;return{start:e.format(t+3600*n.startHour*1e3,!0),end:"number"==typeof n.lengthHours?e.format(t+3600*(n.startHour+n.lengthHours)*1e3,!0):void 0,reason:n.reasonId,comment:null!==(a=n.comment)&&void 0!==a?a:void 0}})),s=e.format(t,!1),o=await this.getUserId();return 200===(await i.xhr("POST",`https://app.hibob.com/api/attendance/employees/${o}/attendance/entries?forDate=${s}`,a)).status}static async timelogReasons(){return(await this.metadata()).timeLogEntryReason.values.map((e=>({id:e.serverId,name:e.value})))}static async attendance(e){return(await i.xhr("GET",`https://app.hibob.com/api/employees/attendance/my/sheets/${e}`,{})).body}static async sheets(){const e=await this.getUserId();return(await i.xhr("GET",`https://app.hibob.com/api/employees/${e}/timelog/attendance/sheets`,{})).body}static async metadata(){return(await i.xhr("GET","https://app.hibob.com/api/company/metadata/lists/?includeArchived=true",{})).body}static async getUserId(){var e;return"string"!=typeof this.userId&&await this.userInfo(),null!==(e=this.userId)&&void 0!==e?e:""}static async userInfo(){const e=await i.xhr("GET","https://app.hibob.com/api/user",{});return this.userId=e.body.id,e.body}}var l,d;!function(e){e[e.Waiting=0]="Waiting",e[e.Saving=1]="Saving",e[e.Saved=2]="Saved",e[e.Error=3]="Error"}(l||(l={}));class c{constructor(){this.sheets=[],this.onDateUpdated=new t,this.onReasonsUpdated=new t,this.onSheetUpdated=new t,this.onSheetsUpdated=new t,this.onSaveStatusUpdated=new t,this.saveHandle=-1,this.saving=!1,this.calculatingFlex=!1,this.fetchingSheets=!1,this.reasons=[]}async initialize(){await this.fetchSheets(),await this.fetchReasons(),this.onSaveStatusUpdated.fire(l.Saved)}async fetchSheets(){var t,n;await o.until((()=>!this.fetchingSheets)),this.fetchingSheets=!0,this.sheets=[];const a=await r.sheets();for(const s of a.employeeSheets){const a=null!==(t=e.parse(s.cycleStartDate))&&void 0!==t?t:0,o=null!==(n=e.parse(s.cycleEndDate))&&void 0!==n?n:0,i={id:s.id,status:s.status,start:a,end:o,dates:[],locked:s.locked,hoursPerDay:0};this.sheets.push(i)}this.sheets.sort(((e,t)=>t.start-e.start)),this.onSheetsUpdated.fire(this.sheets),this.fetchingSheets=!1}async fetchReasons(){this.reasons=(await r.metadata()).timeLogEntryReason.values,this.onReasonsUpdated.fire(this.reasons)}async fetchSheet(t){var a;const s=this.sheets.find((e=>e.id===t));if(!s)return;const o=await r.attendance(t);s.hoursPerDay=o.summary.potentialWorkingHours/o.summary.potentialWorkingDays,s.dates=[];for(const t of o.attendance){const o={dirty:!1,date:null!==(a=e.parse(t.date))&&void 0!==a?a:Date.now(),nonWorkingDay:"WeekendEvent"===t.status||"ApproveTimeoffRequest"===t.status,hoursToWork:s.hoursPerDay,favorited:!1,dateDescription:t.note.description,entries:t.entries.map((a=>{var s,o,i,r,l;return{startHour:n.floor(((null!==(s=e.parse(a.start))&&void 0!==s?s:Date.now())-(null!==(o=e.parse(t.date))&&void 0!==o?o:Date.now()))/36e5,2),lengthHours:n.ceil(((null!==(i=e.parse(a.end))&&void 0!==i?i:Date.now())-(null!==(r=e.parse(a.start))&&void 0!==r?r:Date.now()))/36e5,2),reasonId:a.reason,comment:null!==(l=a.comment)&&void 0!==l?l:null,hasComment:!!a.comment}})).sort(((e,t)=>e.startHour-t.startHour))};"number"==typeof t.paidTimeoffSeconds&&t.paidTimeoffSeconds>0?o.hoursToWork-=t.paidTimeoffSeconds/3600:o.nonWorkingDay&&(o.hoursToWork=0),s.dates.push(o)}s.dates.sort(((e,t)=>t.date-e.date));const i=await this.getFavoritedDate();i&&i.sheet===s&&(i.date.favorited=!0),this.onSheetUpdated.fire(s)}changeStartHour(e,t,n){const a=this.sheets.find((t=>t.dates.some((t=>t===e))));a&&(e.entries[t].startHour=n,e.dirty=!0,this.queueSave(),this.onDateUpdated.fire({sheet:a,date:e}))}changeLengthHours(e,t,n){const a=this.sheets.find((t=>t.dates.some((t=>t===e))));a&&(e.entries[t].lengthHours=n,e.dirty=!0,this.queueSave(),this.onDateUpdated.fire({sheet:a,date:e}))}changeReason(e,t,n){const a=this.sheets.find((t=>t.dates.some((t=>t===e))));a&&(e.entries[t].reasonId=n,e.dirty=!0,this.queueSave(),this.onDateUpdated.fire({sheet:a,date:e}))}changeComment(e,t,n){const a=this.sheets.find((t=>t.dates.some((t=>t===e))));a&&(e.entries[t].comment=n,e.entries[t].hasComment=!0,e.dirty=!0,this.queueSave(),this.onDateUpdated.fire({sheet:a,date:e}))}toggleComment(e,t){const n=this.sheets.find((t=>t.dates.some((t=>t===e))));n&&(e.entries[t].hasComment=!e.entries[t].hasComment,e.entries[t].comment=e.entries[t].hasComment?"":null,e.dirty=!0,this.queueSave(),this.onDateUpdated.fire({sheet:n,date:e}))}async setFavoritedDate(t){const n=this.sheets.find((e=>e.dates.some((e=>e===t))));if(!n)return;const a=await this.getFavoritedDate();a&&(a.date.favorited=!1,this.onDateUpdated.fire(a)),t.favorited=!0,this.onDateUpdated.fire({sheet:n,date:t}),window.localStorage.setItem("tl_favorite",JSON.stringify({date:e.format(t.date,!1)}))}async getFavoritedDate(){const t=window.localStorage.getItem("tl_favorite");if(!t)return null;const n=JSON.parse(t),a=e.parse(n.date);if("number"==typeof a){const e=this.sheets.find((e=>e.start<=a&&e.end>=a));if(e){e.dates.length<1&&await this.fetchSheet(e.id);const t=e.dates.find((e=>e.date===a));if(t)return{sheet:e,date:t}}}return null}deleteEntry(e,t){const n=this.sheets.find((t=>t.dates.some((t=>t===e))));n&&(e.entries.splice(t,1),e.dirty=!0,this.queueSave(),this.onDateUpdated.fire({sheet:n,date:e}))}async findLastEntry(e){const t=this.sheets.find((t=>t.dates.some((t=>t===e))));if(!t)return;let n=t.dates.indexOf(e),a=-1;for(let e=this.sheets.indexOf(t);e<this.sheets.length;e++){const t=this.sheets[e];for(t.dates.length<1&&await this.fetchSheet(t.id);n<t.dates.length;n++){const e=t.dates[n];if(e.entries.length>0)return a<0?e.entries[e.entries.length-1]:e.entries[a];a=0}n=0}}async newEntry(e){const t=this.sheets.find((t=>t.dates.some((t=>t===e))));if(!t)return;const a=await this.findLastEntry(e);let s=8.5,o=n.round(t.hoursPerDay,2),i="";a&&(e.entries.includes(a)&&(s=a.startHour+a.lengthHours,o=1),i=a.reasonId),e.entries.push({startHour:s,lengthHours:o,reasonId:i,comment:null,hasComment:!1}),e.dirty=!0,this.queueSave(),this.onDateUpdated.fire({sheet:t,date:e})}async pasteFromStarred(e){if(e.entries.length>0)return;const t=this.sheets.find((t=>t.dates.some((t=>t===e))));if(!t)return;const n=await this.getFavoritedDate();if(n&&n.date!==e){for(const t of n.date.entries)e.entries.push({startHour:t.startHour,lengthHours:t.lengthHours,reasonId:t.reasonId,comment:t.comment,hasComment:t.hasComment});e.dirty=!0,this.queueSave(),this.onDateUpdated.fire({sheet:t,date:e})}}queueSave(){window.clearTimeout(this.saveHandle),this.saveHandle=window.setTimeout((()=>this.save()),500),this.onSaveStatusUpdated.fire(l.Waiting)}async save(){await o.until((()=>!this.saving)),this.saving=!0,this.onSaveStatusUpdated.fire(l.Saving);const e=o.for(100);let t=!1;for(const e of this.sheets)for(const n of e.dates)n.dirty&&(await r.submit(n.date,n.entries)?n.dirty=!1:t=!0);await e,this.onSaveStatusUpdated.fire(t?l.Error:l.Saved),this.saving=!1}getFlexPolicy(){return{previousDaysIncluded:28,flexWarningThreshold:21}}async clearSheetBalanceCache(){if(!this.sheets)return;const e=await r.getUserId();for(let t=0;t<this.sheets.length;t++){const n=this.sheets[t];if(!n)continue;const a=`tl_cached_hour_balances_${e}_${n.id}`;n.locked&&null!==window.localStorage.getItem(a)&&window.localStorage.removeItem(a)}}async getCachedBalances(){var t;const a={},s=await r.getUserId();for(let o=this.sheets.length-1;o>=0;o--){const i=this.sheets[o];if(!i)continue;let r=[];const l=`tl_cached_hour_balances_${s}_${i.id}`;if(i.locked&&null!==window.localStorage.getItem(l))r=JSON.parse(null!==(t=window.localStorage.getItem(l))&&void 0!==t?t:"[]");else{if(i.dates.length<1&&await this.fetchSheet(i.id),i.dates.some((e=>e.entries.length>0&&e.entries.some((e=>e.lengthHours>0)))))for(const e of i.dates){const t=n.sum(e.entries.map((e=>e.lengthHours)))-e.hoursToWork;r.push({date:e.date,balance:t})}i.locked&&i.id>0&&window.localStorage.setItem(l,JSON.stringify(r))}a[i.id.toString()]=r.map((t=>({date:t.date,dateString:e.format(t.date,!1),realBalance:t.balance,reallocatedBalance:n.round(t.balance,3)}))).sort(((e,t)=>e.date-t.date))}return a}async getFlexStatus(){var t,a,s;const i=this.getFlexPolicy(),r=null!==(t=e.parse(e.format(Date.now(),!1)))&&void 0!==t?t:0,l=null!==(a=e.parse(e.format(r-864e5*(i.previousDaysIncluded-1),!1)))&&void 0!==a?a:0,d=null!==(s=e.parse(e.format(r-864e5*(i.flexWarningThreshold-1),!1)))&&void 0!==s?s:0,c=[];let h=0;if(this.sheets){await o.until((()=>!this.calculatingFlex)),this.calculatingFlex=!0;const e=await this.getCachedBalances();for(let t=this.sheets.length-1;t>=0;t--){const n=e[this.sheets[t].id];n&&c.push(...n)}for(let e=0;e<c.length;e++){const t=c[e];for(let a=0;a<e&&0!==t.reallocatedBalance;a++){const e=c[a],s=Math.min(Math.abs(t.reallocatedBalance),Math.abs(e.reallocatedBalance));t.reallocatedBalance<0&&e.reallocatedBalance>0?(e.reallocatedBalance-=s,t.reallocatedBalance+=s):t.reallocatedBalance>0&&e.reallocatedBalance<0&&(e.reallocatedBalance+=s,t.reallocatedBalance-=s),e.reallocatedBalance=n.round(e.reallocatedBalance,3)}t.reallocatedBalance=n.round(t.reallocatedBalance,3)}h=n.sum(c.map((e=>n.round(e.reallocatedBalance,3)))),this.calculatingFlex=!1}return{balance:h,unbalancedDates:c.filter((e=>0!==e.reallocatedBalance)),overdueDates:c.filter((e=>0!==e.reallocatedBalance&&e.date<=l)),warningDates:c.filter((e=>0!==e.reallocatedBalance&&e.date<=d&&e.date>l))}}}class h{}h.buttons=[{className:"tl-settings-reload-locked-sheets-button",icon:"cached",text:"Reload Locked Sheets",title:"Recalculates flex balance for all locked sheets.",onClick:e=>{var t;return null===(t=e.model)||void 0===t?void 0:t.clearSheetBalanceCache().then((()=>e.updateBalance()))}}];class u{constructor(){this.sheetDropdownOptions=[],this.sheetDates=[],this.weekSums=[],this.reasons=[],this.onDarkModeChange=new t,window.timelog=this,this.addButton()}async addButton(){for(;;){if(document.querySelector("div.app-content nav")){this.toggleButton=document.createElement("button"),this.toggleButton.className="tl-toggle-btn",this.toggleButton.appendChild(s.get("sentiment_very_satisfied")),this.toggleButton.title="HiBob Utilities",this.toggleButton.onclick=()=>this.toggleVisible(),this.toggleButton.style.position="fixed",this.toggleButton.style.zIndex="10",this.toggleButton.style.backgroundColor="white",this.toggleButton.style.top="0",this.toggleButton.style.right="0",document.body.appendChild(this.toggleButton),this.createUI(),await this.createModel(),"#tl-ui"===location.hash&&this.toggleVisible(),this.onDarkModeChange.fire(this.isDarkMode());break}await o.for(1)}}toggleVisible(){var e;this.timelogUIOuter&&("none"===this.timelogUIOuter.style.display?(this.timelogUIOuter.style.display="block",location.hash="#tl-ui",document.body.style.overflow="hidden",this.sheetContainer&&(this.sheetContainer.innerHTML=""),null===(e=this.model)||void 0===e||e.fetchSheets(),u.onShow.fire(this)):(this.timelogUIOuter.style.display="none",location.hash="",document.body.style.overflow="initial"))}isDarkMode(){return"true"===localStorage.getItem("tl_dark_mode")}toggleDarkMode(){this.isDarkMode()?localStorage.setItem("tl_dark_mode","false"):localStorage.setItem("tl_dark_mode","true"),this.onDarkModeChange.fire(this.isDarkMode())}createUI(){const e=document.createElement("style");e.innerHTML="\n.tl-toggle-btn\n{\n    border: none;\n    background: none;\n    font-size: 2em;\n}\n.tl-close-btn\n{\n    font-size: 2em;\n    position: absolute;\n    right: 5px;\n}\n.tl-ui\n{\n    position: fixed;\n    z-index: 1000;\n    inset: 0px;\n    background-color: white;\n    overflow-y: scroll;\n    padding: 10px;\n}        \n.tl-date\n{\n    margin-top: 10px;\n    padding: 10px;\n    border: 1px solid gray;\n    border-radius: 5px;\n}\n.tl-save-status, .tl-add-entry-btn\n{\n    margin-left: 10px;\n}\n.tl-entry\n{\n    margin-top: 5px;\n}\n.tl-entry > *\n{\n    margin-left: 5px;\n}\n.tl-entry > input[type=number]\n{\n    width: 50px;\n}\n.tl-entry > input[type=time]\n{\n    width: 75px;\n}\n.tl-save-status\n{\n    font-weight: bold;\n}\n.tl-sheet-select\n{\n    margin-left: 5px;\n}\n.tl-date-label\n{\n    font-weight: bold;\n}\n.tl-date-label.tl-date-label-weekend\n{\n    font-weight: initial;\n    font-style: italic;\n    color: gray;\n}\n.tl-entry-reason \n{\n    padding: 3px;\n}\n.tl-remove-entry-btn\n{\n    float: right;\n}\n.tl-week-seperator\n{\n    margin-top: 57px;\n}\n.tl-balance-label\n{\n    margin: 5px;\n    display: inline-block;\n}\n.tl-balance-help\n{\n    display: inline-block;\n    cursor: help;\n}\n\n.tl-ui-inner\n{\n    display: table;\n    margin-left: auto;\n    margin-right: auto;\n}\n.tl-ui-inner, .tl-week-seperator, .tl-date\n{\n    min-width: 650px;\n}\n.tl-entry-comment {\n    margin-top: 5px;\n    margin-bottom: 15px;\n    width: 100%;\n    display: none;\n}\n.tl-has-comment .tl-entry-comment\n{\n    display: block;\n}\n.tl-success\n{\n    color: #02B875;\n}\n.tl-warning\n{\n    color: #F0AF52;\n}\n.tl-danger\n{\n    color: #DA5652;\n}\n.tl-sum-hours\n{\n    position: absolute;\n    margin-top: -23px;\n}\n.tl-week-sum\n{\n    position: absolute;\n    margin-top: -57px;\n    text-decoration: underline;\n}\n.tl-ui button.tl-star-button, .tl-ui.tl-dark button.tl-star-button\n{\n    background: none;\n    border: none;\n    margin: 0;\n    padding: 0;\n}\n.tl-ui button.tl-star-button.tl-favorite, .tl-ui.tl-dark button.tl-star-button.tl-favorite\n{\n    color: #f1a00b;\n    opacity: 1;\n}\n.tl-paste-btn {\n    margin-left: 5px;\n    display: none;\n}\n.tl-has-favorite .tl-paste-btn:not(.tl-hide-favorite-button)\n{\n    display: inline-block;\n}\n.tl-show-on-hover\n{\n    opacity: 0;\n}\n.tl-date:hover .tl-show-on-hover\n{\n    opacity: 1;\n}\n.tl-no-reason-warning {\n    margin-left: 180px;\n    position: absolute;\n    margin-top: -22px;\n    font-weight: bold;\n    background-color: white;\n    user-select: none;\n    pointer-events: none;\n}\n.tl-no-reason-warning.tl-has-reason\n{\n    display: none;\n}\n.tl-clickable\n{\n    cursor: pointer;\n}\n.tl-dark-mode-btn {\n    position: fixed;\n    bottom: 5px;\n    right: 20px;\n}\n.tl-ui button\n{\n    background-color: #d9d9d9;\n    border: 1px solid gray;\n    border-radius: 5px;\n}\n.tl-ui button:hover\n{\n    background-color: #efebeb;\n}\n\n.tl-ui.tl-dark\n{\n    background-color: #1E1E1E;\n    color: white;\n}\n.tl-ui.tl-dark select, .tl-ui.tl-dark input {\n    color: white;\n    background-color: #252526;\n    border: 1px gray solid;\n    color-scheme: dark;\n}\n.tl-ui.tl-dark button\n{\n    background-color: #333333;\n    border: 1px solid #282828;\n    color: white;\n}\n.tl-ui.tl-dark button:hover\n{\n    background-color: #525252;\n}\n.tl-ui.tl-dark .tl-no-reason-warning\n{\n    background-color: #252526;\n}\n.tl-weekend-description {\n    color: gray;\n    font-style: italic;\n    float: right;\n    margin-top: 2px;\n    display: inline-block;\n    max-width: 400px;\n    overflow: hidden;\n    max-height: 35px;\n}\n.tl-weekend-description.tl-weekend-description-hidden\n{\n    display: none;\n}\n.tl-version-number {\n    position: fixed;\n    bottom: 5px;\n    left: 5px;\n}\n\n.tl-settings {\n    position: fixed;\n    inset: 0;\n    z-index: 100;\n}\n.tl-settings-back {\n    inset: 0;\n    position: absolute;\n    background-color: black;\n    opacity: 0.5;\n    cursor: pointer;\n}\n\n.tl-settings.tl-settings-hidden {\n    display: none;\n}\n\n.tl-settings-version {\n    margin: 5px 10px;\n    border-bottom: 1px solid gray;\n}\n\n.tl-settings-version:last-child {\n    border-bottom: 0;\n}\n\n.tl-settings-title {\n    font-weight: bold;\n    font-size: 1.25em;\n}\n.tl-settings-inner {\n    position: absolute;\n    background-color: white;\n    height: 70vh;\n    width: 90vw;\n    left: 5vw;\n    top: 15vh;\n    border: 1px solid gray;\n    border-radius: 10px;\n    padding: 10px;\n    overflow: auto;\n}\n.tl-settings-version button\n{\n    margin-left: 5px;\n    margin-bottom: 15px;\n}\n\n.tl-dark .tl-settings-inner\n{\n    background-color: #1a1a1a;\n}\n\n.tl-balance-warning\n{\n    font-size: 0.8em;\n    display: inline-block;\n    text-decoration: underline;\n    cursor: help;\n}\n.tl-hidden\n{\n    display: none;\n}\n\n.tl-no-entries-warning\n{\n    float: right;\n    font-weight: bold;\n}\n\n",document.body.appendChild(e),this.timelogUIOuter=document.createElement("div"),this.timelogUIOuter.className="tl-ui",this.timelogUIOuter.style.display="none",document.body.append(this.timelogUIOuter),this.timelogUIInner=document.createElement("div"),this.timelogUIInner.className="tl-ui-inner",this.timelogUIOuter.append(this.timelogUIInner);const t=document.createElement("button");t.className="tl-close-btn",t.appendChild(s.get("close")),t.onclick=()=>this.toggleVisible(),this.timelogUIInner.appendChild(t),this.darkModeButton=document.createElement("button"),this.darkModeButton.className="tl-dark-mode-btn",this.darkModeButton.onclick=()=>this.toggleDarkMode(),this.timelogUIInner.appendChild(this.darkModeButton),this.onDarkModeChange.on((e=>{var t,n;e?null===(t=this.timelogUIOuter)||void 0===t||t.classList.add("tl-dark"):null===(n=this.timelogUIOuter)||void 0===n||n.classList.remove("tl-dark"),this.darkModeButton&&(this.darkModeButton.innerHTML="",this.darkModeButton.append(e?s.get("light_mode"):s.get("dark_mode")))}),this);const n=this.createSettingsWindow();this.timelogUIInner.appendChild(n);const a=document.createElement("div");a.append(s.get("settings",!0)),a.append(" 1.1.13"),a.className="tl-version-number",a.onclick=()=>n.classList.remove("tl-settings-hidden"),a.style.cursor="pointer",a.style.textDecoration="underline",this.timelogUIInner.appendChild(a);const o=document.createElement("span");o.innerText="Sheet:",this.timelogUIInner.appendChild(o),this.sheetDropdown=document.createElement("select"),this.sheetDropdown.className="tl-sheet-select",this.sheetDropdown.onchange=()=>this.onSelectedSheetChange(),this.timelogUIInner.appendChild(this.sheetDropdown),this.saveStatus=document.createElement("span"),this.saveStatus.className="tl-save-status",this.saveStatus.onclick=()=>this.onSaveStatusClick(),this.timelogUIInner.append(this.saveStatus);const i=document.createElement("div");i.className="tl-balance",this.timelogUIInner.append(i),this.balanceLabel=document.createElement("div"),this.balanceLabel.innerText="Balance: ",this.balanceLabel.className="tl-balance-label",i.append(this.balanceLabel),this.balanceWarning=document.createElement("div"),this.balanceWarning.className="tl-balance-warning tl-warning tl-hidden",i.append(this.balanceWarning),this.sheetContainer=document.createElement("div"),this.sheetContainer.className="tl-sheet",this.timelogUIInner.appendChild(this.sheetContainer)}createSettingsWindow(){const e=document.createElement("div");e.className="tl-settings tl-settings-hidden";const t=document.createElement("div");t.className="tl-settings-back",e.append(t),t.onclick=()=>e.classList.add("tl-settings-hidden");const n=document.createElement("div");n.className="tl-settings-inner",e.append(n);const a=document.createElement("div");a.className="tl-settings-version",n.append(a);for(const e of h.buttons){const t=document.createElement("button");t.className=e.className,t.append(s.get(e.icon)),t.append(e.text),e.title&&(t.style.cursor="help"),t.title=e.title,t.onclick=()=>e.onClick(this),a.appendChild(t)}const o=[{version:"1.1.13 - 06/12/2023",text:["Fixed an issue where the new HiBob layout broke everything. How silly of HiBob."]},{version:"1.1.12 - 31/03/2023",text:["Removed april fools :)"]},{version:"1.1.11 - 21/01/2023",text:["Change expected hours to work on a day to show as a warning on empty days with expected hours."]},{version:"1.1.10 - 20/01/2023",text:["Show expected hours to work on a given day."]},{version:"1.1.9 - 04/11/2022",text:["Fix problem where changing user on HiBob would cause problems due to caching"]},{version:"1.1.8 - 04/11/2022",text:["Fixed issue where you couldn't make an entry have a length of 0 hours","On the warning of flex becoming too old, show how many hours are left to be flexed on that day"]},{version:"1.1.7 - 02/11/2022",text:['Removed the option to "fix" old flex, as this solution would break when switching devices.',"Please talk to HR if you need to clear time logged before october.","To fix old flex hours without taking time off, please talk to HR or Finance about a solution."]},{version:"1.1.6 - 26/10/2022",text:["Holidays are now shown in the alternative timelog UI","Holidays are considered in the flex time calculation."]},{version:"1.1.4 - 03/10/2022",text:["Added a warning when unbalanced flex days are close to expiring.","Added button to cancel old unbalanced flex for extraordinary situations","Added buttons to delete cached data in the settings menu."]},{version:"1.1.3 - 03/10/2022",text:["Fixed how flex hours is calculated.","A warning is shown if you have unbalanced flex days that are older than 28 days."]},{version:"1.1.2 - 03/10/2022",text:["Fixed problem where you couldn't log time on some days, where you were supposed to."]},{version:"1.1.1 - 30/09/2022",text:["Added changelog","Show descriptions on non-working days"]}];for(const e of o){const t=document.createElement("div");t.className="tl-settings-version",n.append(t);const a=document.createElement("div");a.className="tl-settings-title",a.innerText=e.version,t.append(a);const s=document.createElement("ul");s.className="tl-settings-list",t.append(s);for(const t of e.text){const e=document.createElement("li");e.innerText=t,s.append(e)}}return e}async createModel(){this.model&&(this.model.onDateUpdated.off(this.onDateUpdated,this),this.model.onReasonsUpdated.off(this.onReasonsUpdated,this),this.model.onSaveStatusUpdated.off(this.onSaveStatusUpdated,this),this.model.onSheetUpdated.off(this.onSheetUpdated,this),this.model.onSheetsUpdated.off(this.onSheetsUpdated,this)),this.model=new c,this.model.onDateUpdated.on(this.onDateUpdated,this),this.model.onReasonsUpdated.on(this.onReasonsUpdated,this),this.model.onSaveStatusUpdated.on(this.onSaveStatusUpdated,this),this.model.onSheetUpdated.on(this.onSheetUpdated,this),this.model.onSheetsUpdated.on(this.onSheetsUpdated,this),await this.model.initialize()}getDateContainer(e){if(this.selectedSheet===e.sheet&&this.sheetContainer){let t=this.sheetDates.find((t=>t.date===e.date));if(!t){if(t={date:e.date,parent:document.createElement("div"),title:document.createElement("span"),entries:[],starButton:document.createElement("button"),pasteButton:document.createElement("button"),weekendDescription:document.createElement("div"),noEntriesWarning:document.createElement("div")},this.sheetDates.push(t),t.parent.className="tl-date",this.sheetContainer.appendChild(t.parent),1===new Date(e.date.date).getDay()){const e=document.createElement("div");e.className="tl-week-seperator",this.sheetContainer.appendChild(e)}if(t.parent.append(t.starButton),t.starButton.onclick=()=>{var t;return null===(t=this.model)||void 0===t?void 0:t.setFavoritedDate(e.date)},t.starButton.className="tl-star-button tl-show-on-hover",t.starButton.title="Favorite Day",t.title.className="tl-date-label",t.title.innerText=new Date(e.date.date).toDateString(),e.date.nonWorkingDay&&t.title.classList.add("tl-date-label-weekend"),t.parent.append(t.title),t.weekendDescription.className="tl-weekend-description",t.parent.append(t.weekendDescription),t.noEntriesWarning.className="tl-no-entries-warning",t.parent.append(t.noEntriesWarning),!e.sheet.locked){const n=document.createElement("button");n.appendChild(s.get("add")),n.className="tl-add-entry-btn tl-show-on-hover",n.onclick=()=>{var t;return null===(t=this.model)||void 0===t?void 0:t.newEntry(e.date)},t.parent.append(n),t.pasteButton=document.createElement("button"),t.pasteButton.appendChild(s.get("switch_access_shortcut_add")),t.pasteButton.title="Paste from Favorite Day",t.pasteButton.className="tl-paste-btn tl-show-on-hover",t.pasteButton.onclick=()=>{var t;return null===(t=this.model)||void 0===t?void 0:t.pasteFromStarred(e.date)},t.parent.append(t.pasteButton)}this.addToWeekSum(t)}return t}return null}getEntryContainer(t,o,i){let r=o.entries.find((e=>e.entry===i));if(!r){r={entry:i,parent:document.createElement("div"),startHour:document.createElement("input"),endHour:document.createElement("input"),length:document.createElement("input"),reason:document.createElement("select"),comment:document.createElement("input"),commentButton:document.createElement("button"),noReasonWarning:document.createElement("div")},o.entries.push(r),r.parent.className="tl-entry",o.parent.appendChild(r.parent),r.startHour.type="time",r.startHour.className="tl-entry-start",t.sheet.locked&&(r.startHour.disabled=!0),r.startHour.onchange=()=>{var a,s,o;const l=i.startHour+i.lengthHours;null===(a=this.model)||void 0===a||a.changeStartHour(t.date,t.date.entries.indexOf(i),e.parseTimeTohours(null!==(s=null==r?void 0:r.startHour.value)&&void 0!==s?s:"08:00"));const d=n.round(l-i.startHour,2);null===(o=this.model)||void 0===o||o.changeLengthHours(t.date,t.date.entries.indexOf(i),d)},r.parent.appendChild(r.startHour);const l=document.createElement("span");l.className="tl-end-label",l.innerText="-",r.parent.appendChild(l),r.endHour.type="time",r.endHour.className="tl-entry-end",t.sheet.locked&&(r.endHour.disabled=!0),r.endHour.onchange=()=>{var a;if(null==r?void 0:r.endHour){const s=n.round(e.parseTimeTohours(r.endHour.value)-i.startHour,2);null===(a=this.model)||void 0===a||a.changeLengthHours(t.date,t.date.entries.indexOf(i),s)}},r.parent.appendChild(r.endHour),r.reason.onchange=()=>{var e,n;return null===(e=this.model)||void 0===e?void 0:e.changeReason(t.date,t.date.entries.indexOf(i),null!==(n=null==r?void 0:r.reason.value)&&void 0!==n?n:"")},t.sheet.locked&&(r.reason.disabled=!0),r.reason.className="tl-entry-reason",r.parent.appendChild(r.reason),this.updateReasonsDropdown(r.reason),1===o.entries.length&&(o.sumHours=document.createElement("span"),o.sumHours.className="tl-sum-hours",r.parent.append(o.sumHours)),r.length.type="number",r.length.className="tl-entry-length",r.length.step="0.01",t.sheet.locked&&(r.length.disabled=!0),r.length.onchange=()=>{var e;null===(e=this.model)||void 0===e||e.changeLengthHours(t.date,t.date.entries.indexOf(i),a.unscale(parseFloat((null==r?void 0:r.length.value)||"0")))},r.parent.appendChild(r.length);const d=document.createElement("span");if(d.className="tl-duration-label",d.innerText=a.getUnitName(),r.parent.appendChild(d),!t.sheet.locked){r.commentButton.className="tl-add-comment-btn tl-show-on-hover",r.commentButton.onclick=()=>{var e;return null===(e=this.model)||void 0===e?void 0:e.toggleComment(t.date,t.date.entries.indexOf(i))},r.parent.appendChild(r.commentButton);const e=document.createElement("button");e.appendChild(s.get("delete")),e.className="tl-remove-entry-btn tl-show-on-hover",e.onclick=()=>{var e;return null===(e=this.model)||void 0===e?void 0:e.deleteEntry(t.date,t.date.entries.indexOf(i))},r.parent.appendChild(e)}r.noReasonWarning.append(s.get("warning",!0)),r.noReasonWarning.append(" No reason selected!"),r.noReasonWarning.className="tl-no-reason-warning tl-warning tl-has-reason",r.parent.appendChild(r.noReasonWarning),r.comment.type="text",r.comment.placeholder="Write a note...",r.comment.title="Write a note...",r.comment.className="tl-entry-comment",t.sheet.locked&&(r.comment.disabled=!0),r.comment.onchange=()=>{var e,n;null===(e=this.model)||void 0===e||e.changeComment(t.date,t.date.entries.indexOf(i),null!==(n=null==r?void 0:r.comment.value)&&void 0!==n?n:"")},r.parent.appendChild(r.comment)}return r}addToWeekSum(e){if(this.weekSums.length<1||0===new Date(e.date.date).getDay()){const t={dates:[e],element:document.createElement("div")};t.element.className="tl-week-sum",this.weekSums.push(t),e.parent.appendChild(t.element),e.parent.style.marginTop="38px"}else this.weekSums[this.weekSums.length-1].dates.push(e)}onDateUpdated(t){var o,i,r;if(this.selectedSheet===t.sheet&&this.sheetContainer){let l=this.getDateContainer(t);if(l){for(const i of t.date.entries){let r=this.getEntryContainer(t,l,i);r.startHour.value=e.formatHour(i.startHour),r.length.value=n.round(a.scale(i.lengthHours),2).toString(),r.endHour.value=e.formatHour(i.startHour+i.lengthHours),r.reason.value=i.reasonId,r.comment.value=null!==(o=i.comment)&&void 0!==o?o:"",i.reasonId?r.noReasonWarning.classList.add("tl-has-reason"):r.noReasonWarning.classList.remove("tl-has-reason"),r.commentButton.title=i.hasComment?"Remove note":"Add note",r.commentButton.innerHTML="",r.commentButton.appendChild(s.get(i.hasComment?"speaker_notes_off":"speaker_notes")),i.hasComment?r.parent.classList.add("tl-has-comment"):r.parent.classList.remove("tl-has-comment")}const d=l.entries.filter((e=>!t.date.entries.find((t=>t===e.entry))));if(l.entries=l.entries.filter((e=>!d.includes(e))),d.forEach((e=>e.parent.remove())),l.sumHours){const e=n.sum(t.date.entries.map((e=>e.lengthHours)));l.sumHours.innerText=`${a.format(n.round(e,2))}`}if(l.starButton.innerHTML="",l.starButton.disabled=t.date.favorited,l.starButton.classList.remove("tl-favorite"),l.starButton.appendChild(s.get("star",t.date.favorited)),t.date.favorited&&l.starButton.classList.add("tl-favorite"),l.entries.length>0||l.date.favorited?l.pasteButton.classList.add("tl-hide-favorite-button"):l.pasteButton.classList.remove("tl-hide-favorite-button"),l.title.title=null!==(i=t.date.dateDescription)&&void 0!==i?i:"",t.date.nonWorkingDay&&t.date.entries.length<1?(l.weekendDescription.classList.remove("tl-weekend-description-hidden"),l.weekendDescription.innerText=null!==(r=t.date.dateDescription)&&void 0!==r?r:""):l.weekendDescription.classList.add("tl-weekend-description-hidden"),l.date.hoursToWork>0&&l.entries.length<1){l.noEntriesWarning.classList.remove("tl-hidden"),l.noEntriesWarning.classList.add("tl-warning");const e=n.sum(t.date.entries.map((e=>e.lengthHours)));l.noEntriesWarning.innerHTML="",l.noEntriesWarning.append(s.get("warning",!0)),l.noEntriesWarning.append(` ${n.round(a.scale(e),2)} / ${a.format(n.round(l.date.hoursToWork,2))}`)}else l.noEntriesWarning.classList.add("tl-hidden")}const d=this.weekSums.find((e=>e.dates.some((e=>e.date===t.date))));if(d){const t=n.sum(d.dates.map((e=>n.sum(e.entries.map((e=>e.entry.lengthHours)))))),s=n.sum(d.dates.map((e=>e.date.hoursToWork))),o=e.getWeekNumberFromDate(d.dates[0].date.date);d.element.innerHTML=`<b>Week ${o}</b>: ${n.round(a.scale(t),2)} / ${a.format(n.round(s,2))}`}}this.updateBalance()}updateReasonsDropdown(e){e.innerHTML="";for(const t of this.reasons){const n=document.createElement("option");n.value=t.serverId,n.innerText=t.value,e.appendChild(n)}}onReasonsUpdated(e){this.reasons=e;for(const e of this.sheetDates)for(const t of e.entries)this.updateReasonsDropdown(t.reason)}onSaveStatusUpdated(e){this.saveStatus&&(this.saveStatus.innerHTML="",this.saveStatus.classList.remove("tl-success"),this.saveStatus.classList.remove("tl-warning"),this.saveStatus.classList.remove("tl-clickable"),e===l.Saved&&(this.saveStatus.appendChild(s.get("cloud_done",!0)),this.saveStatus.append(" Saved"),this.saveStatus.classList.add("tl-success")),e===l.Waiting&&(this.saveStatus.appendChild(s.get("pending")),this.saveStatus.append(" Pending...")),e===l.Saving&&(this.saveStatus.appendChild(s.get("cloud_upload")),this.saveStatus.append(" Saving...")),e===l.Error&&(this.saveStatus.appendChild(s.get("cloud_off")),this.saveStatus.append(" Failed!"),this.saveStatus.classList.add("tl-warning"),this.saveStatus.classList.add("tl-clickable")))}onSaveStatusClick(){var e,t;(null===(e=this.saveStatus)||void 0===e?void 0:e.classList.contains("tl-clickable"))&&(null===(t=this.model)||void 0===t||t.save())}onSheetUpdated(e){if(this.sheetDropdown&&!this.sheetDropdownOptions.find((t=>t.sheet===e))){const t=document.createElement("option");t.value=e.id.toString(),t.innerText=`${new Date(e.start).toDateString()} - ${new Date(e.end).toDateString()}${e.locked?" (locked)":""}`,this.sheetDropdownOptions.push({sheet:e,element:t}),this.sheetDropdown.appendChild(t)}this.selectedSheet===e&&(this.sheetContainer&&(this.sheetContainer.innerHTML=""),this.sheetDates=[],this.weekSums=[]);for(const t of e.dates)this.onDateUpdated({sheet:e,date:t});this.updateBalance()}onSheetsUpdated(e){this.sheetDropdown&&(this.sheetDropdown.innerHTML=""),this.sheetDropdownOptions=[];for(const t of e)this.onSheetUpdated(t);this.onSelectedSheetChange()}onSelectedSheetChange(){var e;if(!this.sheetDropdown)return;this.sheetContainer&&(this.sheetContainer.innerHTML=""),this.sheetDates=[];const t=this.sheetDropdown.value;this.selectedSheet=null===(e=this.sheetDropdownOptions.find((e=>e.element.value===t)))||void 0===e?void 0:e.sheet,this.selectedSheet&&this.model&&this.model.fetchSheet(this.selectedSheet.id)}async updateBalance(){var t,o,i;if(!this.model||!this.balanceLabel||!this.selectedSheet)return;const r=await this.model.getFlexStatus(),l=n.round(r.balance,2);if(this.balanceLabel.innerText=`Flex: ${a.format(l)}${0===l?" 🥳":""}`,null===(t=this.balanceWarning)||void 0===t||t.classList.add("tl-hidden"),r.overdueDates.length+r.warningDates.length>0&&this.balanceWarning){const t=this.model.getFlexPolicy();this.balanceWarning.classList.remove("tl-hidden"),this.balanceWarning.innerHTML="",this.balanceWarning.append(s.get("warning",!0)),r.overdueDates.length>0?(this.balanceWarning.append(`You have ${r.overdueDates.length} unbalanced flex date${1===r.overdueDates.length?"":"s"} older than ${t.previousDaysIncluded} days!`),this.balanceWarning.title+=`Overdue dates: ${r.overdueDates.map((t=>e.format(t.date,!1))).join(", ")}`):r.warningDates.length>0&&this.balanceWarning.append(`${r.warningDates.length} unbalanced flex date${1===r.warningDates.length?"":"s"} will soon be older than ${t.previousDaysIncluded} days!`),this.balanceWarning.title="",r.overdueDates.length>0&&(this.balanceWarning.title+=`Overdue dates: ${r.overdueDates.map((t=>`${e.format(t.date,!1)} (${t.reallocatedBalance}h)`)).join(", ")}`),r.warningDates.length>0&&(this.balanceWarning.title+=`${this.balanceWarning.title.length>0?"\n":""}Soon overdue dates: ${r.warningDates.map((t=>`${e.format(t.date,!1)} (${t.reallocatedBalance}h)`)).join(", ")}`),this.balanceWarning.append(" "),this.balanceWarning.append(s.get("info",!1))}await this.model.getFavoritedDate()?null===(o=this.sheetContainer)||void 0===o||o.classList.add("tl-has-favorite"):null===(i=this.sheetContainer)||void 0===i||i.classList.remove("tl-has-favorite")}}u.onShow=new t,function(e){e[e.FixAll=0]="FixAll",e[e.FixLatest=1]="FixLatest"}(d||(d={})),class{static setAprilFoolsOptOut(e){window.localStorage.setItem("tl_april_fools_opt_out",JSON.stringify(e))}static getAprilFoolsOptOut(){var e;return JSON.parse(null!==(e=window.localStorage.getItem("tl_april_fools_opt_out"))&&void 0!==e?e:"false")}static setHasSeenPopup(e){window.localStorage.setItem("tl_april_fools_popup",JSON.stringify(e))}static hasSeenPopup(){var e;return JSON.parse(null!==(e=window.localStorage.getItem("tl_april_fools_popup"))&&void 0!==e?e:"false")}static isAprilFools(){return"#tl-aprilfools"===window.location.hash}static init(){this.isAprilFools()?(h.buttons.push({className:"",icon:"bolt",text:"Opt out of Teralightmeters",title:"April fools!",onClick:()=>{this.setAprilFoolsOptOut(!this.getAprilFoolsOptOut()),location.reload()}}),this.getAprilFoolsOptOut()||(a.scaling={unitGeneral:"teralightmeter(s)",unitPlural:"teralightmeters",unitSingular:"teralightmeter",scale:this.hour2TeralightmeterScaling()}),u.onShow.on((e=>this.showAprilFoolsPopup(e)),this)):(this.setAprilFoolsOptOut(!1),this.setHasSeenPopup(!1))}static showAprilFoolsPopup(e){var t;if(this.hasSeenPopup())return;const n=document.createElement("div");n.className="tl-settings",n.style.cursor="pointer";const a=document.createElement("div");a.className="tl-settings-back",n.append(a);const s=()=>{n.remove(),this.setHasSeenPopup(!0)};a.onclick=()=>s(),n.onclick=()=>s();const o=document.createElement("div");o.className="tl-settings-inner",n.append(o);const i=document.createElement("div");i.className="tl-settings-version",o.append(i);const r=(new Date).getMonth()<3;i.innerHTML=`<h1>Introducing: the Teralightmeter!</h1>\n        <h3>All hours logged will now be measured in a new time unit: the Teralightmeter - the time it takes for light to travel 1 000 000 000 000 meters!</h3>\n        <h3>This feature was made exclusively for your benefit, in no way related to ${r?"an upcoming date.":"today's date."}</h3>\n        <h3>We hope you enjoy 😉📅</h3>`,null===(t=e.timelogUIInner)||void 0===t||t.appendChild(n)}static hour2TeralightmeterScaling(){return 1.0792528488}}.init(),s.initialize(),new u,new class{constructor(){this.submitting=!1,this.createUI(),this.clockInButtonFinder()}createUI(){const e=document.createElement("style");e.innerHTML="\n.re-label\n{\n    font-size: 1.5em;\n    margin-bottom: 10px;\n}\n.re-reason-select\n{\n    padding: 5px;\n}\n.re-reason-ui\n{\n    z-index: 2000;\n    position: fixed;\n    inset: 0;\n    background-color: rgba(0,0,0,0.75);\n    padding-top: 45vh;\n    text-align: center;\n    color: white;\n    font-weight: bold;\n}\n.re-btn\n{\n    padding: 0 var(--button-padding-x, 15px);\n    min-width: 80px;\n    height: var(--button-size, 30px);\n    font-weight: 600;\n    font-size: var(--button-font-size, 12px);\n    font-family: var(--body-font-family);\n    border: 0;\n    border-radius: 4px;\n    margin: 5px;\n}\n.re-btn.re-primary\n{\n    color: var(--primary-bg-text-color, white);\n    background-color: var(--primary-600);\n}\n.re-btn.re-secondary\n{\n    color: var(--secondary-bg-text-color, #535353);\n    background-color: var(--secondary-600);\n}\n.re-blur\n{\n    filter: blur(2px);\n}\n.re-submitting .re-btn\n{\n    display: none;\n}\n.re-submitting-text\n{\n    display: none;\n    font-size: 1.5em;\n}\n.re-submitting .re-submitting-text\n{\n    display: block;\n}\n",document.body.append(e),this.reasonEnhancementUI=document.createElement("div"),this.reasonEnhancementUI.className="re-reason-ui",this.reasonEnhancementUI.style.display="none",document.body.appendChild(this.reasonEnhancementUI);const t=document.createElement("div");t.innerText="Choose Default Reason",t.className="re-label",this.reasonEnhancementUI.appendChild(t),this.reasonSelect=document.createElement("select"),this.reasonSelect.className="re-reason-select",this.reasonSelect.onchange=()=>this.saveDefaultReasonValue(),this.reasonEnhancementUI.appendChild(this.reasonSelect),this.reasonEnhancementUI.appendChild(document.createElement("br"));const n=document.createElement("button");n.className="re-cancel-btn re-btn re-secondary",n.innerText="Cancel",n.onclick=()=>this.cancel(),this.reasonEnhancementUI.appendChild(n);const a=document.createElement("button");a.className="re-submit-btn re-btn re-primary",a.innerText="Submit",a.onclick=()=>this.submit(),this.reasonEnhancementUI.appendChild(a);const s=document.createElement("div");s.className="re-submitting-text",s.innerText="Submitting...",this.reasonEnhancementUI.appendChild(s)}async clockInButtonFinder(){for(var e;;)this.findUnenhancedButtons("b-button.punch-clock-button, b-button.time-widget-clock-in-btn, b-button.time-widget-clock-out-btn").forEach((e=>this.enhanceClockInButton(e,d.FixLatest))),this.findUnenhancedButtons("b-button.quick-fix-apply-button").forEach((e=>this.enhanceClockInButton(e,d.FixAll))),this.appRoot||(this.appRoot=null!==(e=document.querySelector("app-root"))&&void 0!==e?e:void 0),await o.for(10)}findUnenhancedButtons(e){var t=[],n=document.querySelectorAll(e);for(const e of n)e.classList.contains("re-enhanced")||(e.classList.add("re-enhanced"),t.push(e));return t}enhanceClockInButton(e,t){e.addEventListener("click",(()=>this.showReasonFixer(t)))}saveDefaultReasonValue(){this.reasonSelect&&window.localStorage.setItem("re-last-reason",this.reasonSelect.value)}loadDefaultReasonValue(){var e;this.reasonSelect&&(this.reasonSelect.value=null!==(e=window.localStorage.getItem("re-last-reason"))&&void 0!==e?e:"")}async showReasonFixer(e){if(this.reasonEnhancementUI&&(await o.for(250),this.setUIVisible(!0),this.mode=e,this.reasonSelect)){const e=await r.metadata();this.reasonSelect.innerHTML="";for(const t of e.timeLogEntryReason.values){const e=document.createElement("option");e.value=t.serverId,e.innerText=t.value,this.reasonSelect.appendChild(e)}this.loadDefaultReasonValue()}}cancel(){this.setUIVisible(!1)}setUIVisible(e){this.reasonEnhancementUI&&(this.reasonEnhancementUI.style.display=e?"block":"none"),this.appRoot&&(e?this.appRoot.classList.add("re-blur"):this.appRoot.classList.remove("re-blur"))}async submit(){var e,t;await o.until((()=>!this.submitting)),this.submitting=!0,null===(e=this.reasonEnhancementUI)||void 0===e||e.classList.add("re-submitting"),this.mode===d.FixAll&&await this.fixAll(),this.mode===d.FixLatest&&await this.fixLatest(),this.setUIVisible(!1),null===(t=this.reasonEnhancementUI)||void 0===t||t.classList.remove("re-submitting"),this.submitting=!1}async fixAll(){if(!this.reasonSelect)return;const t=this.reasonSelect.value,n=await r.sheets();for(const a of n.employeeSheets){if(a.locked)continue;const n=await r.attendance(a.id);for(const a of n.attendance)if(a.entries.some((e=>!e.reason))){const n=e.parse(a.date);if("number"!=typeof n)continue;const s=a.entries.map((a=>{var s,o,i,r;return{startHour:((null!==(s=e.parse(a.start))&&void 0!==s?s:Date.now())-n)/36e5,lengthHours:a.end?((null!==(o=e.parse(a.end))&&void 0!==o?o:Date.now())-(null!==(i=e.parse(a.start))&&void 0!==i?i:Date.now()))/36e5:null,reasonId:a.reason||t,comment:null!==(r=a.comment)&&void 0!==r?r:null}}));await r.submit(n,s)}}}async fixLatest(){if(!this.reasonSelect)return;const t=this.reasonSelect.value;let n=null;const a=await r.sheets();for(const t of a.employeeSheets){if(t.locked)continue;const a=await r.attendance(t.id);for(const t of a.attendance){const a=e.parse(t.date);if("number"==typeof a&&(!n||a>n.date)){const s=t.entries.map((t=>{var n,s,o,i;return{startHour:((null!==(n=e.parse(t.start))&&void 0!==n?n:Date.now())-a)/36e5,lengthHours:t.end?((null!==(s=e.parse(t.end))&&void 0!==s?s:Date.now())-(null!==(o=e.parse(t.start))&&void 0!==o?o:Date.now()))/36e5:null,reasonId:t.reason,comment:null!==(i=t.comment)&&void 0!==i?i:null}}));n={date:a,entries:s}}}}if(n){for(const e of n.entries)e.reasonId=e.reasonId||t;await r.submit(n.date,n.entries)}}}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,