// ==UserScript==
// @name        HiBob Time Utilities
// @version     1.1.10
// @author      Funday Factory
// @description Utilities to make it easier to log time in HiBob
// @match       https://app.hibob.com/*
// @namespace   http://tampermonkey.net/
// @icon        https://www.google.com/s2/favicons?sz=64&domain=hibob.com
// @grant       none
// ==/UserScript==

(()=>{"use strict";class e{static parse(e){if(!e)return null;const t=e.split("T");return t.length<2&&t.push("00:00"),new Date(t.join("T")).getTime()}static format(e,t){if(!e)return"";const n=new Date(e);return`${n.getFullYear()}-${(n.getMonth()+1).toString().padStart(2,"0")}-${n.getDate().toString().padStart(2,"0")}${t?`T${n.getHours().toString().padStart(2,"0")}:${n.getMinutes().toString().padStart(2,"0")}`:""}`}static formatHour(e){const t=Math.floor(e%24),n=Math.round(60*(e-t));return`${t.toString().padStart(2,"0")}:${n.toString().padStart(2,"0")}`}static getWeekNumberFromDate(e){var t=new Date(e);t.setHours(0,0,0,0),t.setDate(t.getDate()+3-(t.getDay()+6)%7);var n=new Date(t.getFullYear(),0,4);return 1+Math.round(((t.getTime()-n.getTime())/864e5-3+(n.getDay()+6)%7)/7)}static parseTimeTohours(e){const t=e.split(":");return parseInt(t[0])+parseInt(t[1])/60}}class t{constructor(){this.handlers=[]}on(e,t){this.handlers.push({handler:e,context:t})}off(e,t){this.handlers=this.handlers.filter((n=>n.handler!==e||n.context!==t))}fire(e){this.handlers.forEach((t=>t.handler.call(t.context,e)))}}class n{static round(e,t){return Math.round(e*10**t)/10**t}static floor(e,t){return Math.floor(e*10**t)/10**t}static ceil(e,t){return Math.ceil(e*10**t)/10**t}static sum(e){let t=0;for(let n=0;n<e.length;n++)t+=e[n];return t}}class a{static scale(e){return e*this.scaling.scale}static unscale(e){return e/this.scaling.scale}static getUnitName(e=null){return null===e?this.scaling.unitGeneral:1===e?this.scaling.unitSingular:this.scaling.unitPlural}static format(e){return`${n.round(this.scale(e),2)} ${this.getUnitName(e)}`}}a.scaling={unitGeneral:"hour(s)",unitPlural:"hours",unitSingular:"hour",scale:1};class s{static initialize(){const e=document.createElement("link");e.href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200",e.rel="stylesheet",document.head.appendChild(e)}static get(e,t=!1){const n=document.createElement("span");return n.className="material-symbols-outlined",n.innerText=e,n.style.verticalAlign="middle",n.style.fontSize="1.5em",n.style.fontVariationSettings="'FILL' "+(t?1:0),n}}class o{static for(e){return new Promise((t=>{window.setTimeout((()=>t()),e)}))}static until(e){return new Promise((t=>{const n=window.setInterval((()=>{e()&&(t(),window.clearInterval(n))}),1)}))}}class i{static xhr(e,t,n){return new Promise((a=>{let s=new XMLHttpRequest;s.open(e,t),s.setRequestHeader("Accept","application/json"),s.setRequestHeader("Content-Type","application/json"),s.onreadystatechange=()=>{if(4===s.readyState){let e;try{e=JSON.parse(s.responseText)}catch(t){e={result:s.responseText}}if(200!==s.status){if(e.hasOwnProperty("error")){const t=e.hasOwnProperty("key")?e.key:s.status.toString();alert(`HiBob Utils: Error ${t} - ${e.error}`)}else alert(`HiBob Utils: Error ${s.status} - check the developer console for more information.`);console.log(`HiBob Utils: Error ${s.status}.`),console.log(s)}a({status:s.status,body:e})}},s.send(JSON.stringify(n))}))}}class r{static async submit(t,n){if(n.some((e=>!e.reasonId)))return console.log("WARNING: SOME ENTRIES HAVE NO REASON SET - NOT SUBMITTING!!",t,n),!1;const a=n.map((n=>{var a;return{start:e.format(t+3600*n.startHour*1e3,!0),end:"number"==typeof n.lengthHours?e.format(t+3600*(n.startHour+n.lengthHours)*1e3,!0):void 0,reason:n.reasonId,comment:null!==(a=n.comment)&&void 0!==a?a:void 0}})),s=e.format(t,!1),o=await this.getUserId();return 200===(await i.xhr("POST",`https://app.hibob.com/api/attendance/employees/${o}/attendance/entries?forDate=${s}`,a)).status}static async timelogReasons(){return(await this.metadata()).timeLogEntryReason.values.map((e=>({id:e.serverId,name:e.value})))}static async attendance(e){return(await i.xhr("GET",`https://app.hibob.com/api/employees/attendance/my/sheets/${e}`,{})).body}static async sheets(){const e=await this.getUserId();return(await i.xhr("GET",`https://app.hibob.com/api/employees/${e}/timelog/attendance/sheets`,{})).body}static async metadata(){return(await i.xhr("GET","https://app.hibob.com/api/company/metadata/lists/?includeArchived=true",{})).body}static async getUserId(){var e;return"string"!=typeof this.userId&&await this.userInfo(),null!==(e=this.userId)&&void 0!==e?e:""}static async userInfo(){const e=await i.xhr("GET","https://app.hibob.com/api/user",{});return this.userId=e.body.id,e.body}}var l,d;!function(e){e[e.Waiting=0]="Waiting",e[e.Saving=1]="Saving",e[e.Saved=2]="Saved",e[e.Error=3]="Error"}(l||(l={}));class c{constructor(){this.sheets=[],this.onDateUpdated=new t,this.onReasonsUpdated=new t,this.onSheetUpdated=new t,this.onSheetsUpdated=new t,this.onSaveStatusUpdated=new t,this.saveHandle=-1,this.saving=!1,this.calculatingFlex=!1,this.fetchingSheets=!1,this.reasons=[]}async initialize(){await this.fetchSheets(),await this.fetchReasons(),this.onSaveStatusUpdated.fire(l.Saved)}async fetchSheets(){var t,n;await o.until((()=>!this.fetchingSheets)),this.fetchingSheets=!0,this.sheets=[];const a=await r.sheets();for(const s of a.employeeSheets){const a=null!==(t=e.parse(s.cycleStartDate))&&void 0!==t?t:0,o=null!==(n=e.parse(s.cycleEndDate))&&void 0!==n?n:0,i={id:s.id,status:s.status,start:a,end:o,dates:[],locked:s.locked,hoursPerDay:0};this.sheets.push(i)}this.sheets.sort(((e,t)=>t.start-e.start)),this.onSheetsUpdated.fire(this.sheets),this.fetchingSheets=!1}async fetchReasons(){this.reasons=(await r.metadata()).timeLogEntryReason.values,this.onReasonsUpdated.fire(this.reasons)}async fetchSheet(t){var a;const s=this.sheets.find((e=>e.id===t));if(!s)return;const o=await r.attendance(t);s.hoursPerDay=o.summary.potentialWorkingHours/o.summary.potentialWorkingDays,s.dates=[];for(const t of o.attendance){const o={dirty:!1,date:null!==(a=e.parse(t.date))&&void 0!==a?a:Date.now(),nonWorkingDay:"WeekendEvent"===t.status||"ApproveTimeoffRequest"===t.status,hoursToWork:s.hoursPerDay,favorited:!1,dateDescription:t.note.description,entries:t.entries.map((a=>{var s,o,i,r,l;return{startHour:n.floor(((null!==(s=e.parse(a.start))&&void 0!==s?s:Date.now())-(null!==(o=e.parse(t.date))&&void 0!==o?o:Date.now()))/36e5,2),lengthHours:n.ceil(((null!==(i=e.parse(a.end))&&void 0!==i?i:Date.now())-(null!==(r=e.parse(a.start))&&void 0!==r?r:Date.now()))/36e5,2),reasonId:a.reason,comment:null!==(l=a.comment)&&void 0!==l?l:null,hasComment:!!a.comment}})).sort(((e,t)=>e.startHour-t.startHour))};"number"==typeof t.paidTimeoffSeconds&&t.paidTimeoffSeconds>0?o.hoursToWork-=t.paidTimeoffSeconds/3600:o.nonWorkingDay&&(o.hoursToWork=0),s.dates.push(o)}s.dates.sort(((e,t)=>t.date-e.date));const i=await this.getFavoritedDate();i&&i.sheet===s&&(i.date.favorited=!0),this.onSheetUpdated.fire(s)}changeStartHour(e,t,n){const a=this.sheets.find((t=>t.dates.some((t=>t===e))));a&&(e.entries[t].startHour=n,e.dirty=!0,this.queueSave(),this.onDateUpdated.fire({sheet:a,date:e}))}changeLengthHours(e,t,n){const a=this.sheets.find((t=>t.dates.some((t=>t===e))));a&&(e.entries[t].lengthHours=n,e.dirty=!0,this.queueSave(),this.onDateUpdated.fire({sheet:a,date:e}))}changeReason(e,t,n){const a=this.sheets.find((t=>t.dates.some((t=>t===e))));a&&(e.entries[t].reasonId=n,e.dirty=!0,this.queueSave(),this.onDateUpdated.fire({sheet:a,date:e}))}changeComment(e,t,n){const a=this.sheets.find((t=>t.dates.some((t=>t===e))));a&&(e.entries[t].comment=n,e.entries[t].hasComment=!0,e.dirty=!0,this.queueSave(),this.onDateUpdated.fire({sheet:a,date:e}))}toggleComment(e,t){const n=this.sheets.find((t=>t.dates.some((t=>t===e))));n&&(e.entries[t].hasComment=!e.entries[t].hasComment,e.entries[t].comment=e.entries[t].hasComment?"":null,e.dirty=!0,this.queueSave(),this.onDateUpdated.fire({sheet:n,date:e}))}async setFavoritedDate(t){const n=this.sheets.find((e=>e.dates.some((e=>e===t))));if(!n)return;const a=await this.getFavoritedDate();a&&(a.date.favorited=!1,this.onDateUpdated.fire(a)),t.favorited=!0,this.onDateUpdated.fire({sheet:n,date:t}),window.localStorage.setItem("tl_favorite",JSON.stringify({date:e.format(t.date,!1)}))}async getFavoritedDate(){const t=window.localStorage.getItem("tl_favorite");if(!t)return null;const n=JSON.parse(t),a=e.parse(n.date);if("number"==typeof a){const e=this.sheets.find((e=>e.start<=a&&e.end>=a));if(e){e.dates.length<1&&await this.fetchSheet(e.id);const t=e.dates.find((e=>e.date===a));if(t)return{sheet:e,date:t}}}return null}deleteEntry(e,t){const n=this.sheets.find((t=>t.dates.some((t=>t===e))));n&&(e.entries.splice(t,1),e.dirty=!0,this.queueSave(),this.onDateUpdated.fire({sheet:n,date:e}))}async findLastEntry(e){const t=this.sheets.find((t=>t.dates.some((t=>t===e))));if(!t)return;let n=t.dates.indexOf(e),a=-1;for(let e=this.sheets.indexOf(t);e<this.sheets.length;e++){const t=this.sheets[e];for(t.dates.length<1&&await this.fetchSheet(t.id);n<t.dates.length;n++){const e=t.dates[n];if(e.entries.length>0)return a<0?e.entries[e.entries.length-1]:e.entries[a];a=0}n=0}}async newEntry(e){const t=this.sheets.find((t=>t.dates.some((t=>t===e))));if(!t)return;const a=await this.findLastEntry(e);let s=8.5,o=n.round(t.hoursPerDay,2),i="";a&&(e.entries.includes(a)&&(s=a.startHour+a.lengthHours,o=1),i=a.reasonId),e.entries.push({startHour:s,lengthHours:o,reasonId:i,comment:null,hasComment:!1}),e.dirty=!0,this.queueSave(),this.onDateUpdated.fire({sheet:t,date:e})}async pasteFromStarred(e){if(e.entries.length>0)return;const t=this.sheets.find((t=>t.dates.some((t=>t===e))));if(!t)return;const n=await this.getFavoritedDate();if(n&&n.date!==e){for(const t of n.date.entries)e.entries.push({startHour:t.startHour,lengthHours:t.lengthHours,reasonId:t.reasonId,comment:t.comment,hasComment:t.hasComment});e.dirty=!0,this.queueSave(),this.onDateUpdated.fire({sheet:t,date:e})}}queueSave(){window.clearTimeout(this.saveHandle),this.saveHandle=window.setTimeout((()=>this.save()),500),this.onSaveStatusUpdated.fire(l.Waiting)}async save(){await o.until((()=>!this.saving)),this.saving=!0,this.onSaveStatusUpdated.fire(l.Saving);const e=o.for(100);let t=!1;for(const e of this.sheets)for(const n of e.dates)n.dirty&&(await r.submit(n.date,n.entries)?n.dirty=!1:t=!0);await e,this.onSaveStatusUpdated.fire(t?l.Error:l.Saved),this.saving=!1}getFlexPolicy(){return{previousDaysIncluded:28,flexWarningThreshold:21}}async clearSheetBalanceCache(){if(!this.sheets)return;const e=await r.getUserId();for(let t=0;t<this.sheets.length;t++){const n=this.sheets[t];if(!n)continue;const a=`tl_cached_hour_balances_${e}_${n.id}`;n.locked&&null!==window.localStorage.getItem(a)&&window.localStorage.removeItem(a)}}async getCachedBalances(){var t;const a={},s=await r.getUserId();for(let o=this.sheets.length-1;o>=0;o--){const i=this.sheets[o];if(!i)continue;let r=[];const l=`tl_cached_hour_balances_${s}_${i.id}`;if(i.locked&&null!==window.localStorage.getItem(l))r=JSON.parse(null!==(t=window.localStorage.getItem(l))&&void 0!==t?t:"[]");else{if(i.dates.length<1&&await this.fetchSheet(i.id),i.dates.some((e=>e.entries.length>0&&e.entries.some((e=>e.lengthHours>0)))))for(const e of i.dates){const t=n.sum(e.entries.map((e=>e.lengthHours)))-e.hoursToWork;r.push({date:e.date,balance:t})}i.locked&&i.id>0&&window.localStorage.setItem(l,JSON.stringify(r))}a[i.id.toString()]=r.map((t=>({date:t.date,dateString:e.format(t.date,!1),realBalance:t.balance,reallocatedBalance:n.round(t.balance,3)}))).sort(((e,t)=>e.date-t.date))}return a}async getFlexStatus(){var t,a,s;const i=this.getFlexPolicy(),r=null!==(t=e.parse(e.format(Date.now(),!1)))&&void 0!==t?t:0,l=null!==(a=e.parse(e.format(r-864e5*(i.previousDaysIncluded-1),!1)))&&void 0!==a?a:0,d=null!==(s=e.parse(e.format(r-864e5*(i.flexWarningThreshold-1),!1)))&&void 0!==s?s:0,c=[];let h=0;if(this.sheets){await o.until((()=>!this.calculatingFlex)),this.calculatingFlex=!0;const e=await this.getCachedBalances();for(let t=this.sheets.length-1;t>=0;t--){const n=e[this.sheets[t].id];n&&c.push(...n)}for(let e=0;e<c.length;e++){const t=c[e];for(let a=0;a<e&&0!==t.reallocatedBalance;a++){const e=c[a],s=Math.min(Math.abs(t.reallocatedBalance),Math.abs(e.reallocatedBalance));t.reallocatedBalance<0&&e.reallocatedBalance>0?(e.reallocatedBalance-=s,t.reallocatedBalance+=s):t.reallocatedBalance>0&&e.reallocatedBalance<0&&(e.reallocatedBalance+=s,t.reallocatedBalance-=s),e.reallocatedBalance=n.round(e.reallocatedBalance,3)}t.reallocatedBalance=n.round(t.reallocatedBalance,3)}h=n.sum(c.map((e=>n.round(e.reallocatedBalance,3)))),this.calculatingFlex=!1}return{balance:h,unbalancedDates:c.filter((e=>0!==e.reallocatedBalance)),overdueDates:c.filter((e=>0!==e.reallocatedBalance&&e.date<=l)),warningDates:c.filter((e=>0!==e.reallocatedBalance&&e.date<=d&&e.date>l))}}}class h{}h.buttons=[{className:"tl-settings-reload-locked-sheets-button",icon:"cached",text:"Reload Locked Sheets",title:"Recalculates flex balance for all locked sheets.",onClick:e=>{var t;return null===(t=e.model)||void 0===t?void 0:t.clearSheetBalanceCache().then((()=>e.updateBalance()))}}];class u{constructor(){this.sheetDropdownOptions=[],this.sheetDates=[],this.weekSums=[],this.reasons=[],this.onDarkModeChange=new t,window.timelog=this,this.addButton()}async addButton(){for(;;){const e=document.querySelector("div.app-content > app-top-bar.app-top-bar > div.actions");if(e){this.toggleButton=document.createElement("button"),this.toggleButton.className="tl-toggle-btn",this.toggleButton.appendChild(s.get("sentiment_very_satisfied")),this.toggleButton.title="HiBob Utilities",this.toggleButton.onclick=()=>this.toggleVisible(),e.appendChild(this.toggleButton),this.createUI(),await this.createModel(),"#tl-ui"===location.hash&&this.toggleVisible(),this.onDarkModeChange.fire(this.isDarkMode());break}await o.for(1)}}toggleVisible(){var e;this.timelogUIOuter&&("none"===this.timelogUIOuter.style.display?(this.timelogUIOuter.style.display="block",location.hash="#tl-ui",document.body.style.overflow="hidden",this.sheetContainer&&(this.sheetContainer.innerHTML=""),null===(e=this.model)||void 0===e||e.fetchSheets(),u.onShow.fire(this)):(this.timelogUIOuter.style.display="none",location.hash="",document.body.style.overflow="initial"))}isDarkMode(){return"true"===localStorage.getItem("tl_dark_mode")}toggleDarkMode(){this.isDarkMode()?localStorage.setItem("tl_dark_mode","false"):localStorage.setItem("tl_dark_mode","true"),this.onDarkModeChange.fire(this.isDarkMode())}createUI(){const e=document.createElement("style");e.innerHTML="\n.tl-toggle-btn\n{\n    border: none;\n    background: none;\n    font-size: 2em;\n}\n.tl-close-btn\n{\n    font-size: 2em;\n    position: absolute;\n    right: 5px;\n}\n.tl-ui\n{\n    position: fixed;\n    z-index: 1000;\n    inset: 0px;\n    background-color: white;\n    overflow-y: scroll;\n    padding: 10px;\n}        \n.tl-date\n{\n    margin-top: 10px;\n    padding: 10px;\n    border: 1px solid gray;\n    border-radius: 5px;\n}\n.tl-save-status, .tl-add-entry-btn\n{\n    margin-left: 10px;\n}\n.tl-entry\n{\n    margin-top: 5px;\n}\n.tl-entry > *\n{\n    margin-left: 5px;\n}\n.tl-entry > input[type=number]\n{\n    width: 50px;\n}\n.tl-entry > input[type=time]\n{\n    width: 75px;\n}\n.tl-save-status\n{\n    font-weight: bold;\n}\n.tl-sheet-select\n{\n    margin-left: 5px;\n}\n.tl-date-label\n{\n    font-weight: bold;\n}\n.tl-date-label.tl-date-label-weekend\n{\n    font-weight: initial;\n    font-style: italic;\n    color: gray;\n}\n.tl-entry-reason \n{\n    padding: 3px;\n}\n.tl-remove-entry-btn\n{\n    float: right;\n}\n.tl-week-seperator\n{\n    margin-top: 57px;\n}\n.tl-balance-label\n{\n    margin: 5px;\n    display: inline-block;\n}\n.tl-balance-help\n{\n    display: inline-block;\n    cursor: help;\n}\n\n.tl-ui-inner\n{\n    display: table;\n    margin-left: auto;\n    margin-right: auto;\n}\n.tl-ui-inner, .tl-week-seperator, .tl-date\n{\n    min-width: 650px;\n}\n.tl-entry-comment {\n    margin-top: 5px;\n    margin-bottom: 15px;\n    width: 100%;\n    display: none;\n}\n.tl-has-comment .tl-entry-comment\n{\n    display: block;\n}\n.tl-success\n{\n    color: #02B875;\n}\n.tl-warning\n{\n    color: #F0AF52;\n}\n.tl-danger\n{\n    color: #DA5652;\n}\n.tl-sum-hours\n{\n    position: absolute;\n    margin-top: -23px;\n}\n.tl-week-sum\n{\n    position: absolute;\n    margin-top: -57px;\n    text-decoration: underline;\n}\n.tl-ui button.tl-star-button, .tl-ui.tl-dark button.tl-star-button\n{\n    background: none;\n    border: none;\n    margin: 0;\n    padding: 0;\n}\n.tl-ui button.tl-star-button.tl-favorite, .tl-ui.tl-dark button.tl-star-button.tl-favorite\n{\n    color: #f1a00b;\n    opacity: 1;\n}\n.tl-paste-btn {\n    margin-left: 5px;\n    display: none;\n}\n.tl-has-favorite .tl-paste-btn:not(.tl-hide-favorite-button)\n{\n    display: inline-block;\n}\n.tl-show-on-hover\n{\n    opacity: 0;\n}\n.tl-date:hover .tl-show-on-hover\n{\n    opacity: 1;\n}\n.tl-no-reason-warning {\n    margin-left: 180px;\n    position: absolute;\n    margin-top: -22px;\n    font-weight: bold;\n    background-color: white;\n    user-select: none;\n    pointer-events: none;\n}\n.tl-no-reason-warning.tl-has-reason\n{\n    display: none;\n}\n.tl-clickable\n{\n    cursor: pointer;\n}\n.tl-dark-mode-btn {\n    position: fixed;\n    bottom: 5px;\n    right: 20px;\n}\n.tl-ui button\n{\n    background-color: #d9d9d9;\n    border: 1px solid gray;\n    border-radius: 5px;\n}\n.tl-ui button:hover\n{\n    background-color: #efebeb;\n}\n\n.tl-ui.tl-dark\n{\n    background-color: #1E1E1E;\n    color: white;\n}\n.tl-ui.tl-dark select, .tl-ui.tl-dark input {\n    color: white;\n    background-color: #252526;\n    border: 1px gray solid;\n    color-scheme: dark;\n}\n.tl-ui.tl-dark button\n{\n    background-color: #333333;\n    border: 1px solid #282828;\n    color: white;\n}\n.tl-ui.tl-dark button:hover\n{\n    background-color: #525252;\n}\n.tl-ui.tl-dark .tl-no-reason-warning\n{\n    background-color: #252526;\n}\n.tl-weekend-description {\n    color: gray;\n    font-style: italic;\n    float: right;\n    margin-top: 2px;\n    display: inline-block;\n    max-width: 400px;\n    overflow: hidden;\n    max-height: 35px;\n}\n.tl-weekend-description.tl-weekend-description-hidden\n{\n    display: none;\n}\n.tl-version-number {\n    position: fixed;\n    bottom: 5px;\n    left: 5px;\n}\n\n.tl-settings {\n    position: fixed;\n    inset: 0;\n    z-index: 100;\n}\n.tl-settings-back {\n    inset: 0;\n    position: absolute;\n    background-color: black;\n    opacity: 0.5;\n    cursor: pointer;\n}\n\n.tl-settings.tl-settings-hidden {\n    display: none;\n}\n\n.tl-settings-version {\n    margin: 5px 10px;\n    border-bottom: 1px solid gray;\n}\n\n.tl-settings-version:last-child {\n    border-bottom: 0;\n}\n\n.tl-settings-title {\n    font-weight: bold;\n    font-size: 1.25em;\n}\n.tl-settings-inner {\n    position: absolute;\n    background-color: white;\n    height: 70vh;\n    width: 90vw;\n    left: 5vw;\n    top: 15vh;\n    border: 1px solid gray;\n    border-radius: 10px;\n    padding: 10px;\n    overflow: auto;\n}\n.tl-settings-version button\n{\n    margin-left: 5px;\n    margin-bottom: 15px;\n}\n\n.tl-dark .tl-settings-inner\n{\n    background-color: #1a1a1a;\n}\n\n.tl-balance-warning\n{\n    font-size: 0.8em;\n    display: inline-block;\n    text-decoration: underline;\n    cursor: help;\n}\n.tl-hidden\n{\n    display: none;\n}\n\n",document.body.appendChild(e),this.timelogUIOuter=document.createElement("div"),this.timelogUIOuter.className="tl-ui",this.timelogUIOuter.style.display="none",document.body.append(this.timelogUIOuter),this.timelogUIInner=document.createElement("div"),this.timelogUIInner.className="tl-ui-inner",this.timelogUIOuter.append(this.timelogUIInner);const t=document.createElement("button");t.className="tl-close-btn",t.appendChild(s.get("close")),t.onclick=()=>this.toggleVisible(),this.timelogUIInner.appendChild(t),this.darkModeButton=document.createElement("button"),this.darkModeButton.className="tl-dark-mode-btn",this.darkModeButton.onclick=()=>this.toggleDarkMode(),this.timelogUIInner.appendChild(this.darkModeButton),this.onDarkModeChange.on((e=>{var t,n;e?null===(t=this.timelogUIOuter)||void 0===t||t.classList.add("tl-dark"):null===(n=this.timelogUIOuter)||void 0===n||n.classList.remove("tl-dark"),this.darkModeButton&&(this.darkModeButton.innerHTML="",this.darkModeButton.append(e?s.get("light_mode"):s.get("dark_mode")))}),this);const n=this.createSettingsWindow();this.timelogUIInner.appendChild(n);const a=document.createElement("div");a.append(s.get("settings",!0)),a.append(" 1.1.10"),a.className="tl-version-number",a.onclick=()=>n.classList.remove("tl-settings-hidden"),a.style.cursor="pointer",a.style.textDecoration="underline",this.timelogUIInner.appendChild(a);const o=document.createElement("span");o.innerText="Sheet:",this.timelogUIInner.appendChild(o),this.sheetDropdown=document.createElement("select"),this.sheetDropdown.className="tl-sheet-select",this.sheetDropdown.onchange=()=>this.onSelectedSheetChange(),this.timelogUIInner.appendChild(this.sheetDropdown),this.saveStatus=document.createElement("span"),this.saveStatus.className="tl-save-status",this.saveStatus.onclick=()=>this.onSaveStatusClick(),this.timelogUIInner.append(this.saveStatus);const i=document.createElement("div");i.className="tl-balance",this.timelogUIInner.append(i),this.balanceLabel=document.createElement("div"),this.balanceLabel.innerText="Balance: ",this.balanceLabel.className="tl-balance-label",i.append(this.balanceLabel),this.balanceWarning=document.createElement("div"),this.balanceWarning.className="tl-balance-warning tl-warning tl-hidden",i.append(this.balanceWarning),this.sheetContainer=document.createElement("div"),this.sheetContainer.className="tl-sheet",this.timelogUIInner.appendChild(this.sheetContainer)}createSettingsWindow(){const e=document.createElement("div");e.className="tl-settings tl-settings-hidden";const t=document.createElement("div");t.className="tl-settings-back",e.append(t),t.onclick=()=>e.classList.add("tl-settings-hidden");const n=document.createElement("div");n.className="tl-settings-inner",e.append(n);const a=document.createElement("div");a.className="tl-settings-version",n.append(a);for(const e of h.buttons){const t=document.createElement("button");t.className=e.className,t.append(s.get(e.icon)),t.append(e.text),e.title&&(t.style.cursor="help"),t.title=e.title,t.onclick=()=>e.onClick(this),a.appendChild(t)}const o=[{version:"1.1.10 - 20/01/2023",text:["Show expected hours to work on a given day."]},{version:"1.1.9 - 04/11/2022",text:["Fix problem where changing user on HiBob would cause problems due to caching"]},{version:"1.1.8 - 04/11/2022",text:["Fixed issue where you couldn't make an entry have a length of 0 hours","On the warning of flex becoming too old, show how many hours are left to be flexed on that day"]},{version:"1.1.7 - 02/11/2022",text:['Removed the option to "fix" old flex, as this solution would break when switching devices.',"Please talk to HR if you need to clear time logged before october.","To fix old flex hours without taking time off, please talk to HR or Finance about a solution."]},{version:"1.1.6 - 26/10/2022",text:["Holidays are now shown in the alternative timelog UI","Holidays are considered in the flex time calculation."]},{version:"1.1.4 - 03/10/2022",text:["Added a warning when unbalanced flex days are close to expiring.","Added button to cancel old unbalanced flex for extraordinary situations","Added buttons to delete cached data in the settings menu."]},{version:"1.1.3 - 03/10/2022",text:["Fixed how flex hours is calculated.","A warning is shown if you have unbalanced flex days that are older than 28 days."]},{version:"1.1.2 - 03/10/2022",text:["Fixed problem where you couldn't log time on some days, where you were supposed to."]},{version:"1.1.1 - 30/09/2022",text:["Added changelog","Show descriptions on non-working days"]}];for(const e of o){const t=document.createElement("div");t.className="tl-settings-version",n.append(t);const a=document.createElement("div");a.className="tl-settings-title",a.innerText=e.version,t.append(a);const s=document.createElement("ul");s.className="tl-settings-list",t.append(s);for(const t of e.text){const e=document.createElement("li");e.innerText=t,s.append(e)}}return e}async createModel(){this.model&&(this.model.onDateUpdated.off(this.onDateUpdated,this),this.model.onReasonsUpdated.off(this.onReasonsUpdated,this),this.model.onSaveStatusUpdated.off(this.onSaveStatusUpdated,this),this.model.onSheetUpdated.off(this.onSheetUpdated,this),this.model.onSheetsUpdated.off(this.onSheetsUpdated,this)),this.model=new c,this.model.onDateUpdated.on(this.onDateUpdated,this),this.model.onReasonsUpdated.on(this.onReasonsUpdated,this),this.model.onSaveStatusUpdated.on(this.onSaveStatusUpdated,this),this.model.onSheetUpdated.on(this.onSheetUpdated,this),this.model.onSheetsUpdated.on(this.onSheetsUpdated,this),await this.model.initialize()}getDateContainer(e){if(this.selectedSheet===e.sheet&&this.sheetContainer){let t=this.sheetDates.find((t=>t.date===e.date));if(!t){if(t={date:e.date,parent:document.createElement("div"),title:document.createElement("span"),entries:[],starButton:document.createElement("button"),pasteButton:document.createElement("button"),weekendDescription:document.createElement("div")},this.sheetDates.push(t),t.parent.className="tl-date",this.sheetContainer.appendChild(t.parent),1===new Date(e.date.date).getDay()){const e=document.createElement("div");e.className="tl-week-seperator",this.sheetContainer.appendChild(e)}if(t.parent.append(t.starButton),t.starButton.onclick=()=>{var t;return null===(t=this.model)||void 0===t?void 0:t.setFavoritedDate(e.date)},t.starButton.className="tl-star-button tl-show-on-hover",t.starButton.title="Favorite Day",t.title.className="tl-date-label",t.title.innerText=new Date(e.date.date).toDateString(),e.date.nonWorkingDay&&t.title.classList.add("tl-date-label-weekend"),t.parent.append(t.title),t.weekendDescription.className="tl-weekend-description",t.parent.append(t.weekendDescription),!e.sheet.locked){const n=document.createElement("button");n.appendChild(s.get("add")),n.className="tl-add-entry-btn tl-show-on-hover",n.onclick=()=>{var t;return null===(t=this.model)||void 0===t?void 0:t.newEntry(e.date)},t.parent.append(n),t.pasteButton=document.createElement("button"),t.pasteButton.appendChild(s.get("switch_access_shortcut_add")),t.pasteButton.title="Paste from Favorite Day",t.pasteButton.className="tl-paste-btn tl-show-on-hover",t.pasteButton.onclick=()=>{var t;return null===(t=this.model)||void 0===t?void 0:t.pasteFromStarred(e.date)},t.parent.append(t.pasteButton)}this.addToWeekSum(t)}return t}return null}getEntryContainer(t,o,i){let r=o.entries.find((e=>e.entry===i));if(!r){r={entry:i,parent:document.createElement("div"),startHour:document.createElement("input"),endHour:document.createElement("input"),length:document.createElement("input"),reason:document.createElement("select"),comment:document.createElement("input"),commentButton:document.createElement("button"),noReasonWarning:document.createElement("div")},o.entries.push(r),r.parent.className="tl-entry",o.parent.appendChild(r.parent),r.startHour.type="time",r.startHour.className="tl-entry-start",t.sheet.locked&&(r.startHour.disabled=!0),r.startHour.onchange=()=>{var a,s,o;const l=i.startHour+i.lengthHours;null===(a=this.model)||void 0===a||a.changeStartHour(t.date,t.date.entries.indexOf(i),e.parseTimeTohours(null!==(s=null==r?void 0:r.startHour.value)&&void 0!==s?s:"08:00"));const d=n.round(l-i.startHour,2);null===(o=this.model)||void 0===o||o.changeLengthHours(t.date,t.date.entries.indexOf(i),d)},r.parent.appendChild(r.startHour);const l=document.createElement("span");l.className="tl-end-label",l.innerText="-",r.parent.appendChild(l),r.endHour.type="time",r.endHour.className="tl-entry-end",t.sheet.locked&&(r.endHour.disabled=!0),r.endHour.onchange=()=>{var a;if(null==r?void 0:r.endHour){const s=n.round(e.parseTimeTohours(r.endHour.value)-i.startHour,2);null===(a=this.model)||void 0===a||a.changeLengthHours(t.date,t.date.entries.indexOf(i),s)}},r.parent.appendChild(r.endHour),r.reason.onchange=()=>{var e,n;return null===(e=this.model)||void 0===e?void 0:e.changeReason(t.date,t.date.entries.indexOf(i),null!==(n=null==r?void 0:r.reason.value)&&void 0!==n?n:"")},t.sheet.locked&&(r.reason.disabled=!0),r.reason.className="tl-entry-reason",r.parent.appendChild(r.reason),this.updateReasonsDropdown(r.reason),1===o.entries.length&&(o.sumHours=document.createElement("span"),o.sumHours.className="tl-sum-hours",r.parent.append(o.sumHours)),r.length.type="number",r.length.className="tl-entry-length",r.length.step="0.01",t.sheet.locked&&(r.length.disabled=!0),r.length.onchange=()=>{var e;null===(e=this.model)||void 0===e||e.changeLengthHours(t.date,t.date.entries.indexOf(i),a.unscale(parseFloat((null==r?void 0:r.length.value)||"0")))},r.parent.appendChild(r.length);const d=document.createElement("span");if(d.className="tl-duration-label",d.innerText=a.getUnitName(),r.parent.appendChild(d),!t.sheet.locked){r.commentButton.className="tl-add-comment-btn tl-show-on-hover",r.commentButton.onclick=()=>{var e;return null===(e=this.model)||void 0===e?void 0:e.toggleComment(t.date,t.date.entries.indexOf(i))},r.parent.appendChild(r.commentButton);const e=document.createElement("button");e.appendChild(s.get("delete")),e.className="tl-remove-entry-btn tl-show-on-hover",e.onclick=()=>{var e;return null===(e=this.model)||void 0===e?void 0:e.deleteEntry(t.date,t.date.entries.indexOf(i))},r.parent.appendChild(e)}r.noReasonWarning.append(s.get("warning",!0)),r.noReasonWarning.append(" No reason selected!"),r.noReasonWarning.className="tl-no-reason-warning tl-warning tl-has-reason",r.parent.appendChild(r.noReasonWarning),r.comment.type="text",r.comment.placeholder="Write a note...",r.comment.title="Write a note...",r.comment.className="tl-entry-comment",t.sheet.locked&&(r.comment.disabled=!0),r.comment.onchange=()=>{var e,n;null===(e=this.model)||void 0===e||e.changeComment(t.date,t.date.entries.indexOf(i),null!==(n=null==r?void 0:r.comment.value)&&void 0!==n?n:"")},r.parent.appendChild(r.comment)}return r}addToWeekSum(e){if(this.weekSums.length<1||0===new Date(e.date.date).getDay()){const t={dates:[e],element:document.createElement("div")};t.element.className="tl-week-sum",this.weekSums.push(t),e.parent.appendChild(t.element),e.parent.style.marginTop="38px"}else this.weekSums[this.weekSums.length-1].dates.push(e)}onDateUpdated(t){var o,i,r;if(this.selectedSheet===t.sheet&&this.sheetContainer){let l=this.getDateContainer(t);if(l){for(const i of t.date.entries){let r=this.getEntryContainer(t,l,i);r.startHour.value=e.formatHour(i.startHour),r.length.value=n.round(a.scale(i.lengthHours),2).toString(),r.endHour.value=e.formatHour(i.startHour+i.lengthHours),r.reason.value=i.reasonId,r.comment.value=null!==(o=i.comment)&&void 0!==o?o:"",i.reasonId?r.noReasonWarning.classList.add("tl-has-reason"):r.noReasonWarning.classList.remove("tl-has-reason"),r.commentButton.title=i.hasComment?"Remove note":"Add note",r.commentButton.innerHTML="",r.commentButton.appendChild(s.get(i.hasComment?"speaker_notes_off":"speaker_notes")),i.hasComment?r.parent.classList.add("tl-has-comment"):r.parent.classList.remove("tl-has-comment")}const d=l.entries.filter((e=>!t.date.entries.find((t=>t===e.entry))));if(l.entries=l.entries.filter((e=>!d.includes(e))),d.forEach((e=>e.parent.remove())),l.sumHours){const e=n.sum(t.date.entries.map((e=>e.lengthHours)));l.sumHours.innerText=`${n.round(a.scale(e),2)} / ${a.format(n.round(e,2))}`}l.starButton.innerHTML="",l.starButton.disabled=t.date.favorited,l.starButton.classList.remove("tl-favorite"),l.starButton.appendChild(s.get("star",t.date.favorited)),t.date.favorited&&l.starButton.classList.add("tl-favorite"),l.entries.length>0||l.date.favorited?l.pasteButton.classList.add("tl-hide-favorite-button"):l.pasteButton.classList.remove("tl-hide-favorite-button"),l.title.title=null!==(i=t.date.dateDescription)&&void 0!==i?i:"",t.date.nonWorkingDay&&t.date.entries.length<1?(l.weekendDescription.classList.remove("tl-weekend-description-hidden"),l.weekendDescription.innerText=null!==(r=t.date.dateDescription)&&void 0!==r?r:""):l.weekendDescription.classList.add("tl-weekend-description-hidden")}const d=this.weekSums.find((e=>e.dates.some((e=>e.date===t.date))));if(d){const t=n.sum(d.dates.map((e=>n.sum(e.entries.map((e=>e.entry.lengthHours)))))),s=n.sum(d.dates.map((e=>e.date.hoursToWork))),o=e.getWeekNumberFromDate(d.dates[0].date.date);d.element.innerHTML=`<b>Week ${o}</b>: ${n.round(a.scale(t),2)} / ${a.format(n.round(s,2))}`}}this.updateBalance()}updateReasonsDropdown(e){e.innerHTML="";for(const t of this.reasons){const n=document.createElement("option");n.value=t.serverId,n.innerText=t.value,e.appendChild(n)}}onReasonsUpdated(e){this.reasons=e;for(const e of this.sheetDates)for(const t of e.entries)this.updateReasonsDropdown(t.reason)}onSaveStatusUpdated(e){this.saveStatus&&(this.saveStatus.innerHTML="",this.saveStatus.classList.remove("tl-success"),this.saveStatus.classList.remove("tl-warning"),this.saveStatus.classList.remove("tl-clickable"),e===l.Saved&&(this.saveStatus.appendChild(s.get("cloud_done",!0)),this.saveStatus.append(" Saved"),this.saveStatus.classList.add("tl-success")),e===l.Waiting&&(this.saveStatus.appendChild(s.get("pending")),this.saveStatus.append(" Pending...")),e===l.Saving&&(this.saveStatus.appendChild(s.get("cloud_upload")),this.saveStatus.append(" Saving...")),e===l.Error&&(this.saveStatus.appendChild(s.get("cloud_off")),this.saveStatus.append(" Failed!"),this.saveStatus.classList.add("tl-warning"),this.saveStatus.classList.add("tl-clickable")))}onSaveStatusClick(){var e,t;(null===(e=this.saveStatus)||void 0===e?void 0:e.classList.contains("tl-clickable"))&&(null===(t=this.model)||void 0===t||t.save())}onSheetUpdated(e){if(this.sheetDropdown&&!this.sheetDropdownOptions.find((t=>t.sheet===e))){const t=document.createElement("option");t.value=e.id.toString(),t.innerText=`${new Date(e.start).toDateString()} - ${new Date(e.end).toDateString()}${e.locked?" (locked)":""}`,this.sheetDropdownOptions.push({sheet:e,element:t}),this.sheetDropdown.appendChild(t)}this.selectedSheet===e&&(this.sheetContainer&&(this.sheetContainer.innerHTML=""),this.sheetDates=[],this.weekSums=[]);for(const t of e.dates)this.onDateUpdated({sheet:e,date:t});this.updateBalance()}onSheetsUpdated(e){this.sheetDropdown&&(this.sheetDropdown.innerHTML=""),this.sheetDropdownOptions=[];for(const t of e)this.onSheetUpdated(t);this.onSelectedSheetChange()}onSelectedSheetChange(){var e;if(!this.sheetDropdown)return;this.sheetContainer&&(this.sheetContainer.innerHTML=""),this.sheetDates=[];const t=this.sheetDropdown.value;this.selectedSheet=null===(e=this.sheetDropdownOptions.find((e=>e.element.value===t)))||void 0===e?void 0:e.sheet,this.selectedSheet&&this.model&&this.model.fetchSheet(this.selectedSheet.id)}async updateBalance(){var t,o,i;if(!this.model||!this.balanceLabel||!this.selectedSheet)return;const r=await this.model.getFlexStatus(),l=n.round(r.balance,2);if(this.balanceLabel.innerText=`Flex: ${a.format(l)}${0===l?" 🥳":""}`,null===(t=this.balanceWarning)||void 0===t||t.classList.add("tl-hidden"),r.overdueDates.length+r.warningDates.length>0&&this.balanceWarning){const t=this.model.getFlexPolicy();this.balanceWarning.classList.remove("tl-hidden"),this.balanceWarning.innerHTML="",this.balanceWarning.append(s.get("warning",!0)),r.overdueDates.length>0?(this.balanceWarning.append(`You have ${r.overdueDates.length} unbalanced flex date${1===r.overdueDates.length?"":"s"} older than ${t.previousDaysIncluded} days!`),this.balanceWarning.title+=`Overdue dates: ${r.overdueDates.map((t=>e.format(t.date,!1))).join(", ")}`):r.warningDates.length>0&&this.balanceWarning.append(`${r.warningDates.length} unbalanced flex date${1===r.warningDates.length?"":"s"} will soon be older than ${t.previousDaysIncluded} days!`),this.balanceWarning.title="",r.overdueDates.length>0&&(this.balanceWarning.title+=`Overdue dates: ${r.overdueDates.map((t=>`${e.format(t.date,!1)} (${t.reallocatedBalance}h)`)).join(", ")}`),r.warningDates.length>0&&(this.balanceWarning.title+=`${this.balanceWarning.title.length>0?"\n":""}Soon overdue dates: ${r.warningDates.map((t=>`${e.format(t.date,!1)} (${t.reallocatedBalance}h)`)).join(", ")}`),this.balanceWarning.append(" "),this.balanceWarning.append(s.get("info",!1))}await this.model.getFavoritedDate()?null===(o=this.sheetContainer)||void 0===o||o.classList.add("tl-has-favorite"):null===(i=this.sheetContainer)||void 0===i||i.classList.remove("tl-has-favorite")}}u.onShow=new t,function(e){e[e.FixAll=0]="FixAll",e[e.FixLatest=1]="FixLatest"}(d||(d={})),class{static setAprilFoolsOptOut(e){window.localStorage.setItem("tl_april_fools_opt_out",JSON.stringify(e))}static getAprilFoolsOptOut(){var e;return JSON.parse(null!==(e=window.localStorage.getItem("tl_april_fools_opt_out"))&&void 0!==e?e:"false")}static setHasSeenPopup(e){window.localStorage.setItem("tl_april_fools_popup",JSON.stringify(e))}static hasSeenPopup(){var e;return JSON.parse(null!==(e=window.localStorage.getItem("tl_april_fools_popup"))&&void 0!==e?e:"false")}static isAprilFools(){const e=new Date,t=e.getFullYear();let n,a=4,s=1,o=[6,7];for(;s<1&&(s=31,a--),n=new Date(`${t}/${a}/${s}`),o.includes(n.getDay());)s--;let i=n.getTime()+864e5;return e.getTime()<=i&&e.getTime()>=n.getTime()}static init(){this.isAprilFools()?(h.buttons.push({className:"",icon:"bolt",text:"Opt out of Teralightmeters",title:"April fools!",onClick:()=>{this.setAprilFoolsOptOut(!this.getAprilFoolsOptOut()),location.reload()}}),this.getAprilFoolsOptOut()||(a.scaling={unitGeneral:"teralightmeter(s)",unitPlural:"teralightmeters",unitSingular:"teralightmeter",scale:this.hour2TeralightmeterScaling()}),u.onShow.on((e=>this.showAprilFoolsPopup(e)),this)):(this.setAprilFoolsOptOut(!1),this.setHasSeenPopup(!1))}static showAprilFoolsPopup(e){var t;if(this.hasSeenPopup())return;const n=document.createElement("div");n.className="tl-settings",n.style.cursor="pointer";const a=document.createElement("div");a.className="tl-settings-back",n.append(a);const s=()=>{n.remove(),this.setHasSeenPopup(!0)};a.onclick=()=>s(),n.onclick=()=>s();const o=document.createElement("div");o.className="tl-settings-inner",n.append(o);const i=document.createElement("div");i.className="tl-settings-version",o.append(i);const r=(new Date).getMonth()<3;i.innerHTML=`<h1>Introducing: the teralightmeter!</h1>\n        <div>We're excited to introduce a new feature! Exclusively made for your benefit, in no way related to ${r?"an upcoming date.":"today's date."}</div>\n        <div>All time will now be measured in Teralightmeters - the time it takes for light to travel 1 000 000 000 000 meters.</div>\n        <div>If you think about it, that's a much more universal way of measuring time, not arbitrarily bound to the rotation speed of a planet. We hope you enjoy!</div>`,null===(t=e.timelogUIInner)||void 0===t||t.appendChild(n)}static hour2TeralightmeterScaling(){return 1.0792528488}}.init(),s.initialize(),new u,new class{constructor(){this.submitting=!1,this.createUI(),this.clockInButtonFinder()}createUI(){const e=document.createElement("style");e.innerHTML="\n.re-label\n{\n    font-size: 1.5em;\n    margin-bottom: 10px;\n}\n.re-reason-select\n{\n    padding: 5px;\n}\n.re-reason-ui\n{\n    z-index: 2000;\n    position: fixed;\n    inset: 0;\n    background-color: rgba(0,0,0,0.75);\n    padding-top: 45vh;\n    text-align: center;\n    color: white;\n    font-weight: bold;\n}\n.re-btn\n{\n    padding: 0 var(--button-padding-x, 15px);\n    min-width: 80px;\n    height: var(--button-size, 30px);\n    font-weight: 600;\n    font-size: var(--button-font-size, 12px);\n    font-family: var(--body-font-family);\n    border: 0;\n    border-radius: 4px;\n    margin: 5px;\n}\n.re-btn.re-primary\n{\n    color: var(--primary-bg-text-color, white);\n    background-color: var(--primary-600);\n}\n.re-btn.re-secondary\n{\n    color: var(--secondary-bg-text-color, #535353);\n    background-color: var(--secondary-600);\n}\n.re-blur\n{\n    filter: blur(2px);\n}\n.re-submitting .re-btn\n{\n    display: none;\n}\n.re-submitting-text\n{\n    display: none;\n    font-size: 1.5em;\n}\n.re-submitting .re-submitting-text\n{\n    display: block;\n}\n",document.body.append(e),this.reasonEnhancementUI=document.createElement("div"),this.reasonEnhancementUI.className="re-reason-ui",this.reasonEnhancementUI.style.display="none",document.body.appendChild(this.reasonEnhancementUI);const t=document.createElement("div");t.innerText="Choose Default Reason",t.className="re-label",this.reasonEnhancementUI.appendChild(t),this.reasonSelect=document.createElement("select"),this.reasonSelect.className="re-reason-select",this.reasonSelect.onchange=()=>this.saveDefaultReasonValue(),this.reasonEnhancementUI.appendChild(this.reasonSelect),this.reasonEnhancementUI.appendChild(document.createElement("br"));const n=document.createElement("button");n.className="re-cancel-btn re-btn re-secondary",n.innerText="Cancel",n.onclick=()=>this.cancel(),this.reasonEnhancementUI.appendChild(n);const a=document.createElement("button");a.className="re-submit-btn re-btn re-primary",a.innerText="Submit",a.onclick=()=>this.submit(),this.reasonEnhancementUI.appendChild(a);const s=document.createElement("div");s.className="re-submitting-text",s.innerText="Submitting...",this.reasonEnhancementUI.appendChild(s)}async clockInButtonFinder(){for(var e;;)this.findUnenhancedButtons("b-button.punch-clock-button, b-button.time-widget-clock-in-btn, b-button.time-widget-clock-out-btn").forEach((e=>this.enhanceClockInButton(e,d.FixLatest))),this.findUnenhancedButtons("b-button.quick-fix-apply-button").forEach((e=>this.enhanceClockInButton(e,d.FixAll))),this.appRoot||(this.appRoot=null!==(e=document.querySelector("app-root"))&&void 0!==e?e:void 0),await o.for(10)}findUnenhancedButtons(e){var t=[],n=document.querySelectorAll(e);for(const e of n)e.classList.contains("re-enhanced")||(e.classList.add("re-enhanced"),t.push(e));return t}enhanceClockInButton(e,t){e.addEventListener("click",(()=>this.showReasonFixer(t)))}saveDefaultReasonValue(){this.reasonSelect&&window.localStorage.setItem("re-last-reason",this.reasonSelect.value)}loadDefaultReasonValue(){var e;this.reasonSelect&&(this.reasonSelect.value=null!==(e=window.localStorage.getItem("re-last-reason"))&&void 0!==e?e:"")}async showReasonFixer(e){if(this.reasonEnhancementUI&&(await o.for(250),this.setUIVisible(!0),this.mode=e,this.reasonSelect)){const e=await r.metadata();this.reasonSelect.innerHTML="";for(const t of e.timeLogEntryReason.values){const e=document.createElement("option");e.value=t.serverId,e.innerText=t.value,this.reasonSelect.appendChild(e)}this.loadDefaultReasonValue()}}cancel(){this.setUIVisible(!1)}setUIVisible(e){this.reasonEnhancementUI&&(this.reasonEnhancementUI.style.display=e?"block":"none"),this.appRoot&&(e?this.appRoot.classList.add("re-blur"):this.appRoot.classList.remove("re-blur"))}async submit(){var e,t;await o.until((()=>!this.submitting)),this.submitting=!0,null===(e=this.reasonEnhancementUI)||void 0===e||e.classList.add("re-submitting"),this.mode===d.FixAll&&await this.fixAll(),this.mode===d.FixLatest&&await this.fixLatest(),this.setUIVisible(!1),null===(t=this.reasonEnhancementUI)||void 0===t||t.classList.remove("re-submitting"),this.submitting=!1}async fixAll(){if(!this.reasonSelect)return;const t=this.reasonSelect.value,n=await r.sheets();for(const a of n.employeeSheets){if(a.locked)continue;const n=await r.attendance(a.id);for(const a of n.attendance)if(a.entries.some((e=>!e.reason))){const n=e.parse(a.date);if("number"!=typeof n)continue;const s=a.entries.map((a=>{var s,o,i,r;return{startHour:((null!==(s=e.parse(a.start))&&void 0!==s?s:Date.now())-n)/36e5,lengthHours:a.end?((null!==(o=e.parse(a.end))&&void 0!==o?o:Date.now())-(null!==(i=e.parse(a.start))&&void 0!==i?i:Date.now()))/36e5:null,reasonId:a.reason||t,comment:null!==(r=a.comment)&&void 0!==r?r:null}}));await r.submit(n,s)}}}async fixLatest(){if(!this.reasonSelect)return;const t=this.reasonSelect.value;let n=null;const a=await r.sheets();for(const t of a.employeeSheets){if(t.locked)continue;const a=await r.attendance(t.id);for(const t of a.attendance){const a=e.parse(t.date);if("number"==typeof a&&(!n||a>n.date)){const s=t.entries.map((t=>{var n,s,o,i;return{startHour:((null!==(n=e.parse(t.start))&&void 0!==n?n:Date.now())-a)/36e5,lengthHours:t.end?((null!==(s=e.parse(t.end))&&void 0!==s?s:Date.now())-(null!==(o=e.parse(t.start))&&void 0!==o?o:Date.now()))/36e5:null,reasonId:t.reason,comment:null!==(i=t.comment)&&void 0!==i?i:null}}));n={date:a,entries:s}}}}if(n){for(const e of n.entries)e.reasonId=e.reasonId||t;await r.submit(n.date,n.entries)}}}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFLbVYsYUFBYWxQLE1BQ2pDLElBQUl1USxFQUErRCxLQUNuRSxNQUFNalEsUUFBZS9CLEVBQU0rQixTQUMzQixJQUFLLE1BQU1MLEtBQVNLLEVBQU9nQixlQUMzQixDQUNJLEdBQUlyQixFQUFNMEIsT0FBUSxTQUNsQixNQUFNTyxRQUFtQjNELEVBQU0yRCxXQUFXakMsRUFBTUosSUFDaEQsSUFBSyxNQUFNdEgsS0FBUTJKLEVBQVdBLFdBQzlCLENBQ0ksTUFBTTdKLEVBQU9ULEVBQU1nRyxNQUFNckYsRUFBS0EsTUFDOUIsR0FBb0IsaUJBQVRGLEtBQ05rWSxHQUFVbFksRUFBT2tZLEVBQU9oWSxNQUM3QixDQUNJLE1BQU1pRyxFQUE4QmpHLEVBQUtpRyxRQUFRSyxLQUFJSCxJLFlBRWpELE1BQU8sQ0FDSE0sWUFBaUMsUUFBcEIsRUFBQXBILEVBQUEsTUFBWThHLEVBQUVJLGNBQU0sUUFBSTVHLEtBQUtxSyxPQUFTbEssR0FBUSxLQUMzRDZHLFlBQWFSLEVBQUVPLE1BQTBCLFFBQWxCLEVBQUFySCxFQUFBLE1BQVk4RyxFQUFFTyxZQUFJLFFBQUkvRyxLQUFLcUssUUFBOEIsUUFBcEIsRUFBQTNLLEVBQUEsTUFBWThHLEVBQUVJLGNBQU0sUUFBSTVHLEtBQUtxSyxRQUFVLEtBQWdCLEtBQ25INUQsU0FBVUQsRUFBRVUsT0FDWkMsUUFBa0IsUUFBVCxFQUFBWCxFQUFFVyxlQUFPLFFBQUksS0FDekIsSUFFTGtSLEVBQVMsQ0FBRWhZLEtBQU1GLEVBQU1tRyxRQUFTQSxFLEdBSTVDLEdBQUkrUixFQUNKLENBQ0ksSUFBSyxNQUFNN0wsS0FBUzZMLEVBQU8vUixRQUV2QmtHLEVBQU0vRixTQUFXK0YsRUFBTS9GLFVBQVlTLFFBRWpDYixFQUFNeUcsT0FBT3VMLEVBQU9oWSxLQUFNZ1ksRUFBTy9SLFEsQ0FFL0MsRSIsInNvdXJjZXMiOlsid2VicGFjazovL2hpYm9iYXBpLy4vc3JjL1V0aWxzL0RhdGVzLnRzIiwid2VicGFjazovL2hpYm9iYXBpLy4vc3JjL1V0aWxzL0V2ZW50SGFuZGxlci50cyIsIndlYnBhY2s6Ly9oaWJvYmFwaS8uL3NyYy9VdGlscy9OdW1iZXJzLnRzIiwid2VicGFjazovL2hpYm9iYXBpLy4vc3JjL1V0aWxzL0hvdXJTY2FsaW5nLnRzIiwid2VicGFjazovL2hpYm9iYXBpLy4vc3JjL1V0aWxzL01hdGVyaWFsSWNvbi50cyIsIndlYnBhY2s6Ly9oaWJvYmFwaS8uL3NyYy9VdGlscy9XYWl0LnRzIiwid2VicGFjazovL2hpYm9iYXBpLy4vc3JjL1V0aWxzL0FwaS50cyIsIndlYnBhY2s6Ly9oaWJvYmFwaS8uL3NyYy9IaUJvYi9IaUJvYi50cyIsIndlYnBhY2s6Ly9oaWJvYmFwaS8uL3NyYy9UaW1lbG9nL1RpbWVsb2dUeXBlcy50cyIsIndlYnBhY2s6Ly9oaWJvYmFwaS8uL3NyYy9SZWFzb25FbmhhbmNlbWVudHMvUmVhc29uc0VuaGFuY2VtZW50cy50cyIsIndlYnBhY2s6Ly9oaWJvYmFwaS8uL3NyYy9UaW1lbG9nL1RpbWVsb2dNb2RlbC50cyIsIndlYnBhY2s6Ly9oaWJvYmFwaS8uL3NyYy9UaW1lbG9nL1RpbWVsb2dVSVNldHRpbmdzQnV0dG9ucy50cyIsIndlYnBhY2s6Ly9oaWJvYmFwaS8uL3NyYy9UaW1lbG9nL1RpbWVsb2dVSS50cyIsIndlYnBhY2s6Ly9oaWJvYmFwaS8uL3NyYy9UaW1lbG9nL1RpbWVsb2dDc3MudHMiLCJ3ZWJwYWNrOi8vaGlib2JhcGkvLi9zcmMvRnVuL0FwcmlsRm9vbHMudHMiLCJ3ZWJwYWNrOi8vaGlib2JhcGkvLi9zcmMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vaGlib2JhcGkvLi9zcmMvUmVhc29uRW5oYW5jZW1lbnRzL1JlYXNvbkVuaGFuY2VtZW50c0Nzcy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY2xhc3MgRGF0ZXNcclxue1xyXG4gICAgcHVibGljIHN0YXRpYyBwYXJzZShzdHI6IHN0cmluZylcclxuICAgIHtcclxuICAgICAgICBpZiAoIXN0cikgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgY29uc3Qgc3BsaXQgPSBzdHIuc3BsaXQoXCJUXCIpO1xyXG4gICAgICAgIGlmIChzcGxpdC5sZW5ndGggPCAyKSBzcGxpdC5wdXNoKFwiMDA6MDBcIik7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBEYXRlKHNwbGl0LmpvaW4oXCJUXCIpKS5nZXRUaW1lKCk7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgc3RhdGljIGZvcm1hdCh0aW1lOiBudW1iZXIsIGluY2x1ZGVUaW1lc3RhbXA6IGJvb2xlYW4pXHJcbiAgICB7XHJcbiAgICAgICAgaWYgKCF0aW1lKSByZXR1cm4gXCJcIjtcclxuICAgICAgICBjb25zdCBkYXRlID0gbmV3IERhdGUodGltZSk7XHJcbiAgICAgICAgcmV0dXJuIGAke2RhdGUuZ2V0RnVsbFllYXIoKX0tJHsoZGF0ZS5nZXRNb250aCgpICsgMSkudG9TdHJpbmcoKS5wYWRTdGFydCgyLCBcIjBcIil9LSR7ZGF0ZS5nZXREYXRlKCkudG9TdHJpbmcoKS5wYWRTdGFydCgyLCBcIjBcIil9JHtpbmNsdWRlVGltZXN0YW1wID8gYFQke2RhdGUuZ2V0SG91cnMoKS50b1N0cmluZygpLnBhZFN0YXJ0KDIsIFwiMFwiKX06JHtkYXRlLmdldE1pbnV0ZXMoKS50b1N0cmluZygpLnBhZFN0YXJ0KDIsIFwiMFwiKX1gIDogXCJcIn1gO1xyXG4gICAgfVxyXG4gICAgcHVibGljIHN0YXRpYyBmb3JtYXRIb3VyKGhvdXJzOiBudW1iZXIpXHJcbiAgICB7XHJcbiAgICAgICAgY29uc3QgaG91ciA9IE1hdGguZmxvb3IoaG91cnMgJSAyNCk7XHJcbiAgICAgICAgY29uc3QgbWludXRlID0gTWF0aC5yb3VuZCgoaG91cnMgLSBob3VyKSAqIDYwKTtcclxuICAgICAgICByZXR1cm4gYCR7aG91ci50b1N0cmluZygpLnBhZFN0YXJ0KDIsIFwiMFwiKX06JHttaW51dGUudG9TdHJpbmcoKS5wYWRTdGFydCgyLCBcIjBcIil9YFxyXG4gICAgfVxyXG4gICAgcHVibGljIHN0YXRpYyBnZXRXZWVrTnVtYmVyRnJvbURhdGUodGltZTogbnVtYmVyKVxyXG4gICAge1xyXG4gICAgICAgIHZhciBkYXRlID0gbmV3IERhdGUodGltZSk7XHJcbiAgICAgICAgZGF0ZS5zZXRIb3VycygwLCAwLCAwLCAwKTtcclxuICAgICAgICAvLyBUaHVyc2RheSBpbiBjdXJyZW50IHdlZWsgZGVjaWRlcyB0aGUgeWVhci5cclxuICAgICAgICBkYXRlLnNldERhdGUoZGF0ZS5nZXREYXRlKCkgKyAzIC0gKGRhdGUuZ2V0RGF5KCkgKyA2KSAlIDcpO1xyXG4gICAgICAgIC8vIEphbnVhcnkgNCBpcyBhbHdheXMgaW4gd2VlayAxLlxyXG4gICAgICAgIHZhciB3ZWVrMSA9IG5ldyBEYXRlKGRhdGUuZ2V0RnVsbFllYXIoKSwgMCwgNCk7XHJcbiAgICAgICAgLy8gQWRqdXN0IHRvIFRodXJzZGF5IGluIHdlZWsgMSBhbmQgY291bnQgbnVtYmVyIG9mIHdlZWtzIGZyb20gZGF0ZSB0byB3ZWVrMS5cclxuICAgICAgICByZXR1cm4gMSArIE1hdGgucm91bmQoKChkYXRlLmdldFRpbWUoKSAtIHdlZWsxLmdldFRpbWUoKSkgLyA4NjQwMDAwMFxyXG4gICAgICAgICAgICAtIDMgKyAod2VlazEuZ2V0RGF5KCkgKyA2KSAlIDcpIC8gNyk7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgc3RhdGljIHBhcnNlVGltZVRvaG91cnModGltZTogc3RyaW5nKVxyXG4gICAge1xyXG4gICAgICAgIGNvbnN0IHNwbGl0ID0gdGltZS5zcGxpdChcIjpcIik7XHJcbiAgICAgICAgcmV0dXJuIHBhcnNlSW50KHNwbGl0WzBdKSArIHBhcnNlSW50KHNwbGl0WzFdKSAvIDYwO1xyXG4gICAgfVxyXG59IiwiZXhwb3J0IGNsYXNzIEV2ZW50SGFuZGxlcjxUPlxyXG57XHJcbiAgICBwcml2YXRlIGhhbmRsZXJzOiB7IGhhbmRsZXI6ICh2YWw6IFQpID0+IHZvaWQsIGNvbnRleHQ6IGFueSB9W10gPSBbXTtcclxuICAgIHB1YmxpYyBvbihoYW5kbGVyOiAodmFsOiBUKSA9PiB2b2lkLCBjb250ZXh0OiBhbnkpXHJcbiAgICB7XHJcbiAgICAgICAgdGhpcy5oYW5kbGVycy5wdXNoKHsgaGFuZGxlciwgY29udGV4dCB9KTtcclxuICAgIH1cclxuICAgIHB1YmxpYyBvZmYoaGFuZGxlcjogKHZhbDogVCkgPT4gdm9pZCwgY29udGV4dDogYW55KVxyXG4gICAge1xyXG4gICAgICAgIHRoaXMuaGFuZGxlcnMgPSB0aGlzLmhhbmRsZXJzLmZpbHRlcihoID0+IGguaGFuZGxlciAhPT0gaGFuZGxlciB8fCBoLmNvbnRleHQgIT09IGNvbnRleHQpO1xyXG4gICAgfVxyXG4gICAgcHVibGljIGZpcmUodmFsOiBUKVxyXG4gICAge1xyXG4gICAgICAgIHRoaXMuaGFuZGxlcnMuZm9yRWFjaChoID0+IGguaGFuZGxlci5jYWxsKGguY29udGV4dCwgdmFsKSk7XHJcbiAgICB9XHJcbn0iLCJleHBvcnQgY2xhc3MgTnVtYmVyc1xyXG57XHJcbiAgICBwdWJsaWMgc3RhdGljIHJvdW5kKG51bTogbnVtYmVyLCBkZWNpbWFsczogbnVtYmVyKVxyXG4gICAge1xyXG4gICAgICAgIHJldHVybiBNYXRoLnJvdW5kKG51bSAqICgxMCAqKiBkZWNpbWFscykpIC8gKDEwICoqIGRlY2ltYWxzKTtcclxuICAgIH1cclxuICAgIHB1YmxpYyBzdGF0aWMgZmxvb3IobnVtOiBudW1iZXIsIGRlY2ltYWxzOiBudW1iZXIpXHJcbiAgICB7XHJcbiAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IobnVtICogKDEwICoqIGRlY2ltYWxzKSkgLyAoMTAgKiogZGVjaW1hbHMpO1xyXG4gICAgfVxyXG4gICAgcHVibGljIHN0YXRpYyBjZWlsKG51bTogbnVtYmVyLCBkZWNpbWFsczogbnVtYmVyKVxyXG4gICAge1xyXG4gICAgICAgIHJldHVybiBNYXRoLmNlaWwobnVtICogKDEwICoqIGRlY2ltYWxzKSkgLyAoMTAgKiogZGVjaW1hbHMpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzdGF0aWMgc3VtKGFycjogbnVtYmVyW10pXHJcbiAgICB7XHJcbiAgICAgICAgbGV0IHZhbCA9IDA7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHZhbCArPSBhcnJbaV07XHJcbiAgICAgICAgcmV0dXJuIHZhbDtcclxuICAgIH1cclxufSIsImltcG9ydCB7IE51bWJlcnMgfSBmcm9tIFwiLi9OdW1iZXJzXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgSG91clNjYWxpbmdcclxue1xyXG4gICAgcHVibGljIHN0YXRpYyBzY2FsaW5nID0ge1xyXG4gICAgICAgIHVuaXRHZW5lcmFsOiBcImhvdXIocylcIixcclxuICAgICAgICB1bml0UGx1cmFsOiBcImhvdXJzXCIsXHJcbiAgICAgICAgdW5pdFNpbmd1bGFyOiBcImhvdXJcIixcclxuICAgICAgICBzY2FsZTogMVxyXG4gICAgfVxyXG4gICAgcHVibGljIHN0YXRpYyBzY2FsZShob3VyczogbnVtYmVyKVxyXG4gICAge1xyXG4gICAgICAgIHJldHVybiBob3VycyAqIHRoaXMuc2NhbGluZy5zY2FsZTtcclxuICAgIH1cclxuICAgIHB1YmxpYyBzdGF0aWMgdW5zY2FsZShzY2FsZWQ6IG51bWJlcilcclxuICAgIHtcclxuICAgICAgICByZXR1cm4gc2NhbGVkIC8gdGhpcy5zY2FsaW5nLnNjYWxlO1xyXG4gICAgfVxyXG4gICAgcHVibGljIHN0YXRpYyBnZXRVbml0TmFtZShob3VyczogbnVtYmVyIHwgbnVsbCA9IG51bGwpXHJcbiAgICB7XHJcbiAgICAgICAgaWYgKGhvdXJzID09PSBudWxsKSByZXR1cm4gdGhpcy5zY2FsaW5nLnVuaXRHZW5lcmFsO1xyXG4gICAgICAgIGlmIChob3VycyA9PT0gMSkgcmV0dXJuIHRoaXMuc2NhbGluZy51bml0U2luZ3VsYXI7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc2NhbGluZy51bml0UGx1cmFsO1xyXG4gICAgfVxyXG4gICAgcHVibGljIHN0YXRpYyBmb3JtYXQoaG91cnM6IG51bWJlcilcclxuICAgIHtcclxuICAgICAgICByZXR1cm4gYCR7TnVtYmVycy5yb3VuZCh0aGlzLnNjYWxlKGhvdXJzKSwgMil9ICR7dGhpcy5nZXRVbml0TmFtZShob3Vycyl9YDtcclxuICAgIH1cclxufSIsImV4cG9ydCBhYnN0cmFjdCBjbGFzcyBNYXRlcmlhbEljb25cclxue1xyXG4gICAgcHVibGljIHN0YXRpYyBpbml0aWFsaXplKClcclxuICAgIHtcclxuICAgICAgICBjb25zdCBsaW5rID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxpbmtcIik7XHJcbiAgICAgICAgbGluay5ocmVmID0gXCJodHRwczovL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2NzczI/ZmFtaWx5PU1hdGVyaWFsK1N5bWJvbHMrT3V0bGluZWQ6b3Bzeix3Z2h0LEZJTEwsR1JBREAyMC4uNDgsMTAwLi43MDAsMC4uMSwtNTAuLjIwMFwiO1xyXG4gICAgICAgIGxpbmsucmVsID0gXCJzdHlsZXNoZWV0XCI7XHJcbiAgICAgICAgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChsaW5rKTtcclxuICAgIH1cclxuICAgIHB1YmxpYyBzdGF0aWMgZ2V0KGljb246IHN0cmluZywgZmlsbDogYm9vbGVhbiA9IGZhbHNlKVxyXG4gICAge1xyXG4gICAgICAgIGNvbnN0IHNwYW4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKTtcclxuICAgICAgICBzcGFuLmNsYXNzTmFtZSA9IGBtYXRlcmlhbC1zeW1ib2xzLW91dGxpbmVkYDtcclxuICAgICAgICBzcGFuLmlubmVyVGV4dCA9IGljb247XHJcbiAgICAgICAgc3Bhbi5zdHlsZS52ZXJ0aWNhbEFsaWduID0gXCJtaWRkbGVcIjtcclxuICAgICAgICBzcGFuLnN0eWxlLmZvbnRTaXplID0gXCIxLjVlbVwiO1xyXG4gICAgICAgIHNwYW4uc3R5bGUuZm9udFZhcmlhdGlvblNldHRpbmdzID0gYCdGSUxMJyAke2ZpbGwgPyAxIDogMH1gO1xyXG4gICAgICAgIHJldHVybiBzcGFuO1xyXG4gICAgfVxyXG59IiwiZXhwb3J0IGNsYXNzIFdhaXRcclxue1xyXG4gICAgcHVibGljIHN0YXRpYyBmb3IobXM6IG51bWJlcik6IFByb21pc2U8dm9pZD5cclxuICAgIHtcclxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2U8dm9pZD4ocmVzb2x2ZSA9PlxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgd2luZG93LnNldFRpbWVvdXQoKCkgPT4gcmVzb2x2ZSgpLCBtcyk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgc3RhdGljIHVudGlsKGRlbGVnYXRlOiAoKSA9PiBib29sZWFuKVxyXG4gICAge1xyXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZTx2b2lkPihyZXNvbHZlID0+XHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBjb25zdCBoYW5kbGUgPSB3aW5kb3cuc2V0SW50ZXJ2YWwoKCkgPT5cclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgaWYgKGRlbGVnYXRlKCkpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHdpbmRvdy5jbGVhckludGVydmFsKGhhbmRsZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sIDEpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59IiwiZXhwb3J0IGNsYXNzIEFwaVxyXG57XHJcbiAgICBwdWJsaWMgc3RhdGljIHhocihtZXRob2Q6IFwiR0VUXCIgfCBcIlBPU1RcIiwgdXJsOiBzdHJpbmcsIGJvZHk6IG9iamVjdClcclxuICAgIHtcclxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2U8eyBzdGF0dXM6IG51bWJlciwgYm9keTogYW55IH0+KHJlc29sdmUgPT5cclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGxldCB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcclxuICAgICAgICAgICAgeGhyLm9wZW4obWV0aG9kLCB1cmwpO1xyXG4gICAgICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcihcIkFjY2VwdFwiLCBcImFwcGxpY2F0aW9uL2pzb25cIik7XHJcbiAgICAgICAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKFwiQ29udGVudC1UeXBlXCIsIFwiYXBwbGljYXRpb24vanNvblwiKTtcclxuICAgICAgICAgICAgeGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9ICgpID0+XHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGlmICh4aHIucmVhZHlTdGF0ZSA9PT0gNClcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgcmVzdWx0O1xyXG4gICAgICAgICAgICAgICAgICAgIHRyeVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gSlNPTi5wYXJzZSh4aHIucmVzcG9uc2VUZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0OiB4aHIucmVzcG9uc2VUZXh0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh4aHIuc3RhdHVzICE9PSAyMDApXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0Lmhhc093blByb3BlcnR5KFwiZXJyb3JcIikpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGtleSA9IHJlc3VsdC5oYXNPd25Qcm9wZXJ0eShcImtleVwiKSA/IHJlc3VsdC5rZXkgOiB4aHIuc3RhdHVzLnRvU3RyaW5nKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbGVydChgSGlCb2IgVXRpbHM6IEVycm9yICR7a2V5fSAtICR7cmVzdWx0LmVycm9yfWApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxlcnQoYEhpQm9iIFV0aWxzOiBFcnJvciAke3hoci5zdGF0dXN9IC0gY2hlY2sgdGhlIGRldmVsb3BlciBjb25zb2xlIGZvciBtb3JlIGluZm9ybWF0aW9uLmApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGBIaUJvYiBVdGlsczogRXJyb3IgJHt4aHIuc3RhdHVzfS5gKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coeGhyKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXR1czogeGhyLnN0YXR1cyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYm9keTogcmVzdWx0XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIHhoci5zZW5kKEpTT04uc3RyaW5naWZ5KGJvZHkpKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxufSIsImltcG9ydCB7IEFwaSB9IGZyb20gXCIuLi9VdGlscy9BcGlcIjtcclxuaW1wb3J0IHsgRGF0ZXMgfSBmcm9tIFwiLi4vVXRpbHMvRGF0ZXNcIjtcclxuaW1wb3J0IHsgSGlCb2JBdHRlbmRhbmNlLCBIaUJvYk1ldGFkYXRhLCBIaUJvYlNoZWV0cywgSGlCb2JTdWJtaXRFbnRyeSwgSGlCb2JVc2VyIH0gZnJvbSBcIi4vSGlCb2JUeXBlc1wiO1xyXG5cclxuZXhwb3J0IGNsYXNzIEhpQm9iXHJcbntcclxuICAgIHByaXZhdGUgc3RhdGljIHVzZXJJZDogc3RyaW5nIHwgbnVsbDtcclxuICAgIHB1YmxpYyBzdGF0aWMgYXN5bmMgc3VibWl0KGRhdGU6IG51bWJlciwgZW50cmllczogSGlCb2JTdWJtaXRFbnRyeVtdKTogUHJvbWlzZTxib29sZWFuPlxyXG4gICAge1xyXG4gICAgICAgIGlmIChlbnRyaWVzLnNvbWUoZSA9PiAhZS5yZWFzb25JZCkpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIldBUk5JTkc6IFNPTUUgRU5UUklFUyBIQVZFIE5PIFJFQVNPTiBTRVQgLSBOT1QgU1VCTUlUVElORyEhXCIsIGRhdGUsIGVudHJpZXMpO1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGRhdGEgPSBlbnRyaWVzLm1hcChlID0+IHsgcmV0dXJuIHsgc3RhcnQ6IERhdGVzLmZvcm1hdChkYXRlICsgZS5zdGFydEhvdXIgKiAzNjAwICogMTAwMCwgdHJ1ZSksIGVuZDogdHlwZW9mIGUubGVuZ3RoSG91cnMgPT09IFwibnVtYmVyXCIgPyBEYXRlcy5mb3JtYXQoZGF0ZSArIChlLnN0YXJ0SG91ciArIGUubGVuZ3RoSG91cnMpICogMzYwMCAqIDEwMDAsIHRydWUpIDogdW5kZWZpbmVkLCByZWFzb246IGUucmVhc29uSWQsIGNvbW1lbnQ6IGUuY29tbWVudCA/PyB1bmRlZmluZWQgfSB9KTtcclxuICAgICAgICBjb25zdCBkYXRlU3RyID0gRGF0ZXMuZm9ybWF0KGRhdGUsIGZhbHNlKTtcclxuICAgICAgICBjb25zdCB1c2VySWQgPSBhd2FpdCB0aGlzLmdldFVzZXJJZCgpO1xyXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IEFwaS54aHIoXCJQT1NUXCIsIGBodHRwczovL2FwcC5oaWJvYi5jb20vYXBpL2F0dGVuZGFuY2UvZW1wbG95ZWVzLyR7dXNlcklkfS9hdHRlbmRhbmNlL2VudHJpZXM/Zm9yRGF0ZT0ke2RhdGVTdHJ9YCwgZGF0YSk7XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdC5zdGF0dXMgPT09IDIwMDtcclxuICAgIH1cclxuICAgIHB1YmxpYyBzdGF0aWMgYXN5bmMgdGltZWxvZ1JlYXNvbnMoKTogUHJvbWlzZTx7IGlkOiBzdHJpbmcsIG5hbWU6IHN0cmluZyB9W10+XHJcbiAgICB7XHJcbiAgICAgICAgY29uc3QgbWV0YWRhdGEgPSBhd2FpdCB0aGlzLm1ldGFkYXRhKCk7XHJcbiAgICAgICAgcmV0dXJuIG1ldGFkYXRhLnRpbWVMb2dFbnRyeVJlYXNvbi52YWx1ZXMubWFwKHYgPT5cclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICBpZDogdi5zZXJ2ZXJJZCxcclxuICAgICAgICAgICAgICAgIG5hbWU6IHYudmFsdWVcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgcHVibGljIHN0YXRpYyBhc3luYyBhdHRlbmRhbmNlKHNoZWV0OiBudW1iZXIpOiBQcm9taXNlPEhpQm9iQXR0ZW5kYW5jZT5cclxuICAgIHtcclxuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBBcGkueGhyKFwiR0VUXCIsIGBodHRwczovL2FwcC5oaWJvYi5jb20vYXBpL2VtcGxveWVlcy9hdHRlbmRhbmNlL215L3NoZWV0cy8ke3NoZWV0fWAsIHt9KTtcclxuICAgICAgICByZXR1cm4gcmVzdWx0LmJvZHk7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgc3RhdGljIGFzeW5jIHNoZWV0cygpOiBQcm9taXNlPEhpQm9iU2hlZXRzPlxyXG4gICAge1xyXG4gICAgICAgIGNvbnN0IHVzZXJJZCA9IGF3YWl0IHRoaXMuZ2V0VXNlcklkKCk7XHJcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgQXBpLnhocihcIkdFVFwiLCBgaHR0cHM6Ly9hcHAuaGlib2IuY29tL2FwaS9lbXBsb3llZXMvJHt1c2VySWR9L3RpbWVsb2cvYXR0ZW5kYW5jZS9zaGVldHNgLCB7fSk7XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdC5ib2R5O1xyXG4gICAgfVxyXG4gICAgcHVibGljIHN0YXRpYyBhc3luYyBtZXRhZGF0YSgpOiBQcm9taXNlPEhpQm9iTWV0YWRhdGE+XHJcbiAgICB7XHJcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgQXBpLnhocihcIkdFVFwiLCBcImh0dHBzOi8vYXBwLmhpYm9iLmNvbS9hcGkvY29tcGFueS9tZXRhZGF0YS9saXN0cy8/aW5jbHVkZUFyY2hpdmVkPXRydWVcIiwge30pO1xyXG4gICAgICAgIHJldHVybiByZXN1bHQuYm9keTtcclxuICAgIH1cclxuICAgIHB1YmxpYyBzdGF0aWMgYXN5bmMgZ2V0VXNlcklkKCk6IFByb21pc2U8c3RyaW5nPlxyXG4gICAge1xyXG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy51c2VySWQgIT09IFwic3RyaW5nXCIpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBhd2FpdCB0aGlzLnVzZXJJbmZvKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLnVzZXJJZCA/PyBcIlwiO1xyXG4gICAgfVxyXG4gICAgcHVibGljIHN0YXRpYyBhc3luYyB1c2VySW5mbygpOiBQcm9taXNlPEhpQm9iVXNlcj5cclxuICAgIHtcclxuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBBcGkueGhyKFwiR0VUXCIsIFwiaHR0cHM6Ly9hcHAuaGlib2IuY29tL2FwaS91c2VyXCIsIHt9KTtcclxuICAgICAgICB0aGlzLnVzZXJJZCA9IChyZXN1bHQuYm9keSBhcyBIaUJvYlVzZXIpLmlkO1xyXG4gICAgICAgIHJldHVybiByZXN1bHQuYm9keTtcclxuICAgIH1cclxufSIsImV4cG9ydCBpbnRlcmZhY2UgVGltZWxvZ0VudHJ5XHJcbntcclxuICAgIHN0YXJ0SG91cjogbnVtYmVyLFxyXG4gICAgbGVuZ3RoSG91cnM6IG51bWJlcixcclxuICAgIHJlYXNvbklkOiBzdHJpbmcsXHJcbiAgICBjb21tZW50OiBzdHJpbmcgfCBudWxsLFxyXG4gICAgaGFzQ29tbWVudDogYm9vbGVhblxyXG59XHJcbmV4cG9ydCBpbnRlcmZhY2UgVGltZWxvZ0RhdGVcclxue1xyXG4gICAgZGlydHk6IGJvb2xlYW4sXHJcbiAgICBkYXRlOiBudW1iZXJcclxuICAgIGVudHJpZXM6IFRpbWVsb2dFbnRyeVtdLFxyXG4gICAgbm9uV29ya2luZ0RheTogYm9vbGVhbixcclxuICAgIGhvdXJzVG9Xb3JrOiBudW1iZXJcclxuICAgIGZhdm9yaXRlZDogYm9vbGVhbixcclxuICAgIGRhdGVEZXNjcmlwdGlvbj86IHN0cmluZ1xyXG59XHJcbmV4cG9ydCBpbnRlcmZhY2UgVGltZWxvZ1NoZWV0XHJcbntcclxuICAgIGlkOiBudW1iZXIsXHJcbiAgICBzdGF0dXM6IHN0cmluZyxcclxuICAgIHN0YXJ0OiBudW1iZXIsXHJcbiAgICBlbmQ6IG51bWJlclxyXG4gICAgZGF0ZXM6IFRpbWVsb2dEYXRlW10sXHJcbiAgICBsb2NrZWQ6IGJvb2xlYW4sXHJcbiAgICBob3Vyc1BlckRheTogbnVtYmVyXHJcbn1cclxuZXhwb3J0IGVudW0gVGltZWxvZ1NhdmVTdGF0dXNcclxue1xyXG4gICAgV2FpdGluZyxcclxuICAgIFNhdmluZyxcclxuICAgIFNhdmVkLFxyXG4gICAgRXJyb3JcclxufVxyXG5leHBvcnQgaW50ZXJmYWNlIFRpbWVMb2dGYXZvcml0ZWREYXRlXHJcbntcclxuICAgIGRhdGU6IHN0cmluZ1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFRpbWVsb2dGbGV4RGF0ZVxyXG57XHJcbiAgICBkYXRlOiBudW1iZXIsXHJcbiAgICBkYXRlU3RyaW5nOiBzdHJpbmcsXHJcbiAgICByZWFsQmFsYW5jZTogbnVtYmVyLFxyXG4gICAgcmVhbGxvY2F0ZWRCYWxhbmNlOiBudW1iZXJcclxufVxyXG5cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgVGltZWxvZ1VJRGF0ZSBcclxue1xyXG4gICAgZGF0ZTogVGltZWxvZ0RhdGUsXHJcbiAgICBwYXJlbnQ6IEhUTUxEaXZFbGVtZW50LFxyXG4gICAgdGl0bGU6IEhUTUxTcGFuRWxlbWVudCxcclxuICAgIGVudHJpZXM6IFRpbWVsb2dVSUVudHJ5Q29udGFpbmVyW10sXHJcbiAgICBzdW1Ib3Vycz86IEhUTUxTcGFuRWxlbWVudCxcclxuICAgIHN0YXJCdXR0b246IEhUTUxCdXR0b25FbGVtZW50LFxyXG4gICAgcGFzdGVCdXR0b246IEhUTUxCdXR0b25FbGVtZW50LFxyXG4gICAgd2Vla2VuZERlc2NyaXB0aW9uOiBIVE1MRGl2RWxlbWVudFxyXG59XHJcbmV4cG9ydCBpbnRlcmZhY2UgVGltZWxvZ1VJRW50cnlDb250YWluZXJcclxue1xyXG4gICAgZW50cnk6IFRpbWVsb2dFbnRyeSxcclxuICAgIHBhcmVudDogSFRNTERpdkVsZW1lbnQsXHJcbiAgICBzdGFydEhvdXI6IEhUTUxJbnB1dEVsZW1lbnQsXHJcbiAgICBsZW5ndGg6IEhUTUxJbnB1dEVsZW1lbnQsXHJcbiAgICByZWFzb246IEhUTUxTZWxlY3RFbGVtZW50LFxyXG4gICAgZW5kSG91cjogSFRNTElucHV0RWxlbWVudCxcclxuICAgIGNvbW1lbnQ6IEhUTUxJbnB1dEVsZW1lbnQsXHJcbiAgICBjb21tZW50QnV0dG9uOiBIVE1MQnV0dG9uRWxlbWVudCxcclxuICAgIG5vUmVhc29uV2FybmluZzogSFRNTERpdkVsZW1lbnRcclxufVxyXG5leHBvcnQgaW50ZXJmYWNlIFRpbWVsb2dVSVdlZWtTdW1cclxue1xyXG4gICAgZGF0ZXM6IFRpbWVsb2dVSURhdGVbXSxcclxuICAgIGVsZW1lbnQ6IEhUTUxEaXZFbGVtZW50XHJcbn0iLCJpbXBvcnQgeyBIaUJvYiB9IGZyb20gXCIuLi9IaUJvYi9IaUJvYlwiO1xyXG5pbXBvcnQgeyBIaUJvYlN1Ym1pdEVudHJ5IH0gZnJvbSBcIi4uL0hpQm9iL0hpQm9iVHlwZXNcIjtcclxuaW1wb3J0IHsgRGF0ZXMgfSBmcm9tIFwiLi4vVXRpbHMvRGF0ZXNcIjtcclxuaW1wb3J0IHsgV2FpdCB9IGZyb20gXCIuLi9VdGlscy9XYWl0XCI7XHJcbmltcG9ydCB7IFJlYXNvbkVuaGFuY2VtZW50Q3NzIH0gZnJvbSBcIi4vUmVhc29uRW5oYW5jZW1lbnRzQ3NzXCI7XHJcblxyXG5leHBvcnQgZW51bSBSZWFzb25FbmhhbmNlbWVudE1vZGVcclxue1xyXG4gICAgRml4QWxsLFxyXG4gICAgRml4TGF0ZXN0LFxyXG59XHJcbmV4cG9ydCBjbGFzcyBSZWFzb25FbmhhbmNlbWVudHNcclxue1xyXG4gICAgcHJpdmF0ZSByZWFzb25FbmhhbmNlbWVudFVJPzogSFRNTERpdkVsZW1lbnQ7XHJcbiAgICBwcml2YXRlIHJlYXNvblNlbGVjdD86IEhUTUxTZWxlY3RFbGVtZW50O1xyXG4gICAgcHJpdmF0ZSBhcHBSb290PzogRWxlbWVudDtcclxuICAgIHByaXZhdGUgc3VibWl0dGluZyA9IGZhbHNlO1xyXG5cclxuICAgIHByaXZhdGUgbW9kZT86IFJlYXNvbkVuaGFuY2VtZW50TW9kZTtcclxuXHJcbiAgICBwdWJsaWMgY29uc3RydWN0b3IoKVxyXG4gICAge1xyXG4gICAgICAgIHRoaXMuY3JlYXRlVUkoKTtcclxuICAgICAgICB0aGlzLmNsb2NrSW5CdXR0b25GaW5kZXIoKTtcclxuICAgIH1cclxuICAgIHByaXZhdGUgY3JlYXRlVUkoKVxyXG4gICAge1xyXG4gICAgICAgIGNvbnN0IHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xyXG4gICAgICAgIHN0eWxlLmlubmVySFRNTCA9IFJlYXNvbkVuaGFuY2VtZW50Q3NzO1xyXG4gICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kKHN0eWxlKTtcclxuXHJcblxyXG4gICAgICAgIHRoaXMucmVhc29uRW5oYW5jZW1lbnRVSSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcbiAgICAgICAgdGhpcy5yZWFzb25FbmhhbmNlbWVudFVJLmNsYXNzTmFtZSA9IFwicmUtcmVhc29uLXVpXCI7XHJcbiAgICAgICAgdGhpcy5yZWFzb25FbmhhbmNlbWVudFVJLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcclxuICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHRoaXMucmVhc29uRW5oYW5jZW1lbnRVSSk7XHJcblxyXG4gICAgICAgIGNvbnN0IGxhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgICAgICBsYWJlbC5pbm5lclRleHQgPSBcIkNob29zZSBEZWZhdWx0IFJlYXNvblwiO1xyXG4gICAgICAgIGxhYmVsLmNsYXNzTmFtZSA9IFwicmUtbGFiZWxcIjtcclxuICAgICAgICB0aGlzLnJlYXNvbkVuaGFuY2VtZW50VUkuYXBwZW5kQ2hpbGQobGFiZWwpO1xyXG5cclxuICAgICAgICB0aGlzLnJlYXNvblNlbGVjdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzZWxlY3RcIik7XHJcbiAgICAgICAgdGhpcy5yZWFzb25TZWxlY3QuY2xhc3NOYW1lID0gXCJyZS1yZWFzb24tc2VsZWN0XCI7XHJcbiAgICAgICAgdGhpcy5yZWFzb25TZWxlY3Qub25jaGFuZ2UgPSAoKSA9PiB0aGlzLnNhdmVEZWZhdWx0UmVhc29uVmFsdWUoKTtcclxuICAgICAgICB0aGlzLnJlYXNvbkVuaGFuY2VtZW50VUkuYXBwZW5kQ2hpbGQodGhpcy5yZWFzb25TZWxlY3QpO1xyXG5cclxuICAgICAgICB0aGlzLnJlYXNvbkVuaGFuY2VtZW50VUkuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJyXCIpKTtcclxuXHJcbiAgICAgICAgY29uc3QgY2FuY2VsQnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiKTtcclxuICAgICAgICBjYW5jZWxCdXR0b24uY2xhc3NOYW1lID0gXCJyZS1jYW5jZWwtYnRuIHJlLWJ0biByZS1zZWNvbmRhcnlcIjtcclxuICAgICAgICBjYW5jZWxCdXR0b24uaW5uZXJUZXh0ID0gXCJDYW5jZWxcIlxyXG4gICAgICAgIGNhbmNlbEJ1dHRvbi5vbmNsaWNrID0gKCkgPT4gdGhpcy5jYW5jZWwoKTtcclxuICAgICAgICB0aGlzLnJlYXNvbkVuaGFuY2VtZW50VUkuYXBwZW5kQ2hpbGQoY2FuY2VsQnV0dG9uKTtcclxuXHJcbiAgICAgICAgY29uc3Qgc3VibWl0QnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiKTtcclxuICAgICAgICBzdWJtaXRCdXR0b24uY2xhc3NOYW1lID0gXCJyZS1zdWJtaXQtYnRuIHJlLWJ0biByZS1wcmltYXJ5XCI7XHJcbiAgICAgICAgc3VibWl0QnV0dG9uLmlubmVyVGV4dCA9IFwiU3VibWl0XCJcclxuICAgICAgICBzdWJtaXRCdXR0b24ub25jbGljayA9ICgpID0+IHRoaXMuc3VibWl0KCk7XHJcbiAgICAgICAgdGhpcy5yZWFzb25FbmhhbmNlbWVudFVJLmFwcGVuZENoaWxkKHN1Ym1pdEJ1dHRvbik7XHJcblxyXG5cclxuICAgICAgICBjb25zdCBzdWJtaXR0aW5nVGV4dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcbiAgICAgICAgc3VibWl0dGluZ1RleHQuY2xhc3NOYW1lID0gXCJyZS1zdWJtaXR0aW5nLXRleHRcIjtcclxuICAgICAgICBzdWJtaXR0aW5nVGV4dC5pbm5lclRleHQgPSBcIlN1Ym1pdHRpbmcuLi5cIlxyXG4gICAgICAgIHRoaXMucmVhc29uRW5oYW5jZW1lbnRVSS5hcHBlbmRDaGlsZChzdWJtaXR0aW5nVGV4dCk7XHJcbiAgICB9XHJcbiAgICBwcml2YXRlIGFzeW5jIGNsb2NrSW5CdXR0b25GaW5kZXIoKVxyXG4gICAge1xyXG4gICAgICAgIHdoaWxlICh0cnVlKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdmFyIGNsb2NrSW5CdXR0b25zID0gdGhpcy5maW5kVW5lbmhhbmNlZEJ1dHRvbnMoXCJiLWJ1dHRvbi5wdW5jaC1jbG9jay1idXR0b24sIGItYnV0dG9uLnRpbWUtd2lkZ2V0LWNsb2NrLWluLWJ0biwgYi1idXR0b24udGltZS13aWRnZXQtY2xvY2stb3V0LWJ0blwiKTtcclxuICAgICAgICAgICAgY2xvY2tJbkJ1dHRvbnMuZm9yRWFjaChlID0+IHRoaXMuZW5oYW5jZUNsb2NrSW5CdXR0b24oZSwgUmVhc29uRW5oYW5jZW1lbnRNb2RlLkZpeExhdGVzdCkpO1xyXG4gICAgICAgICAgICB2YXIgcXVpY2tGaXhCdXR0b24gPSB0aGlzLmZpbmRVbmVuaGFuY2VkQnV0dG9ucyhcImItYnV0dG9uLnF1aWNrLWZpeC1hcHBseS1idXR0b25cIik7XHJcbiAgICAgICAgICAgIHF1aWNrRml4QnV0dG9uLmZvckVhY2goZSA9PiB0aGlzLmVuaGFuY2VDbG9ja0luQnV0dG9uKGUsIFJlYXNvbkVuaGFuY2VtZW50TW9kZS5GaXhBbGwpKTtcclxuXHJcbiAgICAgICAgICAgIGlmICghdGhpcy5hcHBSb290KVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmFwcFJvb3QgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiYXBwLXJvb3RcIikgPz8gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGF3YWl0IFdhaXQuZm9yKDEwKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBwcml2YXRlIGZpbmRVbmVuaGFuY2VkQnV0dG9ucyhzZWxlY3Rvcjogc3RyaW5nKTogRWxlbWVudFtdXHJcbiAgICB7XHJcbiAgICAgICAgdmFyIGFyciA9IFtdIGFzIEVsZW1lbnRbXTtcclxuICAgICAgICB2YXIgcXVlcnkgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKTtcclxuICAgICAgICBmb3IgKGNvbnN0IGVsZW1lbnQgb2YgcXVlcnkpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZiAoIWVsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKFwicmUtZW5oYW5jZWRcIikpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LmFkZChcInJlLWVuaGFuY2VkXCIpO1xyXG4gICAgICAgICAgICAgICAgYXJyLnB1c2goZWxlbWVudCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGFycjtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGVuaGFuY2VDbG9ja0luQnV0dG9uKGJ1dHRvbjogRWxlbWVudCwgbW9kZTogUmVhc29uRW5oYW5jZW1lbnRNb2RlKVxyXG4gICAge1xyXG4gICAgICAgIGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4gdGhpcy5zaG93UmVhc29uRml4ZXIobW9kZSkpO1xyXG4gICAgfVxyXG4gICAgcHJpdmF0ZSBzYXZlRGVmYXVsdFJlYXNvblZhbHVlKClcclxuICAgIHtcclxuICAgICAgICBpZiAoIXRoaXMucmVhc29uU2VsZWN0KSByZXR1cm47XHJcbiAgICAgICAgd2luZG93LmxvY2FsU3RvcmFnZS5zZXRJdGVtKFwicmUtbGFzdC1yZWFzb25cIiwgdGhpcy5yZWFzb25TZWxlY3QudmFsdWUpO1xyXG4gICAgfVxyXG4gICAgcHJpdmF0ZSBsb2FkRGVmYXVsdFJlYXNvblZhbHVlKClcclxuICAgIHtcclxuICAgICAgICBpZiAoIXRoaXMucmVhc29uU2VsZWN0KSByZXR1cm47XHJcbiAgICAgICAgdGhpcy5yZWFzb25TZWxlY3QudmFsdWUgPSB3aW5kb3cubG9jYWxTdG9yYWdlLmdldEl0ZW0oXCJyZS1sYXN0LXJlYXNvblwiKSA/PyBcIlwiO1xyXG4gICAgfVxyXG4gICAgcHJpdmF0ZSBhc3luYyBzaG93UmVhc29uRml4ZXIobW9kZTogUmVhc29uRW5oYW5jZW1lbnRNb2RlKVxyXG4gICAge1xyXG4gICAgICAgIGlmICghdGhpcy5yZWFzb25FbmhhbmNlbWVudFVJKSByZXR1cm47XHJcbiAgICAgICAgYXdhaXQgV2FpdC5mb3IoMjUwKTtcclxuICAgICAgICB0aGlzLnNldFVJVmlzaWJsZSh0cnVlKTtcclxuICAgICAgICB0aGlzLm1vZGUgPSBtb2RlO1xyXG4gICAgICAgIGlmICh0aGlzLnJlYXNvblNlbGVjdClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGNvbnN0IHJlYXNvbnMgPSBhd2FpdCBIaUJvYi5tZXRhZGF0YSgpO1xyXG4gICAgICAgICAgICB0aGlzLnJlYXNvblNlbGVjdC5pbm5lckhUTUwgPSBcIlwiO1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IHJlYXNvbiBvZiByZWFzb25zLnRpbWVMb2dFbnRyeVJlYXNvbi52YWx1ZXMpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG9wdGlvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJvcHRpb25cIik7XHJcbiAgICAgICAgICAgICAgICBvcHRpb24udmFsdWUgPSByZWFzb24uc2VydmVySWQ7XHJcbiAgICAgICAgICAgICAgICBvcHRpb24uaW5uZXJUZXh0ID0gcmVhc29uLnZhbHVlO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5yZWFzb25TZWxlY3QuYXBwZW5kQ2hpbGQob3B0aW9uKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLmxvYWREZWZhdWx0UmVhc29uVmFsdWUoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBwcml2YXRlIGNhbmNlbCgpXHJcbiAgICB7XHJcbiAgICAgICAgdGhpcy5zZXRVSVZpc2libGUoZmFsc2UpO1xyXG4gICAgfVxyXG4gICAgcHJpdmF0ZSBzZXRVSVZpc2libGUodmFsdWU6IGJvb2xlYW4pXHJcbiAgICB7XHJcbiAgICAgICAgaWYgKHRoaXMucmVhc29uRW5oYW5jZW1lbnRVSSlcclxuICAgICAgICB7XHJcblxyXG4gICAgICAgICAgICBpZiAodmFsdWUpIHRoaXMucmVhc29uRW5oYW5jZW1lbnRVSS5zdHlsZS5kaXNwbGF5ID0gXCJibG9ja1wiO1xyXG4gICAgICAgICAgICBlbHNlIHRoaXMucmVhc29uRW5oYW5jZW1lbnRVSS5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLmFwcFJvb3QpXHJcbiAgICAgICAge1xyXG5cclxuICAgICAgICAgICAgaWYgKHZhbHVlKSB0aGlzLmFwcFJvb3QuY2xhc3NMaXN0LmFkZChcInJlLWJsdXJcIik7XHJcbiAgICAgICAgICAgIGVsc2UgdGhpcy5hcHBSb290LmNsYXNzTGlzdC5yZW1vdmUoXCJyZS1ibHVyXCIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHByaXZhdGUgYXN5bmMgc3VibWl0KClcclxuICAgIHtcclxuICAgICAgICBhd2FpdCBXYWl0LnVudGlsKCgpID0+ICF0aGlzLnN1Ym1pdHRpbmcpO1xyXG5cclxuICAgICAgICB0aGlzLnN1Ym1pdHRpbmcgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMucmVhc29uRW5oYW5jZW1lbnRVST8uY2xhc3NMaXN0LmFkZChcInJlLXN1Ym1pdHRpbmdcIik7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLm1vZGUgPT09IFJlYXNvbkVuaGFuY2VtZW50TW9kZS5GaXhBbGwpIGF3YWl0IHRoaXMuZml4QWxsKCk7XHJcbiAgICAgICAgaWYgKHRoaXMubW9kZSA9PT0gUmVhc29uRW5oYW5jZW1lbnRNb2RlLkZpeExhdGVzdCkgYXdhaXQgdGhpcy5maXhMYXRlc3QoKTtcclxuXHJcbiAgICAgICAgdGhpcy5zZXRVSVZpc2libGUoZmFsc2UpO1xyXG4gICAgICAgIHRoaXMucmVhc29uRW5oYW5jZW1lbnRVST8uY2xhc3NMaXN0LnJlbW92ZShcInJlLXN1Ym1pdHRpbmdcIik7XHJcblxyXG4gICAgICAgIHRoaXMuc3VibWl0dGluZyA9IGZhbHNlO1xyXG4gICAgfVxyXG4gICAgcHJpdmF0ZSBhc3luYyBmaXhBbGwoKVxyXG4gICAge1xyXG4gICAgICAgIGlmICghdGhpcy5yZWFzb25TZWxlY3QpIHJldHVybjtcclxuICAgICAgICBjb25zdCByZWFzb24gPSB0aGlzLnJlYXNvblNlbGVjdC52YWx1ZTtcclxuICAgICAgICBjb25zdCBzaGVldHMgPSBhd2FpdCBIaUJvYi5zaGVldHMoKTtcclxuICAgICAgICBmb3IgKGNvbnN0IHNoZWV0IG9mIHNoZWV0cy5lbXBsb3llZVNoZWV0cylcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlmIChzaGVldC5sb2NrZWQpIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICBjb25zdCBhdHRlbmRhbmNlID0gYXdhaXQgSGlCb2IuYXR0ZW5kYW5jZShzaGVldC5pZCk7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgZGF0ZSBvZiBhdHRlbmRhbmNlLmF0dGVuZGFuY2UpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGlmIChkYXRlLmVudHJpZXMuc29tZShlID0+ICFlLnJlYXNvbikpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdGltZSA9IERhdGVzLnBhcnNlKGRhdGUuZGF0ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB0aW1lICE9PSBcIm51bWJlclwiKSBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBlbnRyaWVzOiBIaUJvYlN1Ym1pdEVudHJ5W10gPSBkYXRlLmVudHJpZXMubWFwKGUgPT5cclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFydEhvdXI6ICgoRGF0ZXMucGFyc2UoZS5zdGFydCkgPz8gRGF0ZS5ub3coKSkgLSB0aW1lKSAvICgzNjAwICogMTAwMCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZW5ndGhIb3VyczogZS5lbmQgPyAoKERhdGVzLnBhcnNlKGUuZW5kKSA/PyBEYXRlLm5vdygpKSAtIChEYXRlcy5wYXJzZShlLnN0YXJ0KSA/PyBEYXRlLm5vdygpKSkgLyAoMzYwMCAqIDEwMDApIDogbnVsbCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlYXNvbklkOiBlLnJlYXNvbiB8fCByZWFzb24sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21tZW50OiBlLmNvbW1lbnQgPz8gbnVsbFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IEhpQm9iLnN1Ym1pdCh0aW1lLCBlbnRyaWVzKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHByaXZhdGUgYXN5bmMgZml4TGF0ZXN0KClcclxuICAgIHtcclxuICAgICAgICBpZiAoIXRoaXMucmVhc29uU2VsZWN0KSByZXR1cm47XHJcbiAgICAgICAgY29uc3QgcmVhc29uID0gdGhpcy5yZWFzb25TZWxlY3QudmFsdWU7XHJcbiAgICAgICAgbGV0IGxhdGVzdDogeyBkYXRlOiBudW1iZXIsIGVudHJpZXM6IEhpQm9iU3VibWl0RW50cnlbXSB9IHwgbnVsbCA9IG51bGw7XHJcbiAgICAgICAgY29uc3Qgc2hlZXRzID0gYXdhaXQgSGlCb2Iuc2hlZXRzKCk7XHJcbiAgICAgICAgZm9yIChjb25zdCBzaGVldCBvZiBzaGVldHMuZW1wbG95ZWVTaGVldHMpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZiAoc2hlZXQubG9ja2VkKSBjb250aW51ZTtcclxuICAgICAgICAgICAgY29uc3QgYXR0ZW5kYW5jZSA9IGF3YWl0IEhpQm9iLmF0dGVuZGFuY2Uoc2hlZXQuaWQpO1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGRhdGUgb2YgYXR0ZW5kYW5jZS5hdHRlbmRhbmNlKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0aW1lID0gRGF0ZXMucGFyc2UoZGF0ZS5kYXRlKTtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdGltZSAhPT0gXCJudW1iZXJcIikgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWxhdGVzdCB8fCB0aW1lID4gbGF0ZXN0LmRhdGUpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZW50cmllczogSGlCb2JTdWJtaXRFbnRyeVtdID0gZGF0ZS5lbnRyaWVzLm1hcChlID0+XHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnRIb3VyOiAoKERhdGVzLnBhcnNlKGUuc3RhcnQpID8/IERhdGUubm93KCkpIC0gdGltZSkgLyAoMzYwMCAqIDEwMDApLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGVuZ3RoSG91cnM6IGUuZW5kID8gKChEYXRlcy5wYXJzZShlLmVuZCkgPz8gRGF0ZS5ub3coKSkgLSAoRGF0ZXMucGFyc2UoZS5zdGFydCkgPz8gRGF0ZS5ub3coKSkpIC8gKDM2MDAgKiAxMDAwKSA6IG51bGwsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWFzb25JZDogZS5yZWFzb24sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21tZW50OiBlLmNvbW1lbnQgPz8gbnVsbFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGxhdGVzdCA9IHsgZGF0ZTogdGltZSwgZW50cmllczogZW50cmllcyB9O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChsYXRlc3QpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGVudHJ5IG9mIGxhdGVzdC5lbnRyaWVzKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBlbnRyeS5yZWFzb25JZCA9IGVudHJ5LnJlYXNvbklkIHx8IHJlYXNvbjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBhd2FpdCBIaUJvYi5zdWJtaXQobGF0ZXN0LmRhdGUsIGxhdGVzdC5lbnRyaWVzKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgeyBIaUJvYiB9IGZyb20gXCIuLi9IaUJvYi9IaUJvYlwiO1xyXG5pbXBvcnQgeyBIaUJvYlJlYXNvbiB9IGZyb20gXCIuLi9IaUJvYi9IaUJvYlR5cGVzXCI7XHJcbmltcG9ydCB7IERhdGVzIH0gZnJvbSBcIi4uL1V0aWxzL0RhdGVzXCI7XHJcbmltcG9ydCB7IEV2ZW50SGFuZGxlciB9IGZyb20gXCIuLi9VdGlscy9FdmVudEhhbmRsZXJcIjtcclxuaW1wb3J0IHsgTnVtYmVycyB9IGZyb20gXCIuLi9VdGlscy9OdW1iZXJzXCI7XHJcbmltcG9ydCB7IFdhaXQgfSBmcm9tIFwiLi4vVXRpbHMvV2FpdFwiO1xyXG5pbXBvcnQgeyBUaW1lbG9nU2hlZXQsIFRpbWVsb2dEYXRlLCBUaW1lbG9nU2F2ZVN0YXR1cywgVGltZUxvZ0Zhdm9yaXRlZERhdGUsIFRpbWVsb2dGbGV4RGF0ZSB9IGZyb20gXCIuL1RpbWVsb2dUeXBlc1wiO1xyXG5cclxuZXhwb3J0IGNsYXNzIFRpbWVsb2dNb2RlbFxyXG57XHJcbiAgICBwdWJsaWMgc2hlZXRzOiBUaW1lbG9nU2hlZXRbXSA9IFtdO1xyXG4gICAgcHVibGljIG9uRGF0ZVVwZGF0ZWQgPSBuZXcgRXZlbnRIYW5kbGVyPHsgc2hlZXQ6IFRpbWVsb2dTaGVldCwgZGF0ZTogVGltZWxvZ0RhdGUgfT4oKTtcclxuICAgIHB1YmxpYyBvblJlYXNvbnNVcGRhdGVkID0gbmV3IEV2ZW50SGFuZGxlcjxIaUJvYlJlYXNvbltdPigpO1xyXG4gICAgcHVibGljIG9uU2hlZXRVcGRhdGVkID0gbmV3IEV2ZW50SGFuZGxlcjxUaW1lbG9nU2hlZXQ+KCk7XHJcbiAgICBwdWJsaWMgb25TaGVldHNVcGRhdGVkID0gbmV3IEV2ZW50SGFuZGxlcjxUaW1lbG9nU2hlZXRbXT4oKTtcclxuICAgIHB1YmxpYyBvblNhdmVTdGF0dXNVcGRhdGVkID0gbmV3IEV2ZW50SGFuZGxlcjxUaW1lbG9nU2F2ZVN0YXR1cz4oKTtcclxuICAgIHByaXZhdGUgc2F2ZUhhbmRsZTogbnVtYmVyID0gLTE7XHJcbiAgICBwcml2YXRlIHNhdmluZzogYm9vbGVhbiA9IGZhbHNlO1xyXG4gICAgcHJpdmF0ZSBjYWxjdWxhdGluZ0ZsZXg6IGJvb2xlYW4gPSBmYWxzZTtcclxuICAgIHByaXZhdGUgZmV0Y2hpbmdTaGVldHMgPSBmYWxzZTtcclxuICAgIHByaXZhdGUgcmVhc29uczogSGlCb2JSZWFzb25bXSA9IFtdO1xyXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKClcclxuICAgIHtcclxuICAgIH1cclxuICAgIHB1YmxpYyBhc3luYyBpbml0aWFsaXplKClcclxuICAgIHtcclxuICAgICAgICBhd2FpdCB0aGlzLmZldGNoU2hlZXRzKCk7XHJcbiAgICAgICAgYXdhaXQgdGhpcy5mZXRjaFJlYXNvbnMoKTtcclxuICAgICAgICB0aGlzLm9uU2F2ZVN0YXR1c1VwZGF0ZWQuZmlyZShUaW1lbG9nU2F2ZVN0YXR1cy5TYXZlZCk7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgYXN5bmMgZmV0Y2hTaGVldHMoKVxyXG4gICAge1xyXG4gICAgICAgIGF3YWl0IFdhaXQudW50aWwoKCkgPT4gIXRoaXMuZmV0Y2hpbmdTaGVldHMpO1xyXG4gICAgICAgIHRoaXMuZmV0Y2hpbmdTaGVldHMgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMuc2hlZXRzID0gW107XHJcbiAgICAgICAgY29uc3Qgc2hlZXRzID0gYXdhaXQgSGlCb2Iuc2hlZXRzKCk7XHJcbiAgICAgICAgZm9yIChjb25zdCBzaGVldCBvZiBzaGVldHMuZW1wbG95ZWVTaGVldHMpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBjb25zdCBzdGFydCA9IERhdGVzLnBhcnNlKHNoZWV0LmN5Y2xlU3RhcnREYXRlKSA/PyAwO1xyXG4gICAgICAgICAgICBjb25zdCBlbmQgPSBEYXRlcy5wYXJzZShzaGVldC5jeWNsZUVuZERhdGUpID8/IDA7XHJcbiAgICAgICAgICAgIGNvbnN0IG5ld1NoZWV0ID0ge1xyXG4gICAgICAgICAgICAgICAgaWQ6IHNoZWV0LmlkLFxyXG4gICAgICAgICAgICAgICAgc3RhdHVzOiBzaGVldC5zdGF0dXMsXHJcbiAgICAgICAgICAgICAgICBzdGFydCxcclxuICAgICAgICAgICAgICAgIGVuZCxcclxuICAgICAgICAgICAgICAgIGRhdGVzOiBbXSxcclxuICAgICAgICAgICAgICAgIGxvY2tlZDogc2hlZXQubG9ja2VkLFxyXG4gICAgICAgICAgICAgICAgaG91cnNQZXJEYXk6IDBcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgdGhpcy5zaGVldHMucHVzaChuZXdTaGVldCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuc2hlZXRzLnNvcnQoKGEsIGIpID0+IGIuc3RhcnQgLSBhLnN0YXJ0KTtcclxuICAgICAgICB0aGlzLm9uU2hlZXRzVXBkYXRlZC5maXJlKHRoaXMuc2hlZXRzKTtcclxuICAgICAgICB0aGlzLmZldGNoaW5nU2hlZXRzID0gZmFsc2U7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgYXN5bmMgZmV0Y2hSZWFzb25zKClcclxuICAgIHtcclxuICAgICAgICB0aGlzLnJlYXNvbnMgPSAoYXdhaXQgSGlCb2IubWV0YWRhdGEoKSkudGltZUxvZ0VudHJ5UmVhc29uLnZhbHVlcztcclxuICAgICAgICB0aGlzLm9uUmVhc29uc1VwZGF0ZWQuZmlyZSh0aGlzLnJlYXNvbnMpO1xyXG4gICAgfVxyXG4gICAgcHVibGljIGFzeW5jIGZldGNoU2hlZXQoaWQ6IG51bWJlcilcclxuICAgIHtcclxuICAgICAgICBjb25zdCBzaGVldCA9IHRoaXMuc2hlZXRzLmZpbmQocyA9PiBzLmlkID09PSBpZCk7XHJcbiAgICAgICAgaWYgKCFzaGVldCkgcmV0dXJuO1xyXG4gICAgICAgIGNvbnN0IGF0dGVuZGFuY2UgPSBhd2FpdCBIaUJvYi5hdHRlbmRhbmNlKGlkKTtcclxuICAgICAgICBzaGVldC5ob3Vyc1BlckRheSA9IGF0dGVuZGFuY2Uuc3VtbWFyeS5wb3RlbnRpYWxXb3JraW5nSG91cnMgLyBhdHRlbmRhbmNlLnN1bW1hcnkucG90ZW50aWFsV29ya2luZ0RheXM7XHJcbiAgICAgICAgc2hlZXQuZGF0ZXMgPSBbXTtcclxuICAgICAgICBmb3IgKGNvbnN0IGRhdGUgb2YgYXR0ZW5kYW5jZS5hdHRlbmRhbmNlKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgY29uc3QgdGltZSA9IERhdGVzLnBhcnNlKGRhdGUuZGF0ZSkgPz8gRGF0ZS5ub3coKVxyXG4gICAgICAgICAgICBjb25zdCB2YWx1ZTogVGltZWxvZ0RhdGUgPSB7XHJcbiAgICAgICAgICAgICAgICBkaXJ0eTogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBkYXRlOiB0aW1lLFxyXG4gICAgICAgICAgICAgICAgbm9uV29ya2luZ0RheTogZGF0ZS5zdGF0dXMgPT09IFwiV2Vla2VuZEV2ZW50XCIgfHwgZGF0ZS5zdGF0dXMgPT09IFwiQXBwcm92ZVRpbWVvZmZSZXF1ZXN0XCIsXHJcbiAgICAgICAgICAgICAgICBob3Vyc1RvV29yazogc2hlZXQuaG91cnNQZXJEYXksXHJcbiAgICAgICAgICAgICAgICBmYXZvcml0ZWQ6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgZGF0ZURlc2NyaXB0aW9uOiBkYXRlLm5vdGUuZGVzY3JpcHRpb24sXHJcbiAgICAgICAgICAgICAgICBlbnRyaWVzOiBkYXRlLmVudHJpZXMubWFwKGUgPT5cclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGFydEhvdXI6IE51bWJlcnMuZmxvb3IoKChEYXRlcy5wYXJzZShlLnN0YXJ0KSA/PyBEYXRlLm5vdygpKSAtIChEYXRlcy5wYXJzZShkYXRlLmRhdGUpID8/IERhdGUubm93KCkpKSAvICgzNjAwICogMTAwMCksIDIpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZW5ndGhIb3VyczogTnVtYmVycy5jZWlsKCgoRGF0ZXMucGFyc2UoZS5lbmQpID8/IERhdGUubm93KCkpIC0gKERhdGVzLnBhcnNlKGUuc3RhcnQpID8/IERhdGUubm93KCkpKSAvICgzNjAwICogMTAwMCksIDIpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZWFzb25JZDogZS5yZWFzb24sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbW1lbnQ6IGUuY29tbWVudCA/PyBudWxsLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBoYXNDb21tZW50OiAhIWUuY29tbWVudFxyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICB9KS5zb3J0KChhLCBiKSA9PiBhLnN0YXJ0SG91ciAtIGIuc3RhcnRIb3VyKVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIGRhdGUucGFpZFRpbWVvZmZTZWNvbmRzID09PSBcIm51bWJlclwiICYmIGRhdGUucGFpZFRpbWVvZmZTZWNvbmRzID4gMCkgdmFsdWUuaG91cnNUb1dvcmsgLT0gKGRhdGUucGFpZFRpbWVvZmZTZWNvbmRzIC8gKDYwICogNjApKTtcclxuICAgICAgICAgICAgZWxzZSBpZiAodmFsdWUubm9uV29ya2luZ0RheSkgdmFsdWUuaG91cnNUb1dvcmsgPSAwO1xyXG4gICAgICAgICAgICBzaGVldC5kYXRlcy5wdXNoKHZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgc2hlZXQuZGF0ZXMuc29ydCgoYSwgYikgPT4gYi5kYXRlIC0gYS5kYXRlKTtcclxuICAgICAgICBjb25zdCBmYXZvcml0ZSA9IGF3YWl0IHRoaXMuZ2V0RmF2b3JpdGVkRGF0ZSgpO1xyXG4gICAgICAgIGlmIChmYXZvcml0ZSAmJiBmYXZvcml0ZS5zaGVldCA9PT0gc2hlZXQpXHJcbiAgICAgICAgICAgIGZhdm9yaXRlLmRhdGUuZmF2b3JpdGVkID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLm9uU2hlZXRVcGRhdGVkLmZpcmUoc2hlZXQpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBjaGFuZ2VTdGFydEhvdXIoZGF0ZTogVGltZWxvZ0RhdGUsIGluZGV4OiBudW1iZXIsIGhvdXI6IG51bWJlcilcclxuICAgIHtcclxuICAgICAgICBjb25zdCBzaGVldCA9IHRoaXMuc2hlZXRzLmZpbmQocyA9PiBzLmRhdGVzLnNvbWUoZCA9PiBkID09PSBkYXRlKSk7XHJcbiAgICAgICAgaWYgKCFzaGVldCkgcmV0dXJuO1xyXG4gICAgICAgIGRhdGUuZW50cmllc1tpbmRleF0uc3RhcnRIb3VyID0gaG91cjtcclxuICAgICAgICBkYXRlLmRpcnR5ID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLnF1ZXVlU2F2ZSgpO1xyXG4gICAgICAgIHRoaXMub25EYXRlVXBkYXRlZC5maXJlKHsgc2hlZXQsIGRhdGUgfSk7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgY2hhbmdlTGVuZ3RoSG91cnMoZGF0ZTogVGltZWxvZ0RhdGUsIGluZGV4OiBudW1iZXIsIGxlbmd0aDogbnVtYmVyKVxyXG4gICAge1xyXG4gICAgICAgIGNvbnN0IHNoZWV0ID0gdGhpcy5zaGVldHMuZmluZChzID0+IHMuZGF0ZXMuc29tZShkID0+IGQgPT09IGRhdGUpKTtcclxuICAgICAgICBpZiAoIXNoZWV0KSByZXR1cm47XHJcbiAgICAgICAgZGF0ZS5lbnRyaWVzW2luZGV4XS5sZW5ndGhIb3VycyA9IGxlbmd0aDtcclxuICAgICAgICBkYXRlLmRpcnR5ID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLnF1ZXVlU2F2ZSgpO1xyXG4gICAgICAgIHRoaXMub25EYXRlVXBkYXRlZC5maXJlKHsgc2hlZXQsIGRhdGUgfSk7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgY2hhbmdlUmVhc29uKGRhdGU6IFRpbWVsb2dEYXRlLCBpbmRleDogbnVtYmVyLCByZWFzb246IHN0cmluZylcclxuICAgIHtcclxuICAgICAgICBjb25zdCBzaGVldCA9IHRoaXMuc2hlZXRzLmZpbmQocyA9PiBzLmRhdGVzLnNvbWUoZCA9PiBkID09PSBkYXRlKSk7XHJcbiAgICAgICAgaWYgKCFzaGVldCkgcmV0dXJuO1xyXG4gICAgICAgIGRhdGUuZW50cmllc1tpbmRleF0ucmVhc29uSWQgPSByZWFzb247XHJcbiAgICAgICAgZGF0ZS5kaXJ0eSA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5xdWV1ZVNhdmUoKTtcclxuICAgICAgICB0aGlzLm9uRGF0ZVVwZGF0ZWQuZmlyZSh7IHNoZWV0LCBkYXRlIH0pO1xyXG4gICAgfVxyXG4gICAgcHVibGljIGNoYW5nZUNvbW1lbnQoZGF0ZTogVGltZWxvZ0RhdGUsIGluZGV4OiBudW1iZXIsIGNvbW1lbnQ6IHN0cmluZylcclxuICAgIHtcclxuICAgICAgICBjb25zdCBzaGVldCA9IHRoaXMuc2hlZXRzLmZpbmQocyA9PiBzLmRhdGVzLnNvbWUoZCA9PiBkID09PSBkYXRlKSk7XHJcbiAgICAgICAgaWYgKCFzaGVldCkgcmV0dXJuO1xyXG4gICAgICAgIGRhdGUuZW50cmllc1tpbmRleF0uY29tbWVudCA9IGNvbW1lbnQ7XHJcbiAgICAgICAgZGF0ZS5lbnRyaWVzW2luZGV4XS5oYXNDb21tZW50ID0gdHJ1ZTtcclxuICAgICAgICBkYXRlLmRpcnR5ID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLnF1ZXVlU2F2ZSgpO1xyXG4gICAgICAgIHRoaXMub25EYXRlVXBkYXRlZC5maXJlKHsgc2hlZXQsIGRhdGUgfSk7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgdG9nZ2xlQ29tbWVudChkYXRlOiBUaW1lbG9nRGF0ZSwgaW5kZXg6IG51bWJlcilcclxuICAgIHtcclxuICAgICAgICBjb25zdCBzaGVldCA9IHRoaXMuc2hlZXRzLmZpbmQocyA9PiBzLmRhdGVzLnNvbWUoZCA9PiBkID09PSBkYXRlKSk7XHJcbiAgICAgICAgaWYgKCFzaGVldCkgcmV0dXJuO1xyXG4gICAgICAgIGRhdGUuZW50cmllc1tpbmRleF0uaGFzQ29tbWVudCA9ICFkYXRlLmVudHJpZXNbaW5kZXhdLmhhc0NvbW1lbnQ7XHJcbiAgICAgICAgZGF0ZS5lbnRyaWVzW2luZGV4XS5jb21tZW50ID0gZGF0ZS5lbnRyaWVzW2luZGV4XS5oYXNDb21tZW50ID8gXCJcIiA6IG51bGw7XHJcbiAgICAgICAgZGF0ZS5kaXJ0eSA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5xdWV1ZVNhdmUoKTtcclxuICAgICAgICB0aGlzLm9uRGF0ZVVwZGF0ZWQuZmlyZSh7IHNoZWV0LCBkYXRlIH0pO1xyXG4gICAgfVxyXG4gICAgcHVibGljIGFzeW5jIHNldEZhdm9yaXRlZERhdGUoZGF0ZTogVGltZWxvZ0RhdGUpXHJcbiAgICB7XHJcbiAgICAgICAgY29uc3Qgc2hlZXQgPSB0aGlzLnNoZWV0cy5maW5kKHMgPT4gcy5kYXRlcy5zb21lKGQgPT4gZCA9PT0gZGF0ZSkpO1xyXG4gICAgICAgIGlmICghc2hlZXQpIHJldHVybjtcclxuXHJcbiAgICAgICAgY29uc3Qgb2xkRmF2b3JpdGUgPSBhd2FpdCB0aGlzLmdldEZhdm9yaXRlZERhdGUoKTtcclxuICAgICAgICBpZiAob2xkRmF2b3JpdGUpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBvbGRGYXZvcml0ZS5kYXRlLmZhdm9yaXRlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICB0aGlzLm9uRGF0ZVVwZGF0ZWQuZmlyZShvbGRGYXZvcml0ZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBkYXRlLmZhdm9yaXRlZCA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5vbkRhdGVVcGRhdGVkLmZpcmUoeyBzaGVldDogc2hlZXQsIGRhdGU6IGRhdGUgfSk7XHJcblxyXG4gICAgICAgIHdpbmRvdy5sb2NhbFN0b3JhZ2Uuc2V0SXRlbShcInRsX2Zhdm9yaXRlXCIsIEpTT04uc3RyaW5naWZ5KHsgZGF0ZTogRGF0ZXMuZm9ybWF0KGRhdGUuZGF0ZSwgZmFsc2UpIH0gYXMgVGltZUxvZ0Zhdm9yaXRlZERhdGUpKTtcclxuICAgIH1cclxuICAgIHB1YmxpYyBhc3luYyBnZXRGYXZvcml0ZWREYXRlKCk6IFByb21pc2U8eyBzaGVldDogVGltZWxvZ1NoZWV0LCBkYXRlOiBUaW1lbG9nRGF0ZSB9IHwgbnVsbD5cclxuICAgIHtcclxuICAgICAgICBjb25zdCBzdHIgPSB3aW5kb3cubG9jYWxTdG9yYWdlLmdldEl0ZW0oXCJ0bF9mYXZvcml0ZVwiKTtcclxuICAgICAgICBpZiAoIXN0cikgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgY29uc3QgZmF2b3JpdGU6IFRpbWVMb2dGYXZvcml0ZWREYXRlID0gSlNPTi5wYXJzZShzdHIpO1xyXG4gICAgICAgIGNvbnN0IHRpbWUgPSBEYXRlcy5wYXJzZShmYXZvcml0ZS5kYXRlKTtcclxuICAgICAgICBpZiAodHlwZW9mIHRpbWUgPT09IFwibnVtYmVyXCIpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBjb25zdCBzaGVldCA9IHRoaXMuc2hlZXRzLmZpbmQocyA9PiBzLnN0YXJ0IDw9IHRpbWUgJiYgcy5lbmQgPj0gdGltZSk7XHJcbiAgICAgICAgICAgIGlmIChzaGVldClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgaWYgKHNoZWV0LmRhdGVzLmxlbmd0aCA8IDEpIGF3YWl0IHRoaXMuZmV0Y2hTaGVldChzaGVldC5pZCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBkYXRlID0gc2hlZXQuZGF0ZXMuZmluZChkID0+IGQuZGF0ZSA9PT0gdGltZSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoZGF0ZSlcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4geyBzaGVldDogc2hlZXQsIGRhdGU6IGRhdGUgfTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZGVsZXRlRW50cnkoZGF0ZTogVGltZWxvZ0RhdGUsIGluZGV4OiBudW1iZXIpXHJcbiAgICB7XHJcbiAgICAgICAgY29uc3Qgc2hlZXQgPSB0aGlzLnNoZWV0cy5maW5kKHMgPT4gcy5kYXRlcy5zb21lKGQgPT4gZCA9PT0gZGF0ZSkpO1xyXG4gICAgICAgIGlmICghc2hlZXQpIHJldHVybjtcclxuICAgICAgICBkYXRlLmVudHJpZXMuc3BsaWNlKGluZGV4LCAxKTtcclxuICAgICAgICBkYXRlLmRpcnR5ID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLnF1ZXVlU2F2ZSgpO1xyXG4gICAgICAgIHRoaXMub25EYXRlVXBkYXRlZC5maXJlKHsgc2hlZXQsIGRhdGUgfSk7XHJcbiAgICB9XHJcbiAgICBwcml2YXRlIGFzeW5jIGZpbmRMYXN0RW50cnkob3JpZ2luYWxEYXRlOiBUaW1lbG9nRGF0ZSlcclxuICAgIHtcclxuICAgICAgICBjb25zdCBvcmlnaW5hbFNoZWV0ID0gdGhpcy5zaGVldHMuZmluZChzID0+IHMuZGF0ZXMuc29tZShkID0+IGQgPT09IG9yaWdpbmFsRGF0ZSkpO1xyXG4gICAgICAgIGlmICghb3JpZ2luYWxTaGVldCkgcmV0dXJuO1xyXG4gICAgICAgIGxldCBkYXRlSW5kZXggPSBvcmlnaW5hbFNoZWV0LmRhdGVzLmluZGV4T2Yob3JpZ2luYWxEYXRlKTtcclxuICAgICAgICBsZXQgZW50cnlJbmRleCA9IC0xO1xyXG4gICAgICAgIGZvciAobGV0IHNoZWV0SW5kZXggPSB0aGlzLnNoZWV0cy5pbmRleE9mKG9yaWdpbmFsU2hlZXQpOyBzaGVldEluZGV4IDwgdGhpcy5zaGVldHMubGVuZ3RoOyBzaGVldEluZGV4KyspXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBjb25zdCBzaGVldCA9IHRoaXMuc2hlZXRzW3NoZWV0SW5kZXhdO1xyXG4gICAgICAgICAgICBpZiAoc2hlZXQuZGF0ZXMubGVuZ3RoIDwgMSkgYXdhaXQgdGhpcy5mZXRjaFNoZWV0KHNoZWV0LmlkKTtcclxuICAgICAgICAgICAgZm9yICg7IGRhdGVJbmRleCA8IHNoZWV0LmRhdGVzLmxlbmd0aDsgZGF0ZUluZGV4KyspXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGRhdGUgPSBzaGVldC5kYXRlc1tkYXRlSW5kZXhdO1xyXG4gICAgICAgICAgICAgICAgaWYgKGRhdGUuZW50cmllcy5sZW5ndGggPiAwKSByZXR1cm4gZW50cnlJbmRleCA8IDAgPyBkYXRlLmVudHJpZXNbZGF0ZS5lbnRyaWVzLmxlbmd0aCAtIDFdIDogZGF0ZS5lbnRyaWVzW2VudHJ5SW5kZXhdO1xyXG4gICAgICAgICAgICAgICAgZW50cnlJbmRleCA9IDA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZGF0ZUluZGV4ID0gMDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgYXN5bmMgbmV3RW50cnkoZGF0ZTogVGltZWxvZ0RhdGUpXHJcbiAgICB7XHJcbiAgICAgICAgY29uc3Qgc2hlZXQgPSB0aGlzLnNoZWV0cy5maW5kKHMgPT4gcy5kYXRlcy5zb21lKGQgPT4gZCA9PT0gZGF0ZSkpO1xyXG4gICAgICAgIGlmICghc2hlZXQpIHJldHVybjtcclxuICAgICAgICBjb25zdCBsYXN0ID0gYXdhaXQgdGhpcy5maW5kTGFzdEVudHJ5KGRhdGUpO1xyXG4gICAgICAgIGxldCBzdGFydEhvdXIgPSA4LjU7XHJcbiAgICAgICAgbGV0IGxlbmd0aEhvdXJzID0gTnVtYmVycy5yb3VuZChzaGVldC5ob3Vyc1BlckRheSwgMik7XHJcbiAgICAgICAgbGV0IHJlYXNvbklkID0gXCJcIjtcclxuICAgICAgICBpZiAobGFzdClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlmIChkYXRlLmVudHJpZXMuaW5jbHVkZXMobGFzdCkpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHN0YXJ0SG91ciA9IGxhc3Quc3RhcnRIb3VyICsgbGFzdC5sZW5ndGhIb3VycztcclxuICAgICAgICAgICAgICAgIGxlbmd0aEhvdXJzID0gMTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZWFzb25JZCA9IGxhc3QucmVhc29uSWQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGRhdGUuZW50cmllcy5wdXNoKHtcclxuICAgICAgICAgICAgc3RhcnRIb3VyLFxyXG4gICAgICAgICAgICBsZW5ndGhIb3VycyxcclxuICAgICAgICAgICAgcmVhc29uSWQsXHJcbiAgICAgICAgICAgIGNvbW1lbnQ6IG51bGwsXHJcbiAgICAgICAgICAgIGhhc0NvbW1lbnQ6IGZhbHNlXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgZGF0ZS5kaXJ0eSA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5xdWV1ZVNhdmUoKTtcclxuICAgICAgICB0aGlzLm9uRGF0ZVVwZGF0ZWQuZmlyZSh7IHNoZWV0LCBkYXRlIH0pO1xyXG4gICAgfVxyXG4gICAgcHVibGljIGFzeW5jIHBhc3RlRnJvbVN0YXJyZWQoZGF0ZTogVGltZWxvZ0RhdGUpXHJcbiAgICB7XHJcbiAgICAgICAgaWYgKGRhdGUuZW50cmllcy5sZW5ndGggPiAwKSByZXR1cm47XHJcbiAgICAgICAgY29uc3Qgc2hlZXQgPSB0aGlzLnNoZWV0cy5maW5kKHMgPT4gcy5kYXRlcy5zb21lKGQgPT4gZCA9PT0gZGF0ZSkpO1xyXG4gICAgICAgIGlmICghc2hlZXQpIHJldHVybjtcclxuICAgICAgICBjb25zdCBmYXZvcml0ZSA9IGF3YWl0IHRoaXMuZ2V0RmF2b3JpdGVkRGF0ZSgpO1xyXG4gICAgICAgIGlmICghZmF2b3JpdGUgfHwgZmF2b3JpdGUuZGF0ZSA9PT0gZGF0ZSkgcmV0dXJuO1xyXG5cclxuICAgICAgICBmb3IgKGNvbnN0IGVudHJ5IG9mIGZhdm9yaXRlLmRhdGUuZW50cmllcylcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGRhdGUuZW50cmllcy5wdXNoKHtcclxuICAgICAgICAgICAgICAgIHN0YXJ0SG91cjogZW50cnkuc3RhcnRIb3VyLFxyXG4gICAgICAgICAgICAgICAgbGVuZ3RoSG91cnM6IGVudHJ5Lmxlbmd0aEhvdXJzLFxyXG4gICAgICAgICAgICAgICAgcmVhc29uSWQ6IGVudHJ5LnJlYXNvbklkLFxyXG4gICAgICAgICAgICAgICAgY29tbWVudDogZW50cnkuY29tbWVudCxcclxuICAgICAgICAgICAgICAgIGhhc0NvbW1lbnQ6IGVudHJ5Lmhhc0NvbW1lbnRcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGRhdGUuZGlydHkgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMucXVldWVTYXZlKCk7XHJcbiAgICAgICAgdGhpcy5vbkRhdGVVcGRhdGVkLmZpcmUoeyBzaGVldCwgZGF0ZSB9KTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgcXVldWVTYXZlKClcclxuICAgIHtcclxuICAgICAgICB3aW5kb3cuY2xlYXJUaW1lb3V0KHRoaXMuc2F2ZUhhbmRsZSk7XHJcbiAgICAgICAgdGhpcy5zYXZlSGFuZGxlID0gd2luZG93LnNldFRpbWVvdXQoKCkgPT4gdGhpcy5zYXZlKCksIDUwMCk7XHJcbiAgICAgICAgdGhpcy5vblNhdmVTdGF0dXNVcGRhdGVkLmZpcmUoVGltZWxvZ1NhdmVTdGF0dXMuV2FpdGluZyk7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgYXN5bmMgc2F2ZSgpXHJcbiAgICB7XHJcbiAgICAgICAgYXdhaXQgV2FpdC51bnRpbCgoKSA9PiAhdGhpcy5zYXZpbmcpO1xyXG4gICAgICAgIHRoaXMuc2F2aW5nID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLm9uU2F2ZVN0YXR1c1VwZGF0ZWQuZmlyZShUaW1lbG9nU2F2ZVN0YXR1cy5TYXZpbmcpO1xyXG4gICAgICAgIGNvbnN0IG1pbmltdW1XYWl0ID0gV2FpdC5mb3IoMTAwKTtcclxuICAgICAgICBsZXQgZXJyb3IgPSBmYWxzZTtcclxuICAgICAgICBmb3IgKGNvbnN0IHNoZWV0IG9mIHRoaXMuc2hlZXRzKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZm9yIChjb25zdCBkYXRlIG9mIHNoZWV0LmRhdGVzKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZGF0ZS5kaXJ0eSlcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBIaUJvYi5zdWJtaXQoZGF0ZS5kYXRlLCBkYXRlLmVudHJpZXMpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHQpXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRlLmRpcnR5ID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgYXdhaXQgbWluaW11bVdhaXQ7XHJcbiAgICAgICAgdGhpcy5vblNhdmVTdGF0dXNVcGRhdGVkLmZpcmUoZXJyb3IgPyBUaW1lbG9nU2F2ZVN0YXR1cy5FcnJvciA6IFRpbWVsb2dTYXZlU3RhdHVzLlNhdmVkKTtcclxuICAgICAgICB0aGlzLnNhdmluZyA9IGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXRGbGV4UG9saWN5KClcclxuICAgIHtcclxuICAgICAgICByZXR1cm4geyBwcmV2aW91c0RheXNJbmNsdWRlZDogNyAqIDQsIGZsZXhXYXJuaW5nVGhyZXNob2xkOiA3ICogMyB9O1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBhc3luYyBjbGVhclNoZWV0QmFsYW5jZUNhY2hlKClcclxuICAgIHtcclxuICAgICAgICBpZiAoIXRoaXMuc2hlZXRzKSByZXR1cm47XHJcbiAgICAgICAgY29uc3QgdXNlcklkID0gYXdhaXQgSGlCb2IuZ2V0VXNlcklkKCk7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnNoZWV0cy5sZW5ndGg7IGkrKylcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGNvbnN0IHNoZWV0ID0gdGhpcy5zaGVldHNbaV07XHJcbiAgICAgICAgICAgIGlmICghc2hlZXQpIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICBjb25zdCBjYWNoZUtleSA9IGB0bF9jYWNoZWRfaG91cl9iYWxhbmNlc18ke3VzZXJJZH1fJHtzaGVldC5pZH1gO1xyXG4gICAgICAgICAgICBpZiAoc2hlZXQubG9ja2VkICYmIHdpbmRvdy5sb2NhbFN0b3JhZ2UuZ2V0SXRlbShjYWNoZUtleSkgIT09IG51bGwpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbShjYWNoZUtleSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBhc3luYyBnZXRDYWNoZWRCYWxhbmNlcygpOiBQcm9taXNlPFJlY29yZDxzdHJpbmcsIFRpbWVsb2dGbGV4RGF0ZVtdPj5cclxuICAgIHtcclxuICAgICAgICBjb25zdCBzaGVldHM6IFJlY29yZDxzdHJpbmcsIFRpbWVsb2dGbGV4RGF0ZVtdPiA9IHt9O1xyXG4gICAgICAgIGNvbnN0IHVzZXJJZCA9IGF3YWl0IEhpQm9iLmdldFVzZXJJZCgpO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSB0aGlzLnNoZWV0cy5sZW5ndGggLSAxOyBpID49IDA7IGktLSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGNvbnN0IHNoZWV0ID0gdGhpcy5zaGVldHNbaV07XHJcbiAgICAgICAgICAgIGlmICghc2hlZXQpIGNvbnRpbnVlO1xyXG5cclxuICAgICAgICAgICAgbGV0IHNoZWV0QmFsYW5jZXM6IHsgZGF0ZTogbnVtYmVyLCBiYWxhbmNlOiBudW1iZXIgfVtdID0gW107XHJcbiAgICAgICAgICAgIGNvbnN0IGNhY2hlS2V5ID0gYHRsX2NhY2hlZF9ob3VyX2JhbGFuY2VzXyR7dXNlcklkfV8ke3NoZWV0LmlkfWA7XHJcbiAgICAgICAgICAgIGlmIChzaGVldC5sb2NrZWQgJiYgd2luZG93LmxvY2FsU3RvcmFnZS5nZXRJdGVtKGNhY2hlS2V5KSAhPT0gbnVsbClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgc2hlZXRCYWxhbmNlcyA9IEpTT04ucGFyc2Uod2luZG93LmxvY2FsU3RvcmFnZS5nZXRJdGVtKGNhY2hlS2V5KSA/PyBcIltdXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgaWYgKHNoZWV0LmRhdGVzLmxlbmd0aCA8IDEpIGF3YWl0IHRoaXMuZmV0Y2hTaGVldChzaGVldC5pZCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoc2hlZXQuZGF0ZXMuc29tZShkID0+IGQuZW50cmllcy5sZW5ndGggPiAwICYmIGQuZW50cmllcy5zb21lKGUgPT4gZS5sZW5ndGhIb3VycyA+IDApKSlcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGRheSBvZiBzaGVldC5kYXRlcylcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHdvcmtlZEhvdXJzID0gTnVtYmVycy5zdW0oZGF5LmVudHJpZXMubWFwKGUgPT4gZS5sZW5ndGhIb3VycykpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBiYWxhbmNlID0gd29ya2VkSG91cnMgLSBkYXkuaG91cnNUb1dvcms7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNoZWV0QmFsYW5jZXMucHVzaCh7IGRhdGU6IGRheS5kYXRlLCBiYWxhbmNlIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHNoZWV0LmxvY2tlZCAmJiBzaGVldC5pZCA+IDApXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgd2luZG93LmxvY2FsU3RvcmFnZS5zZXRJdGVtKGNhY2hlS2V5LCBKU09OLnN0cmluZ2lmeShzaGVldEJhbGFuY2VzKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgc2hlZXRzW3NoZWV0LmlkLnRvU3RyaW5nKCldID0gc2hlZXRCYWxhbmNlcy5tYXAoZCA9PlxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGRhdGU6IGQuZGF0ZSxcclxuICAgICAgICAgICAgICAgICAgICBkYXRlU3RyaW5nOiBEYXRlcy5mb3JtYXQoZC5kYXRlLCBmYWxzZSksXHJcbiAgICAgICAgICAgICAgICAgICAgcmVhbEJhbGFuY2U6IGQuYmFsYW5jZSxcclxuICAgICAgICAgICAgICAgICAgICByZWFsbG9jYXRlZEJhbGFuY2U6IE51bWJlcnMucm91bmQoZC5iYWxhbmNlLCAzKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KS5zb3J0KChhLCBiKSA9PiBhLmRhdGUgLSBiLmRhdGUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gc2hlZXRzO1xyXG4gICAgfVxyXG4gICAgcHVibGljIGFzeW5jIGdldEZsZXhTdGF0dXMoKVxyXG4gICAge1xyXG4gICAgICAgIGNvbnN0IHBvbGljeSA9IHRoaXMuZ2V0RmxleFBvbGljeSgpO1xyXG5cclxuICAgICAgICBjb25zdCBjdXJyZW50RGF0ZVRpbWUgPSBEYXRlcy5wYXJzZShEYXRlcy5mb3JtYXQoRGF0ZS5ub3coKSwgZmFsc2UpKSA/PyAwO1xyXG4gICAgICAgIGNvbnN0IG92ZXJkdWVEYXRlVGltZSA9IERhdGVzLnBhcnNlKERhdGVzLmZvcm1hdChjdXJyZW50RGF0ZVRpbWUgLSAoMTAwMCAqIDYwICogNjAgKiAyNCAqIChwb2xpY3kucHJldmlvdXNEYXlzSW5jbHVkZWQgLSAxKSksIGZhbHNlKSkgPz8gMDtcclxuICAgICAgICBjb25zdCB3YXJuaW5nRGF0ZVRpbWUgPSBEYXRlcy5wYXJzZShEYXRlcy5mb3JtYXQoY3VycmVudERhdGVUaW1lIC0gKDEwMDAgKiA2MCAqIDYwICogMjQgKiAocG9saWN5LmZsZXhXYXJuaW5nVGhyZXNob2xkIC0gMSkpLCBmYWxzZSkpID8/IDA7XHJcblxyXG4gICAgICAgIGNvbnN0IGFsbERhdGVzOiBUaW1lbG9nRmxleERhdGVbXSA9IFtdO1xyXG4gICAgICAgIGxldCBiYWxhbmNlOiBudW1iZXIgPSAwO1xyXG4gICAgICAgIGlmICghIXRoaXMuc2hlZXRzKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgYXdhaXQgV2FpdC51bnRpbCgoKSA9PiAhdGhpcy5jYWxjdWxhdGluZ0ZsZXgpO1xyXG4gICAgICAgICAgICB0aGlzLmNhbGN1bGF0aW5nRmxleCA9IHRydWU7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBzaGVldHMgPSBhd2FpdCB0aGlzLmdldENhY2hlZEJhbGFuY2VzKCk7XHJcblxyXG4gICAgICAgICAgICAvL0NhbGN1bGF0ZSByZW1haW5pbmcgYmFsYW5jZXMgLyBjYW5jZWxsZWQgb3V0IGJhbGFuY2VzXHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSB0aGlzLnNoZWV0cy5sZW5ndGggLSAxOyBpID49IDA7IGktLSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc2hlZXQgPSBzaGVldHNbdGhpcy5zaGVldHNbaV0uaWRdO1xyXG4gICAgICAgICAgICAgICAgaWYgKHNoZWV0KSBhbGxEYXRlcy5wdXNoKC4uLnNoZWV0KTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy9SdW4gdGhlIHJlYWxsb2NhdGlvbiBhbGdvcml0aG1cclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhbGxEYXRlcy5sZW5ndGg7IGkrKylcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZGF0ZSA9IGFsbERhdGVzW2ldO1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBpOyBqKyspXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGUucmVhbGxvY2F0ZWRCYWxhbmNlID09PSAwKSBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBwcmV2RGF0ZSA9IGFsbERhdGVzW2pdO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGFtb3VudCA9IE1hdGgubWluKE1hdGguYWJzKGRhdGUucmVhbGxvY2F0ZWRCYWxhbmNlKSwgTWF0aC5hYnMocHJldkRhdGUucmVhbGxvY2F0ZWRCYWxhbmNlKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGUucmVhbGxvY2F0ZWRCYWxhbmNlIDwgMCAmJiBwcmV2RGF0ZS5yZWFsbG9jYXRlZEJhbGFuY2UgPiAwKVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcHJldkRhdGUucmVhbGxvY2F0ZWRCYWxhbmNlIC09IGFtb3VudDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0ZS5yZWFsbG9jYXRlZEJhbGFuY2UgKz0gYW1vdW50O1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChkYXRlLnJlYWxsb2NhdGVkQmFsYW5jZSA+IDAgJiYgcHJldkRhdGUucmVhbGxvY2F0ZWRCYWxhbmNlIDwgMClcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHByZXZEYXRlLnJlYWxsb2NhdGVkQmFsYW5jZSArPSBhbW91bnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGUucmVhbGxvY2F0ZWRCYWxhbmNlIC09IGFtb3VudDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgcHJldkRhdGUucmVhbGxvY2F0ZWRCYWxhbmNlID0gTnVtYmVycy5yb3VuZChwcmV2RGF0ZS5yZWFsbG9jYXRlZEJhbGFuY2UsIDMpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZGF0ZS5yZWFsbG9jYXRlZEJhbGFuY2UgPSBOdW1iZXJzLnJvdW5kKGRhdGUucmVhbGxvY2F0ZWRCYWxhbmNlLCAzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBiYWxhbmNlID0gTnVtYmVycy5zdW0oYWxsRGF0ZXMubWFwKGQgPT4gTnVtYmVycy5yb3VuZChkLnJlYWxsb2NhdGVkQmFsYW5jZSwgMykpKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuY2FsY3VsYXRpbmdGbGV4ID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGJhbGFuY2UsXHJcbiAgICAgICAgICAgIHVuYmFsYW5jZWREYXRlczogYWxsRGF0ZXMuZmlsdGVyKGQgPT4gZC5yZWFsbG9jYXRlZEJhbGFuY2UgIT09IDApLFxyXG4gICAgICAgICAgICBvdmVyZHVlRGF0ZXM6IGFsbERhdGVzLmZpbHRlcihkID0+IGQucmVhbGxvY2F0ZWRCYWxhbmNlICE9PSAwICYmIGQuZGF0ZSA8PSBvdmVyZHVlRGF0ZVRpbWUpLFxyXG4gICAgICAgICAgICB3YXJuaW5nRGF0ZXM6IGFsbERhdGVzLmZpbHRlcihkID0+IGQucmVhbGxvY2F0ZWRCYWxhbmNlICE9PSAwICYmIGQuZGF0ZSA8PSB3YXJuaW5nRGF0ZVRpbWUgJiYgZC5kYXRlID4gb3ZlcmR1ZURhdGVUaW1lKVxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG59IiwiaW1wb3J0IHsgVGltZWxvZ1VJIH0gZnJvbSBcIi4vVGltZWxvZ1VJXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgVGltZWxvZ1VJU2V0dGluZ3NCdXR0b25zXHJcbntcclxuICAgIHB1YmxpYyBzdGF0aWMgYnV0dG9ucyA9IFtcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGNsYXNzTmFtZTogXCJ0bC1zZXR0aW5ncy1yZWxvYWQtbG9ja2VkLXNoZWV0cy1idXR0b25cIixcclxuICAgICAgICAgICAgaWNvbjogXCJjYWNoZWRcIixcclxuICAgICAgICAgICAgdGV4dDogXCJSZWxvYWQgTG9ja2VkIFNoZWV0c1wiLFxyXG4gICAgICAgICAgICB0aXRsZTogXCJSZWNhbGN1bGF0ZXMgZmxleCBiYWxhbmNlIGZvciBhbGwgbG9ja2VkIHNoZWV0cy5cIixcclxuICAgICAgICAgICAgb25DbGljazogdWkgPT4gdWkubW9kZWw/LmNsZWFyU2hlZXRCYWxhbmNlQ2FjaGUoKS50aGVuKCgpID0+IHVpLnVwZGF0ZUJhbGFuY2UoKSlcclxuICAgICAgICB9XHJcbiAgICBdIGFzIHtcclxuICAgICAgICBjbGFzc05hbWU6IHN0cmluZyxcclxuICAgICAgICBpY29uOiBzdHJpbmcsXHJcbiAgICAgICAgdGV4dDogc3RyaW5nLFxyXG4gICAgICAgIHRpdGxlOiBzdHJpbmdcclxuICAgICAgICBvbkNsaWNrOiAodWk6IFRpbWVsb2dVSSkgPT4gdm9pZFxyXG4gICAgfVtdO1xyXG59IiwiaW1wb3J0IHsgSGlCb2JSZWFzb24gfSBmcm9tIFwiLi4vSGlCb2IvSGlCb2JUeXBlc1wiO1xyXG5pbXBvcnQgeyBEYXRlcyB9IGZyb20gXCIuLi9VdGlscy9EYXRlc1wiO1xyXG5pbXBvcnQgeyBFdmVudEhhbmRsZXIgfSBmcm9tIFwiLi4vVXRpbHMvRXZlbnRIYW5kbGVyXCI7XHJcbmltcG9ydCB7IEhvdXJTY2FsaW5nIH0gZnJvbSBcIi4uL1V0aWxzL0hvdXJTY2FsaW5nXCI7XHJcbmltcG9ydCB7IE1hdGVyaWFsSWNvbiB9IGZyb20gXCIuLi9VdGlscy9NYXRlcmlhbEljb25cIjtcclxuaW1wb3J0IHsgTnVtYmVycyB9IGZyb20gXCIuLi9VdGlscy9OdW1iZXJzXCI7XHJcbmltcG9ydCB7IFdhaXQgfSBmcm9tIFwiLi4vVXRpbHMvV2FpdFwiO1xyXG5pbXBvcnQgeyBUaW1lbG9nQ3NzIH0gZnJvbSBcIi4vVGltZWxvZ0Nzc1wiO1xyXG5pbXBvcnQgeyBUaW1lbG9nTW9kZWwgfSBmcm9tIFwiLi9UaW1lbG9nTW9kZWxcIjtcclxuaW1wb3J0IHsgVGltZWxvZ0RhdGUsIFRpbWVsb2dFbnRyeSwgVGltZWxvZ1NhdmVTdGF0dXMsIFRpbWVsb2dTaGVldCwgVGltZWxvZ1VJRGF0ZSBhcyBUaW1lbG9nVUlEYXRlQ29udGFpbmVyLCBUaW1lbG9nVUlXZWVrU3VtIH0gZnJvbSBcIi4vVGltZWxvZ1R5cGVzXCI7XHJcbmltcG9ydCB7IFRpbWVsb2dVSVNldHRpbmdzQnV0dG9ucyB9IGZyb20gXCIuL1RpbWVsb2dVSVNldHRpbmdzQnV0dG9uc1wiO1xyXG5cclxuZGVjbGFyZSB2YXIgSElCT0JfVVRJTFNfVkVSOiBzdHJpbmc7XHJcbmRlY2xhcmUgdmFyIEhJQk9CX1VUSUxTX0NIQU5HRUxPRzogeyB2ZXJzaW9uOiBzdHJpbmcsIHRleHQ6IHN0cmluZ1tdIH1bXTtcclxuXHJcbmV4cG9ydCBjbGFzcyBUaW1lbG9nVUlcclxue1xyXG5cclxuICAgIHByaXZhdGUgdGltZWxvZ1VJT3V0ZXI/OiBIVE1MRGl2RWxlbWVudDtcclxuICAgIHB1YmxpYyB0aW1lbG9nVUlJbm5lcj86IEhUTUxEaXZFbGVtZW50O1xyXG4gICAgcHJpdmF0ZSB0b2dnbGVCdXR0b24/OiBIVE1MQnV0dG9uRWxlbWVudDtcclxuICAgIHByaXZhdGUgZGFya01vZGVCdXR0b24/OiBIVE1MQnV0dG9uRWxlbWVudDtcclxuICAgIHB1YmxpYyBtb2RlbD86IFRpbWVsb2dNb2RlbDtcclxuXHJcbiAgICBwcml2YXRlIHNoZWV0RHJvcGRvd24/OiBIVE1MU2VsZWN0RWxlbWVudDtcclxuICAgIHByaXZhdGUgc2hlZXREcm9wZG93bk9wdGlvbnM6IHsgc2hlZXQ6IFRpbWVsb2dTaGVldCwgZWxlbWVudDogSFRNTE9wdGlvbkVsZW1lbnQgfVtdID0gW107XHJcbiAgICBwcml2YXRlIHNlbGVjdGVkU2hlZXQ/OiBUaW1lbG9nU2hlZXQ7XHJcblxyXG4gICAgcHJpdmF0ZSBzaGVldENvbnRhaW5lcj86IEhUTUxEaXZFbGVtZW50O1xyXG4gICAgcHJpdmF0ZSBzaGVldERhdGVzOiBUaW1lbG9nVUlEYXRlQ29udGFpbmVyW10gPSBbXTtcclxuICAgIHByaXZhdGUgd2Vla1N1bXM6IFRpbWVsb2dVSVdlZWtTdW1bXSA9IFtdO1xyXG4gICAgcHJpdmF0ZSBzYXZlU3RhdHVzPzogSFRNTFNwYW5FbGVtZW50O1xyXG5cclxuICAgIHByaXZhdGUgYmFsYW5jZUxhYmVsPzogSFRNTERpdkVsZW1lbnQ7XHJcbiAgICBwcml2YXRlIGJhbGFuY2VXYXJuaW5nPzogSFRNTERpdkVsZW1lbnQ7XHJcblxyXG4gICAgcHJpdmF0ZSByZWFzb25zOiBIaUJvYlJlYXNvbltdID0gW107XHJcblxyXG4gICAgcHJpdmF0ZSBvbkRhcmtNb2RlQ2hhbmdlID0gbmV3IEV2ZW50SGFuZGxlcjxib29sZWFuPigpO1xyXG5cclxuICAgIHB1YmxpYyBzdGF0aWMgb25TaG93OiBFdmVudEhhbmRsZXI8VGltZWxvZ1VJPiA9IG5ldyBFdmVudEhhbmRsZXIoKTtcclxuXHJcbiAgICBwdWJsaWMgY29uc3RydWN0b3IoKVxyXG4gICAge1xyXG4gICAgICAgICh3aW5kb3cgYXMgYW55KS50aW1lbG9nID0gdGhpcztcclxuICAgICAgICB0aGlzLmFkZEJ1dHRvbigpO1xyXG4gICAgfVxyXG4gICAgcHJpdmF0ZSBhc3luYyBhZGRCdXR0b24oKVxyXG4gICAge1xyXG4gICAgICAgIHdoaWxlICh0cnVlKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgY29uc3QgcGFyZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcImRpdi5hcHAtY29udGVudCA+IGFwcC10b3AtYmFyLmFwcC10b3AtYmFyID4gZGl2LmFjdGlvbnNcIik7XHJcbiAgICAgICAgICAgIGlmICghcGFyZW50KVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBhd2FpdCBXYWl0LmZvcigxKTtcclxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLnRvZ2dsZUJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIik7XHJcbiAgICAgICAgICAgIHRoaXMudG9nZ2xlQnV0dG9uLmNsYXNzTmFtZSA9IFwidGwtdG9nZ2xlLWJ0blwiO1xyXG4gICAgICAgICAgICB0aGlzLnRvZ2dsZUJ1dHRvbi5hcHBlbmRDaGlsZChNYXRlcmlhbEljb24uZ2V0KFwic2VudGltZW50X3Zlcnlfc2F0aXNmaWVkXCIpKTtcclxuICAgICAgICAgICAgdGhpcy50b2dnbGVCdXR0b24udGl0bGUgPSBcIkhpQm9iIFV0aWxpdGllc1wiO1xyXG4gICAgICAgICAgICB0aGlzLnRvZ2dsZUJ1dHRvbi5vbmNsaWNrID0gKCkgPT4gdGhpcy50b2dnbGVWaXNpYmxlKCk7XHJcbiAgICAgICAgICAgIHBhcmVudC5hcHBlbmRDaGlsZCh0aGlzLnRvZ2dsZUJ1dHRvbik7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmNyZWF0ZVVJKCk7XHJcblxyXG4gICAgICAgICAgICBhd2FpdCB0aGlzLmNyZWF0ZU1vZGVsKCk7XHJcblxyXG4gICAgICAgICAgICBpZiAobG9jYXRpb24uaGFzaCA9PT0gXCIjdGwtdWlcIilcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdGhpcy50b2dnbGVWaXNpYmxlKCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMub25EYXJrTW9kZUNoYW5nZS5maXJlKHRoaXMuaXNEYXJrTW9kZSgpKTtcclxuXHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHByaXZhdGUgdG9nZ2xlVmlzaWJsZSgpXHJcbiAgICB7XHJcbiAgICAgICAgaWYgKCF0aGlzLnRpbWVsb2dVSU91dGVyKSByZXR1cm47XHJcbiAgICAgICAgaWYgKHRoaXMudGltZWxvZ1VJT3V0ZXIuc3R5bGUuZGlzcGxheSA9PT0gXCJub25lXCIpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aGlzLnRpbWVsb2dVSU91dGVyLnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XHJcbiAgICAgICAgICAgIGxvY2F0aW9uLmhhc2ggPSBcIiN0bC11aVwiO1xyXG4gICAgICAgICAgICBkb2N1bWVudC5ib2R5LnN0eWxlLm92ZXJmbG93ID0gXCJoaWRkZW5cIjtcclxuICAgICAgICAgICAgaWYgKHRoaXMuc2hlZXRDb250YWluZXIpIHRoaXMuc2hlZXRDb250YWluZXIuaW5uZXJIVE1MID0gXCJcIjtcclxuICAgICAgICAgICAgdGhpcy5tb2RlbD8uZmV0Y2hTaGVldHMoKTtcclxuICAgICAgICAgICAgVGltZWxvZ1VJLm9uU2hvdy5maXJlKHRoaXMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aGlzLnRpbWVsb2dVSU91dGVyLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcclxuICAgICAgICAgICAgbG9jYXRpb24uaGFzaCA9IFwiXCI7XHJcbiAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuc3R5bGUub3ZlcmZsb3cgPSBcImluaXRpYWxcIjtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBwcml2YXRlIGlzRGFya01vZGUoKVxyXG4gICAge1xyXG4gICAgICAgIHJldHVybiBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShcInRsX2RhcmtfbW9kZVwiKSA9PT0gXCJ0cnVlXCI7XHJcbiAgICB9XHJcbiAgICBwcml2YXRlIHRvZ2dsZURhcmtNb2RlKClcclxuICAgIHtcclxuICAgICAgICBpZiAodGhpcy5pc0RhcmtNb2RlKCkpIGxvY2FsU3RvcmFnZS5zZXRJdGVtKFwidGxfZGFya19tb2RlXCIsIFwiZmFsc2VcIik7XHJcbiAgICAgICAgZWxzZSBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShcInRsX2RhcmtfbW9kZVwiLCBcInRydWVcIik7XHJcbiAgICAgICAgdGhpcy5vbkRhcmtNb2RlQ2hhbmdlLmZpcmUodGhpcy5pc0RhcmtNb2RlKCkpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgY3JlYXRlVUkoKVxyXG4gICAge1xyXG4gICAgICAgIGNvbnN0IHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xyXG4gICAgICAgIHN0eWxlLmlubmVySFRNTCA9IFRpbWVsb2dDc3M7XHJcbiAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChzdHlsZSk7XHJcblxyXG4gICAgICAgIHRoaXMudGltZWxvZ1VJT3V0ZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4gICAgICAgIHRoaXMudGltZWxvZ1VJT3V0ZXIuY2xhc3NOYW1lID0gXCJ0bC11aVwiO1xyXG4gICAgICAgIHRoaXMudGltZWxvZ1VJT3V0ZXIuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xyXG4gICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kKHRoaXMudGltZWxvZ1VJT3V0ZXIpO1xyXG5cclxuICAgICAgICB0aGlzLnRpbWVsb2dVSUlubmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgICAgICB0aGlzLnRpbWVsb2dVSUlubmVyLmNsYXNzTmFtZSA9IFwidGwtdWktaW5uZXJcIjtcclxuICAgICAgICB0aGlzLnRpbWVsb2dVSU91dGVyLmFwcGVuZCh0aGlzLnRpbWVsb2dVSUlubmVyKTtcclxuXHJcbiAgICAgICAgY29uc3QgY2xvc2VCdXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIpO1xyXG4gICAgICAgIGNsb3NlQnV0dG9uLmNsYXNzTmFtZSA9IFwidGwtY2xvc2UtYnRuXCI7XHJcbiAgICAgICAgY2xvc2VCdXR0b24uYXBwZW5kQ2hpbGQoTWF0ZXJpYWxJY29uLmdldChcImNsb3NlXCIpKTtcclxuICAgICAgICBjbG9zZUJ1dHRvbi5vbmNsaWNrID0gKCkgPT4gdGhpcy50b2dnbGVWaXNpYmxlKCk7XHJcbiAgICAgICAgdGhpcy50aW1lbG9nVUlJbm5lci5hcHBlbmRDaGlsZChjbG9zZUJ1dHRvbik7XHJcblxyXG4gICAgICAgIHRoaXMuZGFya01vZGVCdXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIpO1xyXG4gICAgICAgIHRoaXMuZGFya01vZGVCdXR0b24uY2xhc3NOYW1lID0gXCJ0bC1kYXJrLW1vZGUtYnRuXCI7XHJcbiAgICAgICAgdGhpcy5kYXJrTW9kZUJ1dHRvbi5vbmNsaWNrID0gKCkgPT4gdGhpcy50b2dnbGVEYXJrTW9kZSgpO1xyXG4gICAgICAgIHRoaXMudGltZWxvZ1VJSW5uZXIuYXBwZW5kQ2hpbGQodGhpcy5kYXJrTW9kZUJ1dHRvbik7XHJcbiAgICAgICAgdGhpcy5vbkRhcmtNb2RlQ2hhbmdlLm9uKChkYXJrKSA9PlxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaWYgKGRhcmspIHRoaXMudGltZWxvZ1VJT3V0ZXI/LmNsYXNzTGlzdC5hZGQoXCJ0bC1kYXJrXCIpO1xyXG4gICAgICAgICAgICBlbHNlIHRoaXMudGltZWxvZ1VJT3V0ZXI/LmNsYXNzTGlzdC5yZW1vdmUoXCJ0bC1kYXJrXCIpO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5kYXJrTW9kZUJ1dHRvbilcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kYXJrTW9kZUJ1dHRvbi5pbm5lckhUTUwgPSBcIlwiO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kYXJrTW9kZUJ1dHRvbi5hcHBlbmQoZGFyayA/IE1hdGVyaWFsSWNvbi5nZXQoXCJsaWdodF9tb2RlXCIpIDogTWF0ZXJpYWxJY29uLmdldChcImRhcmtfbW9kZVwiKSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sIHRoaXMpO1xyXG5cclxuICAgICAgICBjb25zdCBzZXR0aW5zV2luZG93ID0gdGhpcy5jcmVhdGVTZXR0aW5nc1dpbmRvdygpO1xyXG4gICAgICAgIHRoaXMudGltZWxvZ1VJSW5uZXIuYXBwZW5kQ2hpbGQoc2V0dGluc1dpbmRvdyk7XHJcblxyXG4gICAgICAgIGNvbnN0IHNldHRpbmdzQnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgICAgICBzZXR0aW5nc0J1dHRvbi5hcHBlbmQoTWF0ZXJpYWxJY29uLmdldChcInNldHRpbmdzXCIsIHRydWUpKTtcclxuICAgICAgICBzZXR0aW5nc0J1dHRvbi5hcHBlbmQoXCIgXCIgKyBISUJPQl9VVElMU19WRVIpO1xyXG4gICAgICAgIHNldHRpbmdzQnV0dG9uLmNsYXNzTmFtZSA9IFwidGwtdmVyc2lvbi1udW1iZXJcIjtcclxuICAgICAgICBzZXR0aW5nc0J1dHRvbi5vbmNsaWNrID0gKCkgPT4gc2V0dGluc1dpbmRvdy5jbGFzc0xpc3QucmVtb3ZlKFwidGwtc2V0dGluZ3MtaGlkZGVuXCIpO1xyXG4gICAgICAgIHNldHRpbmdzQnV0dG9uLnN0eWxlLmN1cnNvciA9IFwicG9pbnRlclwiO1xyXG4gICAgICAgIHNldHRpbmdzQnV0dG9uLnN0eWxlLnRleHREZWNvcmF0aW9uID0gXCJ1bmRlcmxpbmVcIjtcclxuICAgICAgICB0aGlzLnRpbWVsb2dVSUlubmVyLmFwcGVuZENoaWxkKHNldHRpbmdzQnV0dG9uKTtcclxuXHJcblxyXG4gICAgICAgIGNvbnN0IHNoZWV0RHJvcGRvd25MYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpO1xyXG4gICAgICAgIHNoZWV0RHJvcGRvd25MYWJlbC5pbm5lclRleHQgPSBcIlNoZWV0OlwiO1xyXG4gICAgICAgIHRoaXMudGltZWxvZ1VJSW5uZXIuYXBwZW5kQ2hpbGQoc2hlZXREcm9wZG93bkxhYmVsKTtcclxuXHJcbiAgICAgICAgdGhpcy5zaGVldERyb3Bkb3duID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNlbGVjdFwiKTtcclxuICAgICAgICB0aGlzLnNoZWV0RHJvcGRvd24uY2xhc3NOYW1lID0gXCJ0bC1zaGVldC1zZWxlY3RcIjtcclxuICAgICAgICB0aGlzLnNoZWV0RHJvcGRvd24ub25jaGFuZ2UgPSAoKSA9PiB0aGlzLm9uU2VsZWN0ZWRTaGVldENoYW5nZSgpO1xyXG4gICAgICAgIHRoaXMudGltZWxvZ1VJSW5uZXIuYXBwZW5kQ2hpbGQodGhpcy5zaGVldERyb3Bkb3duKTtcclxuXHJcbiAgICAgICAgdGhpcy5zYXZlU3RhdHVzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIik7XHJcbiAgICAgICAgdGhpcy5zYXZlU3RhdHVzLmNsYXNzTmFtZSA9IFwidGwtc2F2ZS1zdGF0dXNcIjtcclxuICAgICAgICB0aGlzLnNhdmVTdGF0dXMub25jbGljayA9ICgpID0+IHRoaXMub25TYXZlU3RhdHVzQ2xpY2soKTtcclxuICAgICAgICB0aGlzLnRpbWVsb2dVSUlubmVyLmFwcGVuZCh0aGlzLnNhdmVTdGF0dXMpO1xyXG5cclxuICAgICAgICBjb25zdCBiYWxhbmNlUGFyZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgICAgICBiYWxhbmNlUGFyZW50LmNsYXNzTmFtZSA9IFwidGwtYmFsYW5jZVwiO1xyXG4gICAgICAgIHRoaXMudGltZWxvZ1VJSW5uZXIuYXBwZW5kKGJhbGFuY2VQYXJlbnQpO1xyXG5cclxuICAgICAgICB0aGlzLmJhbGFuY2VMYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcbiAgICAgICAgdGhpcy5iYWxhbmNlTGFiZWwuaW5uZXJUZXh0ID0gXCJCYWxhbmNlOiBcIjtcclxuICAgICAgICB0aGlzLmJhbGFuY2VMYWJlbC5jbGFzc05hbWUgPSBcInRsLWJhbGFuY2UtbGFiZWxcIjtcclxuICAgICAgICBiYWxhbmNlUGFyZW50LmFwcGVuZCh0aGlzLmJhbGFuY2VMYWJlbCk7XHJcblxyXG4gICAgICAgIHRoaXMuYmFsYW5jZVdhcm5pbmcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4gICAgICAgIHRoaXMuYmFsYW5jZVdhcm5pbmcuY2xhc3NOYW1lID0gXCJ0bC1iYWxhbmNlLXdhcm5pbmcgdGwtd2FybmluZyB0bC1oaWRkZW5cIjtcclxuICAgICAgICBiYWxhbmNlUGFyZW50LmFwcGVuZCh0aGlzLmJhbGFuY2VXYXJuaW5nKTtcclxuXHJcbiAgICAgICAgdGhpcy5zaGVldENvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcbiAgICAgICAgdGhpcy5zaGVldENvbnRhaW5lci5jbGFzc05hbWUgPSBcInRsLXNoZWV0XCI7XHJcbiAgICAgICAgdGhpcy50aW1lbG9nVUlJbm5lci5hcHBlbmRDaGlsZCh0aGlzLnNoZWV0Q29udGFpbmVyKTtcclxuXHJcbiAgICB9XHJcbiAgICBwcml2YXRlIGNyZWF0ZVNldHRpbmdzV2luZG93KClcclxuICAgIHtcclxuICAgICAgICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgICAgICBlbGVtZW50LmNsYXNzTmFtZSA9IFwidGwtc2V0dGluZ3MgdGwtc2V0dGluZ3MtaGlkZGVuXCI7XHJcbiAgICAgICAgY29uc3QgYmFjayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcbiAgICAgICAgYmFjay5jbGFzc05hbWUgPSBcInRsLXNldHRpbmdzLWJhY2tcIjtcclxuICAgICAgICBlbGVtZW50LmFwcGVuZChiYWNrKTtcclxuICAgICAgICBiYWNrLm9uY2xpY2sgPSAoKSA9PiBlbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJ0bC1zZXR0aW5ncy1oaWRkZW5cIik7XHJcblxyXG4gICAgICAgIGNvbnN0IGlubmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgICAgICBpbm5lci5jbGFzc05hbWUgPSBcInRsLXNldHRpbmdzLWlubmVyXCI7XHJcbiAgICAgICAgZWxlbWVudC5hcHBlbmQoaW5uZXIpO1xyXG5cclxuICAgICAgICBjb25zdCBzZXR0aW5nc0VsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4gICAgICAgIHNldHRpbmdzRWxlbWVudC5jbGFzc05hbWUgPSBcInRsLXNldHRpbmdzLXZlcnNpb25cIjtcclxuICAgICAgICBpbm5lci5hcHBlbmQoc2V0dGluZ3NFbGVtZW50KTtcclxuXHJcbiAgICAgICAgZm9yIChjb25zdCBidXR0b24gb2YgVGltZWxvZ1VJU2V0dGluZ3NCdXR0b25zLmJ1dHRvbnMpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiKTtcclxuICAgICAgICAgICAgZWxlbWVudC5jbGFzc05hbWUgPSBidXR0b24uY2xhc3NOYW1lO1xyXG4gICAgICAgICAgICBlbGVtZW50LmFwcGVuZChNYXRlcmlhbEljb24uZ2V0KGJ1dHRvbi5pY29uKSk7XHJcbiAgICAgICAgICAgIGVsZW1lbnQuYXBwZW5kKGJ1dHRvbi50ZXh0KTtcclxuICAgICAgICAgICAgaWYgKGJ1dHRvbi50aXRsZSkgZWxlbWVudC5zdHlsZS5jdXJzb3IgPSBcImhlbHBcIjtcclxuICAgICAgICAgICAgZWxlbWVudC50aXRsZSA9IGJ1dHRvbi50aXRsZTtcclxuICAgICAgICAgICAgZWxlbWVudC5vbmNsaWNrID0gKCkgPT4gYnV0dG9uLm9uQ2xpY2sodGhpcyk7XHJcbiAgICAgICAgICAgIHNldHRpbmdzRWxlbWVudC5hcHBlbmRDaGlsZChlbGVtZW50KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IGNoYW5nZWxvZyA9IEhJQk9CX1VUSUxTX0NIQU5HRUxPRztcclxuICAgICAgICBmb3IgKGNvbnN0IHZlcnNpb24gb2YgY2hhbmdlbG9nKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgY29uc3QgdmVyc2lvbkVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4gICAgICAgICAgICB2ZXJzaW9uRWxlbWVudC5jbGFzc05hbWUgPSBcInRsLXNldHRpbmdzLXZlcnNpb25cIjtcclxuICAgICAgICAgICAgaW5uZXIuYXBwZW5kKHZlcnNpb25FbGVtZW50KTtcclxuICAgICAgICAgICAgY29uc3QgdmVyc2lvblRpdGxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgICAgICAgICAgdmVyc2lvblRpdGxlLmNsYXNzTmFtZSA9IFwidGwtc2V0dGluZ3MtdGl0bGVcIjtcclxuICAgICAgICAgICAgdmVyc2lvblRpdGxlLmlubmVyVGV4dCA9IHZlcnNpb24udmVyc2lvbjtcclxuICAgICAgICAgICAgdmVyc2lvbkVsZW1lbnQuYXBwZW5kKHZlcnNpb25UaXRsZSk7XHJcbiAgICAgICAgICAgIGNvbnN0IGxpc3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidWxcIik7XHJcbiAgICAgICAgICAgIGxpc3QuY2xhc3NOYW1lID0gXCJ0bC1zZXR0aW5ncy1saXN0XCI7XHJcbiAgICAgICAgICAgIHZlcnNpb25FbGVtZW50LmFwcGVuZChsaXN0KTtcclxuICAgICAgICAgICAgZm9yIChjb25zdCB0ZXh0IG9mIHZlcnNpb24udGV4dClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdGV4dEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGlcIik7XHJcbiAgICAgICAgICAgICAgICB0ZXh0RWxlbWVudC5pbm5lclRleHQgPSB0ZXh0O1xyXG4gICAgICAgICAgICAgICAgbGlzdC5hcHBlbmQodGV4dEVsZW1lbnQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBlbGVtZW50O1xyXG4gICAgfVxyXG4gICAgcHJpdmF0ZSBhc3luYyBjcmVhdGVNb2RlbCgpXHJcbiAgICB7XHJcbiAgICAgICAgaWYgKHRoaXMubW9kZWwpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aGlzLm1vZGVsLm9uRGF0ZVVwZGF0ZWQub2ZmKHRoaXMub25EYXRlVXBkYXRlZCwgdGhpcyk7XHJcbiAgICAgICAgICAgIHRoaXMubW9kZWwub25SZWFzb25zVXBkYXRlZC5vZmYodGhpcy5vblJlYXNvbnNVcGRhdGVkLCB0aGlzKTtcclxuICAgICAgICAgICAgdGhpcy5tb2RlbC5vblNhdmVTdGF0dXNVcGRhdGVkLm9mZih0aGlzLm9uU2F2ZVN0YXR1c1VwZGF0ZWQsIHRoaXMpO1xyXG4gICAgICAgICAgICB0aGlzLm1vZGVsLm9uU2hlZXRVcGRhdGVkLm9mZih0aGlzLm9uU2hlZXRVcGRhdGVkLCB0aGlzKTtcclxuICAgICAgICAgICAgdGhpcy5tb2RlbC5vblNoZWV0c1VwZGF0ZWQub2ZmKHRoaXMub25TaGVldHNVcGRhdGVkLCB0aGlzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5tb2RlbCA9IG5ldyBUaW1lbG9nTW9kZWwoKTtcclxuICAgICAgICB0aGlzLm1vZGVsLm9uRGF0ZVVwZGF0ZWQub24odGhpcy5vbkRhdGVVcGRhdGVkLCB0aGlzKTtcclxuICAgICAgICB0aGlzLm1vZGVsLm9uUmVhc29uc1VwZGF0ZWQub24odGhpcy5vblJlYXNvbnNVcGRhdGVkLCB0aGlzKTtcclxuICAgICAgICB0aGlzLm1vZGVsLm9uU2F2ZVN0YXR1c1VwZGF0ZWQub24odGhpcy5vblNhdmVTdGF0dXNVcGRhdGVkLCB0aGlzKTtcclxuICAgICAgICB0aGlzLm1vZGVsLm9uU2hlZXRVcGRhdGVkLm9uKHRoaXMub25TaGVldFVwZGF0ZWQsIHRoaXMpO1xyXG4gICAgICAgIHRoaXMubW9kZWwub25TaGVldHNVcGRhdGVkLm9uKHRoaXMub25TaGVldHNVcGRhdGVkLCB0aGlzKTtcclxuXHJcbiAgICAgICAgYXdhaXQgdGhpcy5tb2RlbC5pbml0aWFsaXplKCk7XHJcbiAgICB9XHJcbiAgICBwcml2YXRlIGdldERhdGVDb250YWluZXIoZGF0YTogeyBzaGVldDogVGltZWxvZ1NoZWV0LCBkYXRlOiBUaW1lbG9nRGF0ZSB9KVxyXG4gICAge1xyXG4gICAgICAgIGlmICh0aGlzLnNlbGVjdGVkU2hlZXQgPT09IGRhdGEuc2hlZXQgJiYgdGhpcy5zaGVldENvbnRhaW5lcilcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGxldCBkYXRlQ29udGFpbmVyID0gdGhpcy5zaGVldERhdGVzLmZpbmQoZCA9PiBkLmRhdGUgPT09IGRhdGEuZGF0ZSk7XHJcbiAgICAgICAgICAgIGlmICghZGF0ZUNvbnRhaW5lcilcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgZGF0ZUNvbnRhaW5lciA9IHtcclxuICAgICAgICAgICAgICAgICAgICBkYXRlOiBkYXRhLmRhdGUsXHJcbiAgICAgICAgICAgICAgICAgICAgcGFyZW50OiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLFxyXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKSxcclxuICAgICAgICAgICAgICAgICAgICBlbnRyaWVzOiBbXSxcclxuICAgICAgICAgICAgICAgICAgICBzdGFyQnV0dG9uOiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIpLFxyXG4gICAgICAgICAgICAgICAgICAgIHBhc3RlQnV0dG9uOiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIpLFxyXG4gICAgICAgICAgICAgICAgICAgIHdlZWtlbmREZXNjcmlwdGlvbjogZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKVxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2hlZXREYXRlcy5wdXNoKGRhdGVDb250YWluZXIpO1xyXG4gICAgICAgICAgICAgICAgZGF0ZUNvbnRhaW5lci5wYXJlbnQuY2xhc3NOYW1lID0gXCJ0bC1kYXRlXCI7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNoZWV0Q29udGFpbmVyLmFwcGVuZENoaWxkKGRhdGVDb250YWluZXIucGFyZW50KTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAobmV3IERhdGUoZGF0YS5kYXRlLmRhdGUpLmdldERheSgpID09PSAxKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHdlZWtTZXBlcmF0b3IgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIHdlZWtTZXBlcmF0b3IuY2xhc3NOYW1lID0gXCJ0bC13ZWVrLXNlcGVyYXRvclwiO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2hlZXRDb250YWluZXIuYXBwZW5kQ2hpbGQod2Vla1NlcGVyYXRvcik7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgZGF0ZUNvbnRhaW5lci5wYXJlbnQuYXBwZW5kKGRhdGVDb250YWluZXIuc3RhckJ1dHRvbik7XHJcbiAgICAgICAgICAgICAgICBkYXRlQ29udGFpbmVyLnN0YXJCdXR0b24ub25jbGljayA9ICgpID0+IHRoaXMubW9kZWw/LnNldEZhdm9yaXRlZERhdGUoZGF0YS5kYXRlKTtcclxuICAgICAgICAgICAgICAgIGRhdGVDb250YWluZXIuc3RhckJ1dHRvbi5jbGFzc05hbWUgPSBcInRsLXN0YXItYnV0dG9uIHRsLXNob3ctb24taG92ZXJcIjtcclxuICAgICAgICAgICAgICAgIGRhdGVDb250YWluZXIuc3RhckJ1dHRvbi50aXRsZSA9IFwiRmF2b3JpdGUgRGF5XCI7XHJcblxyXG4gICAgICAgICAgICAgICAgZGF0ZUNvbnRhaW5lci50aXRsZS5jbGFzc05hbWUgPSBcInRsLWRhdGUtbGFiZWxcIjtcclxuICAgICAgICAgICAgICAgIGRhdGVDb250YWluZXIudGl0bGUuaW5uZXJUZXh0ID0gbmV3IERhdGUoZGF0YS5kYXRlLmRhdGUpLnRvRGF0ZVN0cmluZygpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGRhdGEuZGF0ZS5ub25Xb3JraW5nRGF5KSBkYXRlQ29udGFpbmVyLnRpdGxlLmNsYXNzTGlzdC5hZGQoXCJ0bC1kYXRlLWxhYmVsLXdlZWtlbmRcIik7XHJcbiAgICAgICAgICAgICAgICBkYXRlQ29udGFpbmVyLnBhcmVudC5hcHBlbmQoZGF0ZUNvbnRhaW5lci50aXRsZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgZGF0ZUNvbnRhaW5lci53ZWVrZW5kRGVzY3JpcHRpb24uY2xhc3NOYW1lID0gXCJ0bC13ZWVrZW5kLWRlc2NyaXB0aW9uXCI7XHJcbiAgICAgICAgICAgICAgICBkYXRlQ29udGFpbmVyLnBhcmVudC5hcHBlbmQoZGF0ZUNvbnRhaW5lci53ZWVrZW5kRGVzY3JpcHRpb24pO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICghZGF0YS5zaGVldC5sb2NrZWQpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYWRkID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiKTtcclxuICAgICAgICAgICAgICAgICAgICBhZGQuYXBwZW5kQ2hpbGQoTWF0ZXJpYWxJY29uLmdldChcImFkZFwiKSlcclxuICAgICAgICAgICAgICAgICAgICBhZGQuY2xhc3NOYW1lID0gXCJ0bC1hZGQtZW50cnktYnRuIHRsLXNob3ctb24taG92ZXJcIjtcclxuICAgICAgICAgICAgICAgICAgICBhZGQub25jbGljayA9ICgpID0+IHRoaXMubW9kZWw/Lm5ld0VudHJ5KGRhdGEuZGF0ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgZGF0ZUNvbnRhaW5lci5wYXJlbnQuYXBwZW5kKGFkZCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGRhdGVDb250YWluZXIucGFzdGVCdXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGRhdGVDb250YWluZXIucGFzdGVCdXR0b24uYXBwZW5kQ2hpbGQoTWF0ZXJpYWxJY29uLmdldChcInN3aXRjaF9hY2Nlc3Nfc2hvcnRjdXRfYWRkXCIpKVxyXG4gICAgICAgICAgICAgICAgICAgIGRhdGVDb250YWluZXIucGFzdGVCdXR0b24udGl0bGUgPSBcIlBhc3RlIGZyb20gRmF2b3JpdGUgRGF5XCI7XHJcbiAgICAgICAgICAgICAgICAgICAgZGF0ZUNvbnRhaW5lci5wYXN0ZUJ1dHRvbi5jbGFzc05hbWUgPSBcInRsLXBhc3RlLWJ0biB0bC1zaG93LW9uLWhvdmVyXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgZGF0ZUNvbnRhaW5lci5wYXN0ZUJ1dHRvbi5vbmNsaWNrID0gKCkgPT4gdGhpcy5tb2RlbD8ucGFzdGVGcm9tU3RhcnJlZChkYXRhLmRhdGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIGRhdGVDb250YWluZXIucGFyZW50LmFwcGVuZChkYXRlQ29udGFpbmVyLnBhc3RlQnV0dG9uKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRoaXMuYWRkVG9XZWVrU3VtKGRhdGVDb250YWluZXIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBkYXRlQ29udGFpbmVyO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuICAgIHByaXZhdGUgZ2V0RW50cnlDb250YWluZXIoZGF0YTogeyBzaGVldDogVGltZWxvZ1NoZWV0LCBkYXRlOiBUaW1lbG9nRGF0ZSB9LCBkYXRlQ29udGFpbmVyOiBUaW1lbG9nVUlEYXRlQ29udGFpbmVyLCBlbnRyeTogVGltZWxvZ0VudHJ5KVxyXG4gICAge1xyXG4gICAgICAgIGxldCBlbnRyeUNvbnRhaW5lciA9IGRhdGVDb250YWluZXIuZW50cmllcy5maW5kKHAgPT4gcC5lbnRyeSA9PT0gZW50cnkpO1xyXG4gICAgICAgIGlmICghZW50cnlDb250YWluZXIpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBlbnRyeUNvbnRhaW5lciA9IHtcclxuICAgICAgICAgICAgICAgIGVudHJ5LFxyXG4gICAgICAgICAgICAgICAgcGFyZW50OiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLFxyXG4gICAgICAgICAgICAgICAgc3RhcnRIb3VyOiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIiksXHJcbiAgICAgICAgICAgICAgICBlbmRIb3VyOiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIiksXHJcbiAgICAgICAgICAgICAgICBsZW5ndGg6IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKSxcclxuICAgICAgICAgICAgICAgIHJlYXNvbjogZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNlbGVjdFwiKSxcclxuICAgICAgICAgICAgICAgIGNvbW1lbnQ6IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKSxcclxuICAgICAgICAgICAgICAgIGNvbW1lbnRCdXR0b246IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIiksXHJcbiAgICAgICAgICAgICAgICBub1JlYXNvbldhcm5pbmc6IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIilcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgZGF0ZUNvbnRhaW5lci5lbnRyaWVzLnB1c2goZW50cnlDb250YWluZXIpO1xyXG5cclxuICAgICAgICAgICAgZW50cnlDb250YWluZXIucGFyZW50LmNsYXNzTmFtZSA9IFwidGwtZW50cnlcIjtcclxuICAgICAgICAgICAgZGF0ZUNvbnRhaW5lci5wYXJlbnQuYXBwZW5kQ2hpbGQoZW50cnlDb250YWluZXIucGFyZW50KTtcclxuXHJcbiAgICAgICAgICAgIGVudHJ5Q29udGFpbmVyLnN0YXJ0SG91ci50eXBlID0gXCJ0aW1lXCI7XHJcbiAgICAgICAgICAgIGVudHJ5Q29udGFpbmVyLnN0YXJ0SG91ci5jbGFzc05hbWUgPSBcInRsLWVudHJ5LXN0YXJ0XCI7XHJcbiAgICAgICAgICAgIGlmIChkYXRhLnNoZWV0LmxvY2tlZCkgZW50cnlDb250YWluZXIuc3RhcnRIb3VyLmRpc2FibGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgZW50cnlDb250YWluZXIuc3RhcnRIb3VyLm9uY2hhbmdlID0gKCkgPT4gXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGVuZCA9IGVudHJ5LnN0YXJ0SG91ciArIGVudHJ5Lmxlbmd0aEhvdXJzO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5tb2RlbD8uY2hhbmdlU3RhcnRIb3VyKGRhdGEuZGF0ZSwgZGF0YS5kYXRlLmVudHJpZXMuaW5kZXhPZihlbnRyeSksIERhdGVzLnBhcnNlVGltZVRvaG91cnMoZW50cnlDb250YWluZXI/LnN0YXJ0SG91ci52YWx1ZSA/PyBcIjA4OjAwXCIpKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGxlbmd0aCA9IE51bWJlcnMucm91bmQoZW5kIC0gZW50cnkuc3RhcnRIb3VyLCAyKTtcclxuICAgICAgICAgICAgICAgIHRoaXMubW9kZWw/LmNoYW5nZUxlbmd0aEhvdXJzKGRhdGEuZGF0ZSwgZGF0YS5kYXRlLmVudHJpZXMuaW5kZXhPZihlbnRyeSksIGxlbmd0aCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZW50cnlDb250YWluZXIucGFyZW50LmFwcGVuZENoaWxkKGVudHJ5Q29udGFpbmVyLnN0YXJ0SG91cik7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBlbmRMYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpO1xyXG4gICAgICAgICAgICBlbmRMYWJlbC5jbGFzc05hbWUgPSBcInRsLWVuZC1sYWJlbFwiXHJcbiAgICAgICAgICAgIGVuZExhYmVsLmlubmVyVGV4dCA9IFwiLVwiO1xyXG4gICAgICAgICAgICBlbnRyeUNvbnRhaW5lci5wYXJlbnQuYXBwZW5kQ2hpbGQoZW5kTGFiZWwpO1xyXG5cclxuICAgICAgICAgICAgZW50cnlDb250YWluZXIuZW5kSG91ci50eXBlID0gXCJ0aW1lXCI7XHJcbiAgICAgICAgICAgIGVudHJ5Q29udGFpbmVyLmVuZEhvdXIuY2xhc3NOYW1lID0gXCJ0bC1lbnRyeS1lbmRcIjtcclxuICAgICAgICAgICAgaWYgKGRhdGEuc2hlZXQubG9ja2VkKSBlbnRyeUNvbnRhaW5lci5lbmRIb3VyLmRpc2FibGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgZW50cnlDb250YWluZXIuZW5kSG91ci5vbmNoYW5nZSA9ICgpID0+XHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGlmIChlbnRyeUNvbnRhaW5lcj8uZW5kSG91cilcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBsZW5ndGggPSBOdW1iZXJzLnJvdW5kKERhdGVzLnBhcnNlVGltZVRvaG91cnMoZW50cnlDb250YWluZXIuZW5kSG91ci52YWx1ZSkgLSBlbnRyeS5zdGFydEhvdXIsIDIpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubW9kZWw/LmNoYW5nZUxlbmd0aEhvdXJzKGRhdGEuZGF0ZSwgZGF0YS5kYXRlLmVudHJpZXMuaW5kZXhPZihlbnRyeSksIGxlbmd0aCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZW50cnlDb250YWluZXIucGFyZW50LmFwcGVuZENoaWxkKGVudHJ5Q29udGFpbmVyLmVuZEhvdXIpO1xyXG5cclxuXHJcbiAgICAgICAgICAgIGVudHJ5Q29udGFpbmVyLnJlYXNvbi5vbmNoYW5nZSA9ICgpID0+IHRoaXMubW9kZWw/LmNoYW5nZVJlYXNvbihkYXRhLmRhdGUsIGRhdGEuZGF0ZS5lbnRyaWVzLmluZGV4T2YoZW50cnkpLCBlbnRyeUNvbnRhaW5lcj8ucmVhc29uLnZhbHVlID8/IFwiXCIpO1xyXG4gICAgICAgICAgICBpZiAoZGF0YS5zaGVldC5sb2NrZWQpIGVudHJ5Q29udGFpbmVyLnJlYXNvbi5kaXNhYmxlZCA9IHRydWU7XHJcbiAgICAgICAgICAgIGVudHJ5Q29udGFpbmVyLnJlYXNvbi5jbGFzc05hbWUgPSBcInRsLWVudHJ5LXJlYXNvblwiO1xyXG4gICAgICAgICAgICBlbnRyeUNvbnRhaW5lci5wYXJlbnQuYXBwZW5kQ2hpbGQoZW50cnlDb250YWluZXIucmVhc29uKTtcclxuICAgICAgICAgICAgdGhpcy51cGRhdGVSZWFzb25zRHJvcGRvd24oZW50cnlDb250YWluZXIucmVhc29uKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChkYXRlQ29udGFpbmVyLmVudHJpZXMubGVuZ3RoID09PSAxKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBkYXRlQ29udGFpbmVyLnN1bUhvdXJzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIik7XHJcbiAgICAgICAgICAgICAgICBkYXRlQ29udGFpbmVyLnN1bUhvdXJzLmNsYXNzTmFtZSA9IFwidGwtc3VtLWhvdXJzXCI7XHJcbiAgICAgICAgICAgICAgICBlbnRyeUNvbnRhaW5lci5wYXJlbnQuYXBwZW5kKGRhdGVDb250YWluZXIuc3VtSG91cnMpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBlbnRyeUNvbnRhaW5lci5sZW5ndGgudHlwZSA9IFwibnVtYmVyXCI7XHJcbiAgICAgICAgICAgIGVudHJ5Q29udGFpbmVyLmxlbmd0aC5jbGFzc05hbWUgPSBcInRsLWVudHJ5LWxlbmd0aFwiO1xyXG4gICAgICAgICAgICBlbnRyeUNvbnRhaW5lci5sZW5ndGguc3RlcCA9IFwiMC4wMVwiO1xyXG4gICAgICAgICAgICBpZiAoZGF0YS5zaGVldC5sb2NrZWQpIGVudHJ5Q29udGFpbmVyLmxlbmd0aC5kaXNhYmxlZCA9IHRydWU7XHJcbiAgICAgICAgICAgIGVudHJ5Q29udGFpbmVyLmxlbmd0aC5vbmNoYW5nZSA9ICgpID0+XHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHRoaXMubW9kZWw/LmNoYW5nZUxlbmd0aEhvdXJzKGRhdGEuZGF0ZSwgZGF0YS5kYXRlLmVudHJpZXMuaW5kZXhPZihlbnRyeSksIEhvdXJTY2FsaW5nLnVuc2NhbGUocGFyc2VGbG9hdChlbnRyeUNvbnRhaW5lcj8ubGVuZ3RoLnZhbHVlIHx8IFwiMFwiKSkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVudHJ5Q29udGFpbmVyLnBhcmVudC5hcHBlbmRDaGlsZChlbnRyeUNvbnRhaW5lci5sZW5ndGgpO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgZHVyYXRpb25MYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpO1xyXG4gICAgICAgICAgICBkdXJhdGlvbkxhYmVsLmNsYXNzTmFtZSA9IFwidGwtZHVyYXRpb24tbGFiZWxcIjtcclxuICAgICAgICAgICAgZHVyYXRpb25MYWJlbC5pbm5lclRleHQgPSBIb3VyU2NhbGluZy5nZXRVbml0TmFtZSgpO1xyXG4gICAgICAgICAgICBlbnRyeUNvbnRhaW5lci5wYXJlbnQuYXBwZW5kQ2hpbGQoZHVyYXRpb25MYWJlbCk7XHJcblxyXG4gICAgICAgICAgICBpZiAoIWRhdGEuc2hlZXQubG9ja2VkKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBlbnRyeUNvbnRhaW5lci5jb21tZW50QnV0dG9uLmNsYXNzTmFtZSA9IFwidGwtYWRkLWNvbW1lbnQtYnRuIHRsLXNob3ctb24taG92ZXJcIjtcclxuICAgICAgICAgICAgICAgIGVudHJ5Q29udGFpbmVyLmNvbW1lbnRCdXR0b24ub25jbGljayA9ICgpID0+IHRoaXMubW9kZWw/LnRvZ2dsZUNvbW1lbnQoZGF0YS5kYXRlLCBkYXRhLmRhdGUuZW50cmllcy5pbmRleE9mKGVudHJ5KSk7XHJcbiAgICAgICAgICAgICAgICBlbnRyeUNvbnRhaW5lci5wYXJlbnQuYXBwZW5kQ2hpbGQoZW50cnlDb250YWluZXIuY29tbWVudEJ1dHRvbik7XHJcblxyXG4gICAgICAgICAgICAgICAgY29uc3QgcmVtb3ZlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiKTtcclxuICAgICAgICAgICAgICAgIHJlbW92ZS5hcHBlbmRDaGlsZChNYXRlcmlhbEljb24uZ2V0KFwiZGVsZXRlXCIpKTtcclxuICAgICAgICAgICAgICAgIHJlbW92ZS5jbGFzc05hbWUgPSBcInRsLXJlbW92ZS1lbnRyeS1idG4gdGwtc2hvdy1vbi1ob3ZlclwiO1xyXG4gICAgICAgICAgICAgICAgcmVtb3ZlLm9uY2xpY2sgPSAoKSA9PiB0aGlzLm1vZGVsPy5kZWxldGVFbnRyeShkYXRhLmRhdGUsIGRhdGEuZGF0ZS5lbnRyaWVzLmluZGV4T2YoZW50cnkpKTtcclxuICAgICAgICAgICAgICAgIGVudHJ5Q29udGFpbmVyLnBhcmVudC5hcHBlbmRDaGlsZChyZW1vdmUpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBlbnRyeUNvbnRhaW5lci5ub1JlYXNvbldhcm5pbmcuYXBwZW5kKE1hdGVyaWFsSWNvbi5nZXQoXCJ3YXJuaW5nXCIsIHRydWUpKTtcclxuICAgICAgICAgICAgZW50cnlDb250YWluZXIubm9SZWFzb25XYXJuaW5nLmFwcGVuZChcIiBObyByZWFzb24gc2VsZWN0ZWQhXCIpO1xyXG4gICAgICAgICAgICBlbnRyeUNvbnRhaW5lci5ub1JlYXNvbldhcm5pbmcuY2xhc3NOYW1lID0gXCJ0bC1uby1yZWFzb24td2FybmluZyB0bC13YXJuaW5nIHRsLWhhcy1yZWFzb25cIjtcclxuICAgICAgICAgICAgZW50cnlDb250YWluZXIucGFyZW50LmFwcGVuZENoaWxkKGVudHJ5Q29udGFpbmVyLm5vUmVhc29uV2FybmluZyk7XHJcblxyXG4gICAgICAgICAgICBlbnRyeUNvbnRhaW5lci5jb21tZW50LnR5cGUgPSBcInRleHRcIjtcclxuICAgICAgICAgICAgZW50cnlDb250YWluZXIuY29tbWVudC5wbGFjZWhvbGRlciA9IFwiV3JpdGUgYSBub3RlLi4uXCI7XHJcbiAgICAgICAgICAgIGVudHJ5Q29udGFpbmVyLmNvbW1lbnQudGl0bGUgPSBcIldyaXRlIGEgbm90ZS4uLlwiO1xyXG4gICAgICAgICAgICBlbnRyeUNvbnRhaW5lci5jb21tZW50LmNsYXNzTmFtZSA9IFwidGwtZW50cnktY29tbWVudFwiO1xyXG4gICAgICAgICAgICBpZiAoZGF0YS5zaGVldC5sb2NrZWQpIGVudHJ5Q29udGFpbmVyLmNvbW1lbnQuZGlzYWJsZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICBlbnRyeUNvbnRhaW5lci5jb21tZW50Lm9uY2hhbmdlID0gKCkgPT4gXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHRoaXMubW9kZWw/LmNoYW5nZUNvbW1lbnQoZGF0YS5kYXRlLCBkYXRhLmRhdGUuZW50cmllcy5pbmRleE9mKGVudHJ5KSwgZW50cnlDb250YWluZXI/LmNvbW1lbnQudmFsdWUgPz8gXCJcIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZW50cnlDb250YWluZXIucGFyZW50LmFwcGVuZENoaWxkKGVudHJ5Q29udGFpbmVyLmNvbW1lbnQpO1xyXG5cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGVudHJ5Q29udGFpbmVyO1xyXG4gICAgfVxyXG4gICAgcHJpdmF0ZSBhZGRUb1dlZWtTdW0oZGF0ZTogVGltZWxvZ1VJRGF0ZUNvbnRhaW5lcilcclxuICAgIHtcclxuICAgICAgICBpZiAodGhpcy53ZWVrU3Vtcy5sZW5ndGggPCAxIHx8IG5ldyBEYXRlKGRhdGUuZGF0ZS5kYXRlKS5nZXREYXkoKSA9PT0gMCkgLy9JZiB0aGlzIGlzIHRoZSBmaXJzdCBkYXksIG9yIGEgc3VuZGF5LCBjcmVhdGUgYSBuZXcgd2VlayBmb3IgaXQuXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBjb25zdCB3ZWVrU3VtID0ge1xyXG4gICAgICAgICAgICAgICAgZGF0ZXM6IFtkYXRlXSxcclxuICAgICAgICAgICAgICAgIGVsZW1lbnQ6IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIilcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgd2Vla1N1bS5lbGVtZW50LmNsYXNzTmFtZSA9IFwidGwtd2Vlay1zdW1cIjtcclxuICAgICAgICAgICAgdGhpcy53ZWVrU3Vtcy5wdXNoKHdlZWtTdW0pO1xyXG4gICAgICAgICAgICBkYXRlLnBhcmVudC5hcHBlbmRDaGlsZCh3ZWVrU3VtLmVsZW1lbnQpO1xyXG4gICAgICAgICAgICBkYXRlLnBhcmVudC5zdHlsZS5tYXJnaW5Ub3AgPSBcIjM4cHhcIjtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdGhpcy53ZWVrU3Vtc1t0aGlzLndlZWtTdW1zLmxlbmd0aCAtIDFdLmRhdGVzLnB1c2goZGF0ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcHJpdmF0ZSBvbkRhdGVVcGRhdGVkKGRhdGE6IHsgc2hlZXQ6IFRpbWVsb2dTaGVldCwgZGF0ZTogVGltZWxvZ0RhdGUgfSlcclxuICAgIHtcclxuICAgICAgICBpZiAodGhpcy5zZWxlY3RlZFNoZWV0ID09PSBkYXRhLnNoZWV0ICYmIHRoaXMuc2hlZXRDb250YWluZXIpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBsZXQgZGF0ZUNvbnRhaW5lciA9IHRoaXMuZ2V0RGF0ZUNvbnRhaW5lcihkYXRhKTtcclxuICAgICAgICAgICAgaWYgKGRhdGVDb250YWluZXIpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgZW50cnkgb2YgZGF0YS5kYXRlLmVudHJpZXMpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGVudHJ5Q29udGFpbmVyID0gdGhpcy5nZXRFbnRyeUNvbnRhaW5lcihkYXRhLCBkYXRlQ29udGFpbmVyLCBlbnRyeSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGVudHJ5Q29udGFpbmVyLnN0YXJ0SG91ci52YWx1ZSA9IERhdGVzLmZvcm1hdEhvdXIoZW50cnkuc3RhcnRIb3VyKTtcclxuICAgICAgICAgICAgICAgICAgICBlbnRyeUNvbnRhaW5lci5sZW5ndGgudmFsdWUgPSBOdW1iZXJzLnJvdW5kKEhvdXJTY2FsaW5nLnNjYWxlKGVudHJ5Lmxlbmd0aEhvdXJzKSwgMikudG9TdHJpbmcoKTtcclxuICAgICAgICAgICAgICAgICAgICBlbnRyeUNvbnRhaW5lci5lbmRIb3VyLnZhbHVlID0gRGF0ZXMuZm9ybWF0SG91cihlbnRyeS5zdGFydEhvdXIgKyBlbnRyeS5sZW5ndGhIb3Vycyk7XHJcbiAgICAgICAgICAgICAgICAgICAgZW50cnlDb250YWluZXIucmVhc29uLnZhbHVlID0gZW50cnkucmVhc29uSWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgZW50cnlDb250YWluZXIuY29tbWVudC52YWx1ZSA9IGVudHJ5LmNvbW1lbnQgPz8gXCJcIjtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEhZW50cnkucmVhc29uSWQpIGVudHJ5Q29udGFpbmVyLm5vUmVhc29uV2FybmluZy5jbGFzc0xpc3QuYWRkKFwidGwtaGFzLXJlYXNvblwiKTtcclxuICAgICAgICAgICAgICAgICAgICBlbHNlIGVudHJ5Q29udGFpbmVyLm5vUmVhc29uV2FybmluZy5jbGFzc0xpc3QucmVtb3ZlKFwidGwtaGFzLXJlYXNvblwiKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgZW50cnlDb250YWluZXIuY29tbWVudEJ1dHRvbi50aXRsZSA9IGVudHJ5Lmhhc0NvbW1lbnQgPyBcIlJlbW92ZSBub3RlXCIgOiBcIkFkZCBub3RlXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgZW50cnlDb250YWluZXIuY29tbWVudEJ1dHRvbi5pbm5lckhUTUwgPSBcIlwiO1xyXG4gICAgICAgICAgICAgICAgICAgIGVudHJ5Q29udGFpbmVyLmNvbW1lbnRCdXR0b24uYXBwZW5kQ2hpbGQoTWF0ZXJpYWxJY29uLmdldChlbnRyeS5oYXNDb21tZW50ID8gXCJzcGVha2VyX25vdGVzX29mZlwiIDogXCJzcGVha2VyX25vdGVzXCIpKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVudHJ5Lmhhc0NvbW1lbnQpIGVudHJ5Q29udGFpbmVyLnBhcmVudC5jbGFzc0xpc3QuYWRkKFwidGwtaGFzLWNvbW1lbnRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBlbnRyeUNvbnRhaW5lci5wYXJlbnQuY2xhc3NMaXN0LnJlbW92ZShcInRsLWhhcy1jb21tZW50XCIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY29uc3QgcmVtb3ZlZEVudHJpZXMgPSBkYXRlQ29udGFpbmVyLmVudHJpZXMuZmlsdGVyKGVudHJ5ID0+ICFkYXRhLmRhdGUuZW50cmllcy5maW5kKGUgPT4gZSA9PT0gZW50cnkuZW50cnkpKTtcclxuICAgICAgICAgICAgICAgIGRhdGVDb250YWluZXIuZW50cmllcyA9IGRhdGVDb250YWluZXIuZW50cmllcy5maWx0ZXIoZW50cnkgPT4gIXJlbW92ZWRFbnRyaWVzLmluY2x1ZGVzKGVudHJ5KSk7XHJcbiAgICAgICAgICAgICAgICByZW1vdmVkRW50cmllcy5mb3JFYWNoKGUgPT4gZS5wYXJlbnQucmVtb3ZlKCkpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChkYXRlQ29udGFpbmVyLnN1bUhvdXJzKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHN1bSA9IE51bWJlcnMuc3VtKGRhdGEuZGF0ZS5lbnRyaWVzLm1hcChlID0+IGUubGVuZ3RoSG91cnMpKTtcclxuICAgICAgICAgICAgICAgICAgICBkYXRlQ29udGFpbmVyLnN1bUhvdXJzLmlubmVyVGV4dCA9IGAke051bWJlcnMucm91bmQoSG91clNjYWxpbmcuc2NhbGUoc3VtKSwgMil9IC8gJHtIb3VyU2NhbGluZy5mb3JtYXQoTnVtYmVycy5yb3VuZChzdW0sIDIpKX1gO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGRhdGVDb250YWluZXIuc3RhckJ1dHRvbi5pbm5lckhUTUwgPSBcIlwiO1xyXG4gICAgICAgICAgICAgICAgZGF0ZUNvbnRhaW5lci5zdGFyQnV0dG9uLmRpc2FibGVkID0gZGF0YS5kYXRlLmZhdm9yaXRlZDtcclxuICAgICAgICAgICAgICAgIGRhdGVDb250YWluZXIuc3RhckJ1dHRvbi5jbGFzc0xpc3QucmVtb3ZlKFwidGwtZmF2b3JpdGVcIik7XHJcbiAgICAgICAgICAgICAgICBkYXRlQ29udGFpbmVyLnN0YXJCdXR0b24uYXBwZW5kQ2hpbGQoTWF0ZXJpYWxJY29uLmdldChcInN0YXJcIiwgZGF0YS5kYXRlLmZhdm9yaXRlZCkpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGRhdGEuZGF0ZS5mYXZvcml0ZWQpIGRhdGVDb250YWluZXIuc3RhckJ1dHRvbi5jbGFzc0xpc3QuYWRkKFwidGwtZmF2b3JpdGVcIik7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGRhdGVDb250YWluZXIuZW50cmllcy5sZW5ndGggPiAwIHx8IGRhdGVDb250YWluZXIuZGF0ZS5mYXZvcml0ZWQpXHJcbiAgICAgICAgICAgICAgICAgICAgZGF0ZUNvbnRhaW5lci5wYXN0ZUJ1dHRvbi5jbGFzc0xpc3QuYWRkKFwidGwtaGlkZS1mYXZvcml0ZS1idXR0b25cIik7XHJcbiAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgZGF0ZUNvbnRhaW5lci5wYXN0ZUJ1dHRvbi5jbGFzc0xpc3QucmVtb3ZlKFwidGwtaGlkZS1mYXZvcml0ZS1idXR0b25cIik7XHJcblxyXG4gICAgICAgICAgICAgICAgZGF0ZUNvbnRhaW5lci50aXRsZS50aXRsZSA9IGRhdGEuZGF0ZS5kYXRlRGVzY3JpcHRpb24gPz8gXCJcIjtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoZGF0YS5kYXRlLm5vbldvcmtpbmdEYXkgJiYgZGF0YS5kYXRlLmVudHJpZXMubGVuZ3RoIDwgMSlcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBkYXRlQ29udGFpbmVyLndlZWtlbmREZXNjcmlwdGlvbi5jbGFzc0xpc3QucmVtb3ZlKFwidGwtd2Vla2VuZC1kZXNjcmlwdGlvbi1oaWRkZW5cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgZGF0ZUNvbnRhaW5lci53ZWVrZW5kRGVzY3JpcHRpb24uaW5uZXJUZXh0ID0gZGF0YS5kYXRlLmRhdGVEZXNjcmlwdGlvbiA/PyBcIlwiO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgIGRhdGVDb250YWluZXIud2Vla2VuZERlc2NyaXB0aW9uLmNsYXNzTGlzdC5hZGQoXCJ0bC13ZWVrZW5kLWRlc2NyaXB0aW9uLWhpZGRlblwiKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY29uc3Qgd2Vla1N1bSA9IHRoaXMud2Vla1N1bXMuZmluZCh3ID0+IHcuZGF0ZXMuc29tZShkID0+IGQuZGF0ZSA9PT0gZGF0YS5kYXRlKSk7XHJcbiAgICAgICAgICAgIGlmICh3ZWVrU3VtKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBzdW0gPSBOdW1iZXJzLnN1bSh3ZWVrU3VtLmRhdGVzLm1hcChkID0+IE51bWJlcnMuc3VtKGQuZW50cmllcy5tYXAoZSA9PiBlLmVudHJ5Lmxlbmd0aEhvdXJzKSkpKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHRvdGFsSG91cnMgPSBOdW1iZXJzLnN1bSh3ZWVrU3VtLmRhdGVzLm1hcChkID0+IGQuZGF0ZS5ob3Vyc1RvV29yaykpO1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgd2Vla051bWJlciA9IERhdGVzLmdldFdlZWtOdW1iZXJGcm9tRGF0ZSh3ZWVrU3VtLmRhdGVzWzBdLmRhdGUuZGF0ZSk7XHJcbiAgICAgICAgICAgICAgICB3ZWVrU3VtLmVsZW1lbnQuaW5uZXJIVE1MID0gYDxiPldlZWsgJHt3ZWVrTnVtYmVyfTwvYj46ICR7TnVtYmVycy5yb3VuZChIb3VyU2NhbGluZy5zY2FsZShzdW0pLCAyKX0gLyAke0hvdXJTY2FsaW5nLmZvcm1hdChOdW1iZXJzLnJvdW5kKHRvdGFsSG91cnMsIDIpKX1gO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMudXBkYXRlQmFsYW5jZSgpO1xyXG4gICAgfVxyXG4gICAgcHJpdmF0ZSB1cGRhdGVSZWFzb25zRHJvcGRvd24oc2VsZWN0OiBIVE1MU2VsZWN0RWxlbWVudClcclxuICAgIHtcclxuICAgICAgICBzZWxlY3QuaW5uZXJIVE1MID0gXCJcIjtcclxuICAgICAgICBmb3IgKGNvbnN0IHJlYXNvbiBvZiB0aGlzLnJlYXNvbnMpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBjb25zdCBvcHRpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwib3B0aW9uXCIpO1xyXG4gICAgICAgICAgICBvcHRpb24udmFsdWUgPSByZWFzb24uc2VydmVySWQ7XHJcbiAgICAgICAgICAgIG9wdGlvbi5pbm5lclRleHQgPSByZWFzb24udmFsdWU7XHJcbiAgICAgICAgICAgIHNlbGVjdC5hcHBlbmRDaGlsZChvcHRpb24pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHByaXZhdGUgb25SZWFzb25zVXBkYXRlZChyZWFzb25zOiBIaUJvYlJlYXNvbltdKVxyXG4gICAge1xyXG4gICAgICAgIHRoaXMucmVhc29ucyA9IHJlYXNvbnM7XHJcblxyXG4gICAgICAgIGZvciAoY29uc3QgZGF0ZSBvZiB0aGlzLnNoZWV0RGF0ZXMpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGVudHJ5IG9mIGRhdGUuZW50cmllcylcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGVSZWFzb25zRHJvcGRvd24oZW50cnkucmVhc29uKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHByaXZhdGUgb25TYXZlU3RhdHVzVXBkYXRlZChzdGF0dXM6IFRpbWVsb2dTYXZlU3RhdHVzKVxyXG4gICAge1xyXG4gICAgICAgIGlmICghdGhpcy5zYXZlU3RhdHVzKSByZXR1cm47XHJcbiAgICAgICAgdGhpcy5zYXZlU3RhdHVzLmlubmVySFRNTCA9IFwiXCI7XHJcbiAgICAgICAgdGhpcy5zYXZlU3RhdHVzLmNsYXNzTGlzdC5yZW1vdmUoXCJ0bC1zdWNjZXNzXCIpO1xyXG4gICAgICAgIHRoaXMuc2F2ZVN0YXR1cy5jbGFzc0xpc3QucmVtb3ZlKFwidGwtd2FybmluZ1wiKTtcclxuICAgICAgICB0aGlzLnNhdmVTdGF0dXMuY2xhc3NMaXN0LnJlbW92ZShcInRsLWNsaWNrYWJsZVwiKTtcclxuICAgICAgICBpZiAoc3RhdHVzID09PSBUaW1lbG9nU2F2ZVN0YXR1cy5TYXZlZClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRoaXMuc2F2ZVN0YXR1cy5hcHBlbmRDaGlsZChNYXRlcmlhbEljb24uZ2V0KFwiY2xvdWRfZG9uZVwiLCB0cnVlKSk7XHJcbiAgICAgICAgICAgIHRoaXMuc2F2ZVN0YXR1cy5hcHBlbmQoXCIgU2F2ZWRcIik7XHJcbiAgICAgICAgICAgIHRoaXMuc2F2ZVN0YXR1cy5jbGFzc0xpc3QuYWRkKFwidGwtc3VjY2Vzc1wiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHN0YXR1cyA9PT0gVGltZWxvZ1NhdmVTdGF0dXMuV2FpdGluZylcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRoaXMuc2F2ZVN0YXR1cy5hcHBlbmRDaGlsZChNYXRlcmlhbEljb24uZ2V0KFwicGVuZGluZ1wiKSk7XHJcbiAgICAgICAgICAgIHRoaXMuc2F2ZVN0YXR1cy5hcHBlbmQoXCIgUGVuZGluZy4uLlwiKVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoc3RhdHVzID09PSBUaW1lbG9nU2F2ZVN0YXR1cy5TYXZpbmcpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aGlzLnNhdmVTdGF0dXMuYXBwZW5kQ2hpbGQoTWF0ZXJpYWxJY29uLmdldChcImNsb3VkX3VwbG9hZFwiKSk7XHJcbiAgICAgICAgICAgIHRoaXMuc2F2ZVN0YXR1cy5hcHBlbmQoXCIgU2F2aW5nLi4uXCIpXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChzdGF0dXMgPT09IFRpbWVsb2dTYXZlU3RhdHVzLkVycm9yKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdGhpcy5zYXZlU3RhdHVzLmFwcGVuZENoaWxkKE1hdGVyaWFsSWNvbi5nZXQoXCJjbG91ZF9vZmZcIikpO1xyXG4gICAgICAgICAgICB0aGlzLnNhdmVTdGF0dXMuYXBwZW5kKFwiIEZhaWxlZCFcIik7XHJcbiAgICAgICAgICAgIHRoaXMuc2F2ZVN0YXR1cy5jbGFzc0xpc3QuYWRkKFwidGwtd2FybmluZ1wiKTtcclxuICAgICAgICAgICAgdGhpcy5zYXZlU3RhdHVzLmNsYXNzTGlzdC5hZGQoXCJ0bC1jbGlja2FibGVcIik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcHJpdmF0ZSBvblNhdmVTdGF0dXNDbGljaygpXHJcbiAgICB7XHJcbiAgICAgICAgaWYgKCF0aGlzLnNhdmVTdGF0dXM/LmNsYXNzTGlzdC5jb250YWlucyhcInRsLWNsaWNrYWJsZVwiKSkgcmV0dXJuO1xyXG4gICAgICAgIHRoaXMubW9kZWw/LnNhdmUoKTtcclxuICAgIH1cclxuICAgIHByaXZhdGUgb25TaGVldFVwZGF0ZWQoc2hlZXQ6IFRpbWVsb2dTaGVldClcclxuICAgIHtcclxuICAgICAgICBpZiAodGhpcy5zaGVldERyb3Bkb3duICYmICF0aGlzLnNoZWV0RHJvcGRvd25PcHRpb25zLmZpbmQocyA9PiBzLnNoZWV0ID09PSBzaGVldCkpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBjb25zdCBvcHRpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwib3B0aW9uXCIpO1xyXG4gICAgICAgICAgICBvcHRpb24udmFsdWUgPSBzaGVldC5pZC50b1N0cmluZygpO1xyXG4gICAgICAgICAgICBvcHRpb24uaW5uZXJUZXh0ID0gYCR7bmV3IERhdGUoc2hlZXQuc3RhcnQpLnRvRGF0ZVN0cmluZygpfSAtICR7bmV3IERhdGUoc2hlZXQuZW5kKS50b0RhdGVTdHJpbmcoKX0ke3NoZWV0LmxvY2tlZCA/IFwiIChsb2NrZWQpXCIgOiBcIlwifWA7XHJcbiAgICAgICAgICAgIHRoaXMuc2hlZXREcm9wZG93bk9wdGlvbnMucHVzaCh7IHNoZWV0OiBzaGVldCwgZWxlbWVudDogb3B0aW9uIH0pO1xyXG4gICAgICAgICAgICB0aGlzLnNoZWV0RHJvcGRvd24uYXBwZW5kQ2hpbGQob3B0aW9uKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuc2VsZWN0ZWRTaGVldCA9PT0gc2hlZXQpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5zaGVldENvbnRhaW5lcikgdGhpcy5zaGVldENvbnRhaW5lci5pbm5lckhUTUwgPSBcIlwiO1xyXG4gICAgICAgICAgICB0aGlzLnNoZWV0RGF0ZXMgPSBbXTtcclxuICAgICAgICAgICAgdGhpcy53ZWVrU3VtcyA9IFtdO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmb3IgKGNvbnN0IGRhdGUgb2Ygc2hlZXQuZGF0ZXMpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aGlzLm9uRGF0ZVVwZGF0ZWQoeyBzaGVldCwgZGF0ZSB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy51cGRhdGVCYWxhbmNlKCk7XHJcbiAgICB9XHJcbiAgICBwcml2YXRlIG9uU2hlZXRzVXBkYXRlZChzaGVldHM6IFRpbWVsb2dTaGVldFtdKVxyXG4gICAge1xyXG4gICAgICAgIGlmICh0aGlzLnNoZWV0RHJvcGRvd24pIHRoaXMuc2hlZXREcm9wZG93bi5pbm5lckhUTUwgPSBcIlwiO1xyXG4gICAgICAgIHRoaXMuc2hlZXREcm9wZG93bk9wdGlvbnMgPSBbXTtcclxuICAgICAgICBmb3IgKGNvbnN0IHNoZWV0IG9mIHNoZWV0cylcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRoaXMub25TaGVldFVwZGF0ZWQoc2hlZXQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLm9uU2VsZWN0ZWRTaGVldENoYW5nZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgb25TZWxlY3RlZFNoZWV0Q2hhbmdlKClcclxuICAgIHtcclxuICAgICAgICBpZiAoIXRoaXMuc2hlZXREcm9wZG93bikgcmV0dXJuO1xyXG4gICAgICAgIGlmICh0aGlzLnNoZWV0Q29udGFpbmVyKSB0aGlzLnNoZWV0Q29udGFpbmVyLmlubmVySFRNTCA9IFwiXCI7XHJcbiAgICAgICAgdGhpcy5zaGVldERhdGVzID0gW107XHJcbiAgICAgICAgY29uc3QgdmFsID0gdGhpcy5zaGVldERyb3Bkb3duLnZhbHVlO1xyXG4gICAgICAgIHRoaXMuc2VsZWN0ZWRTaGVldCA9IHRoaXMuc2hlZXREcm9wZG93bk9wdGlvbnMuZmluZChvID0+IG8uZWxlbWVudC52YWx1ZSA9PT0gdmFsKT8uc2hlZXQ7XHJcbiAgICAgICAgaWYgKHRoaXMuc2VsZWN0ZWRTaGVldCAmJiB0aGlzLm1vZGVsKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdGhpcy5tb2RlbC5mZXRjaFNoZWV0KHRoaXMuc2VsZWN0ZWRTaGVldC5pZCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBhc3luYyB1cGRhdGVCYWxhbmNlKClcclxuICAgIHtcclxuICAgICAgICBpZiAoIXRoaXMubW9kZWwgfHwgIXRoaXMuYmFsYW5jZUxhYmVsIHx8ICF0aGlzLnNlbGVjdGVkU2hlZXQpIHJldHVybjtcclxuICAgICAgICBjb25zdCBiYWxhbmNlID0gYXdhaXQgdGhpcy5tb2RlbC5nZXRGbGV4U3RhdHVzKCk7XHJcbiAgICAgICAgY29uc3QgdG90YWxCYWxhbmNlID0gTnVtYmVycy5yb3VuZChiYWxhbmNlLmJhbGFuY2UsIDIpO1xyXG4gICAgICAgIHRoaXMuYmFsYW5jZUxhYmVsLmlubmVyVGV4dCA9IGBGbGV4OiAke0hvdXJTY2FsaW5nLmZvcm1hdCh0b3RhbEJhbGFuY2UpfSR7dG90YWxCYWxhbmNlID09PSAwID8gXCIg8J+ls1wiIDogXCJcIn1gO1xyXG5cclxuICAgICAgICB0aGlzLmJhbGFuY2VXYXJuaW5nPy5jbGFzc0xpc3QuYWRkKFwidGwtaGlkZGVuXCIpO1xyXG4gICAgICAgIGlmIChiYWxhbmNlLm92ZXJkdWVEYXRlcy5sZW5ndGggKyBiYWxhbmNlLndhcm5pbmdEYXRlcy5sZW5ndGggPiAwICYmIHRoaXMuYmFsYW5jZVdhcm5pbmcpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBjb25zdCBwb2xpY3kgPSB0aGlzLm1vZGVsLmdldEZsZXhQb2xpY3koKTtcclxuICAgICAgICAgICAgdGhpcy5iYWxhbmNlV2FybmluZy5jbGFzc0xpc3QucmVtb3ZlKFwidGwtaGlkZGVuXCIpO1xyXG4gICAgICAgICAgICB0aGlzLmJhbGFuY2VXYXJuaW5nLmlubmVySFRNTCA9IFwiXCI7XHJcbiAgICAgICAgICAgIHRoaXMuYmFsYW5jZVdhcm5pbmcuYXBwZW5kKE1hdGVyaWFsSWNvbi5nZXQoXCJ3YXJuaW5nXCIsIHRydWUpKTtcclxuICAgICAgICAgICAgaWYgKGJhbGFuY2Uub3ZlcmR1ZURhdGVzLmxlbmd0aCA+IDApXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuYmFsYW5jZVdhcm5pbmcuYXBwZW5kKGBZb3UgaGF2ZSAke2JhbGFuY2Uub3ZlcmR1ZURhdGVzLmxlbmd0aH0gdW5iYWxhbmNlZCBmbGV4IGRhdGUke2JhbGFuY2Uub3ZlcmR1ZURhdGVzLmxlbmd0aCA9PT0gMSA/IFwiXCIgOiBcInNcIn0gb2xkZXIgdGhhbiAke3BvbGljeS5wcmV2aW91c0RheXNJbmNsdWRlZH0gZGF5cyFgKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuYmFsYW5jZVdhcm5pbmcudGl0bGUgKz0gYE92ZXJkdWUgZGF0ZXM6ICR7YmFsYW5jZS5vdmVyZHVlRGF0ZXMubWFwKGQgPT4gRGF0ZXMuZm9ybWF0KGQuZGF0ZSwgZmFsc2UpKS5qb2luKFwiLCBcIil9YDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChiYWxhbmNlLndhcm5pbmdEYXRlcy5sZW5ndGggPiAwKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmJhbGFuY2VXYXJuaW5nLmFwcGVuZChgJHtiYWxhbmNlLndhcm5pbmdEYXRlcy5sZW5ndGh9IHVuYmFsYW5jZWQgZmxleCBkYXRlJHtiYWxhbmNlLndhcm5pbmdEYXRlcy5sZW5ndGggPT09IDEgPyBcIlwiIDogXCJzXCJ9IHdpbGwgc29vbiBiZSBvbGRlciB0aGFuICR7cG9saWN5LnByZXZpb3VzRGF5c0luY2x1ZGVkfSBkYXlzIWApO1xyXG5cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5iYWxhbmNlV2FybmluZy50aXRsZSA9IFwiXCI7XHJcbiAgICAgICAgICAgIGlmIChiYWxhbmNlLm92ZXJkdWVEYXRlcy5sZW5ndGggPiAwKSB0aGlzLmJhbGFuY2VXYXJuaW5nLnRpdGxlICs9IGBPdmVyZHVlIGRhdGVzOiAke2JhbGFuY2Uub3ZlcmR1ZURhdGVzLm1hcChkID0+IGAke0RhdGVzLmZvcm1hdChkLmRhdGUsIGZhbHNlKX0gKCR7ZC5yZWFsbG9jYXRlZEJhbGFuY2V9aClgKS5qb2luKFwiLCBcIil9YDtcclxuICAgICAgICAgICAgaWYgKGJhbGFuY2Uud2FybmluZ0RhdGVzLmxlbmd0aCA+IDApIHRoaXMuYmFsYW5jZVdhcm5pbmcudGl0bGUgKz0gYCR7dGhpcy5iYWxhbmNlV2FybmluZy50aXRsZS5sZW5ndGggPiAwID8gXCJcXG5cIiA6IFwiXCJ9U29vbiBvdmVyZHVlIGRhdGVzOiAke2JhbGFuY2Uud2FybmluZ0RhdGVzLm1hcChkID0+IGAke0RhdGVzLmZvcm1hdChkLmRhdGUsIGZhbHNlKX0gKCR7ZC5yZWFsbG9jYXRlZEJhbGFuY2V9aClgKS5qb2luKFwiLCBcIil9YDtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuYmFsYW5jZVdhcm5pbmcuYXBwZW5kKFwiIFwiKTtcclxuICAgICAgICAgICAgdGhpcy5iYWxhbmNlV2FybmluZy5hcHBlbmQoTWF0ZXJpYWxJY29uLmdldChcImluZm9cIiwgZmFsc2UpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IGZhdm9yaXRlID0gYXdhaXQgdGhpcy5tb2RlbC5nZXRGYXZvcml0ZWREYXRlKCk7XHJcbiAgICAgICAgaWYgKGZhdm9yaXRlKSB0aGlzLnNoZWV0Q29udGFpbmVyPy5jbGFzc0xpc3QuYWRkKFwidGwtaGFzLWZhdm9yaXRlXCIpO1xyXG4gICAgICAgIGVsc2UgdGhpcy5zaGVldENvbnRhaW5lcj8uY2xhc3NMaXN0LnJlbW92ZShcInRsLWhhcy1mYXZvcml0ZVwiKTtcclxuICAgIH1cclxuXHJcbn0iLCJleHBvcnQgY29uc3QgVGltZWxvZ0NzcyA9IGBcclxuLnRsLXRvZ2dsZS1idG5cclxue1xyXG4gICAgYm9yZGVyOiBub25lO1xyXG4gICAgYmFja2dyb3VuZDogbm9uZTtcclxuICAgIGZvbnQtc2l6ZTogMmVtO1xyXG59XHJcbi50bC1jbG9zZS1idG5cclxue1xyXG4gICAgZm9udC1zaXplOiAyZW07XHJcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgICByaWdodDogNXB4O1xyXG59XHJcbi50bC11aVxyXG57XHJcbiAgICBwb3NpdGlvbjogZml4ZWQ7XHJcbiAgICB6LWluZGV4OiAxMDAwO1xyXG4gICAgaW5zZXQ6IDBweDtcclxuICAgIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xyXG4gICAgb3ZlcmZsb3cteTogc2Nyb2xsO1xyXG4gICAgcGFkZGluZzogMTBweDtcclxufSAgICAgICAgXHJcbi50bC1kYXRlXHJcbntcclxuICAgIG1hcmdpbi10b3A6IDEwcHg7XHJcbiAgICBwYWRkaW5nOiAxMHB4O1xyXG4gICAgYm9yZGVyOiAxcHggc29saWQgZ3JheTtcclxuICAgIGJvcmRlci1yYWRpdXM6IDVweDtcclxufVxyXG4udGwtc2F2ZS1zdGF0dXMsIC50bC1hZGQtZW50cnktYnRuXHJcbntcclxuICAgIG1hcmdpbi1sZWZ0OiAxMHB4O1xyXG59XHJcbi50bC1lbnRyeVxyXG57XHJcbiAgICBtYXJnaW4tdG9wOiA1cHg7XHJcbn1cclxuLnRsLWVudHJ5ID4gKlxyXG57XHJcbiAgICBtYXJnaW4tbGVmdDogNXB4O1xyXG59XHJcbi50bC1lbnRyeSA+IGlucHV0W3R5cGU9bnVtYmVyXVxyXG57XHJcbiAgICB3aWR0aDogNTBweDtcclxufVxyXG4udGwtZW50cnkgPiBpbnB1dFt0eXBlPXRpbWVdXHJcbntcclxuICAgIHdpZHRoOiA3NXB4O1xyXG59XHJcbi50bC1zYXZlLXN0YXR1c1xyXG57XHJcbiAgICBmb250LXdlaWdodDogYm9sZDtcclxufVxyXG4udGwtc2hlZXQtc2VsZWN0XHJcbntcclxuICAgIG1hcmdpbi1sZWZ0OiA1cHg7XHJcbn1cclxuLnRsLWRhdGUtbGFiZWxcclxue1xyXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbn1cclxuLnRsLWRhdGUtbGFiZWwudGwtZGF0ZS1sYWJlbC13ZWVrZW5kXHJcbntcclxuICAgIGZvbnQtd2VpZ2h0OiBpbml0aWFsO1xyXG4gICAgZm9udC1zdHlsZTogaXRhbGljO1xyXG4gICAgY29sb3I6IGdyYXk7XHJcbn1cclxuLnRsLWVudHJ5LXJlYXNvbiBcclxue1xyXG4gICAgcGFkZGluZzogM3B4O1xyXG59XHJcbi50bC1yZW1vdmUtZW50cnktYnRuXHJcbntcclxuICAgIGZsb2F0OiByaWdodDtcclxufVxyXG4udGwtd2Vlay1zZXBlcmF0b3Jcclxue1xyXG4gICAgbWFyZ2luLXRvcDogNTdweDtcclxufVxyXG4udGwtYmFsYW5jZS1sYWJlbFxyXG57XHJcbiAgICBtYXJnaW46IDVweDtcclxuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcclxufVxyXG4udGwtYmFsYW5jZS1oZWxwXHJcbntcclxuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcclxuICAgIGN1cnNvcjogaGVscDtcclxufVxyXG5cclxuLnRsLXVpLWlubmVyXHJcbntcclxuICAgIGRpc3BsYXk6IHRhYmxlO1xyXG4gICAgbWFyZ2luLWxlZnQ6IGF1dG87XHJcbiAgICBtYXJnaW4tcmlnaHQ6IGF1dG87XHJcbn1cclxuLnRsLXVpLWlubmVyLCAudGwtd2Vlay1zZXBlcmF0b3IsIC50bC1kYXRlXHJcbntcclxuICAgIG1pbi13aWR0aDogNjUwcHg7XHJcbn1cclxuLnRsLWVudHJ5LWNvbW1lbnQge1xyXG4gICAgbWFyZ2luLXRvcDogNXB4O1xyXG4gICAgbWFyZ2luLWJvdHRvbTogMTVweDtcclxuICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgZGlzcGxheTogbm9uZTtcclxufVxyXG4udGwtaGFzLWNvbW1lbnQgLnRsLWVudHJ5LWNvbW1lbnRcclxue1xyXG4gICAgZGlzcGxheTogYmxvY2s7XHJcbn1cclxuLnRsLXN1Y2Nlc3Ncclxue1xyXG4gICAgY29sb3I6ICMwMkI4NzU7XHJcbn1cclxuLnRsLXdhcm5pbmdcclxue1xyXG4gICAgY29sb3I6ICNGMEFGNTI7XHJcbn1cclxuLnRsLWRhbmdlclxyXG57XHJcbiAgICBjb2xvcjogI0RBNTY1MjtcclxufVxyXG4udGwtc3VtLWhvdXJzXHJcbntcclxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgIG1hcmdpbi10b3A6IC0yM3B4O1xyXG59XHJcbi50bC13ZWVrLXN1bVxyXG57XHJcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgICBtYXJnaW4tdG9wOiAtNTdweDtcclxuICAgIHRleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5lO1xyXG59XHJcbi50bC11aSBidXR0b24udGwtc3Rhci1idXR0b24sIC50bC11aS50bC1kYXJrIGJ1dHRvbi50bC1zdGFyLWJ1dHRvblxyXG57XHJcbiAgICBiYWNrZ3JvdW5kOiBub25lO1xyXG4gICAgYm9yZGVyOiBub25lO1xyXG4gICAgbWFyZ2luOiAwO1xyXG4gICAgcGFkZGluZzogMDtcclxufVxyXG4udGwtdWkgYnV0dG9uLnRsLXN0YXItYnV0dG9uLnRsLWZhdm9yaXRlLCAudGwtdWkudGwtZGFyayBidXR0b24udGwtc3Rhci1idXR0b24udGwtZmF2b3JpdGVcclxue1xyXG4gICAgY29sb3I6ICNmMWEwMGI7XHJcbiAgICBvcGFjaXR5OiAxO1xyXG59XHJcbi50bC1wYXN0ZS1idG4ge1xyXG4gICAgbWFyZ2luLWxlZnQ6IDVweDtcclxuICAgIGRpc3BsYXk6IG5vbmU7XHJcbn1cclxuLnRsLWhhcy1mYXZvcml0ZSAudGwtcGFzdGUtYnRuOm5vdCgudGwtaGlkZS1mYXZvcml0ZS1idXR0b24pXHJcbntcclxuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcclxufVxyXG4udGwtc2hvdy1vbi1ob3ZlclxyXG57XHJcbiAgICBvcGFjaXR5OiAwO1xyXG59XHJcbi50bC1kYXRlOmhvdmVyIC50bC1zaG93LW9uLWhvdmVyXHJcbntcclxuICAgIG9wYWNpdHk6IDE7XHJcbn1cclxuLnRsLW5vLXJlYXNvbi13YXJuaW5nIHtcclxuICAgIG1hcmdpbi1sZWZ0OiAxODBweDtcclxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgIG1hcmdpbi10b3A6IC0yMnB4O1xyXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcclxuICAgIHVzZXItc2VsZWN0OiBub25lO1xyXG4gICAgcG9pbnRlci1ldmVudHM6IG5vbmU7XHJcbn1cclxuLnRsLW5vLXJlYXNvbi13YXJuaW5nLnRsLWhhcy1yZWFzb25cclxue1xyXG4gICAgZGlzcGxheTogbm9uZTtcclxufVxyXG4udGwtY2xpY2thYmxlXHJcbntcclxuICAgIGN1cnNvcjogcG9pbnRlcjtcclxufVxyXG4udGwtZGFyay1tb2RlLWJ0biB7XHJcbiAgICBwb3NpdGlvbjogZml4ZWQ7XHJcbiAgICBib3R0b206IDVweDtcclxuICAgIHJpZ2h0OiAyMHB4O1xyXG59XHJcbi50bC11aSBidXR0b25cclxue1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2Q5ZDlkOTtcclxuICAgIGJvcmRlcjogMXB4IHNvbGlkIGdyYXk7XHJcbiAgICBib3JkZXItcmFkaXVzOiA1cHg7XHJcbn1cclxuLnRsLXVpIGJ1dHRvbjpob3ZlclxyXG57XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZWZlYmViO1xyXG59XHJcblxyXG4udGwtdWkudGwtZGFya1xyXG57XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMUUxRTFFO1xyXG4gICAgY29sb3I6IHdoaXRlO1xyXG59XHJcbi50bC11aS50bC1kYXJrIHNlbGVjdCwgLnRsLXVpLnRsLWRhcmsgaW5wdXQge1xyXG4gICAgY29sb3I6IHdoaXRlO1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzI1MjUyNjtcclxuICAgIGJvcmRlcjogMXB4IGdyYXkgc29saWQ7XHJcbiAgICBjb2xvci1zY2hlbWU6IGRhcms7XHJcbn1cclxuLnRsLXVpLnRsLWRhcmsgYnV0dG9uXHJcbntcclxuICAgIGJhY2tncm91bmQtY29sb3I6ICMzMzMzMzM7XHJcbiAgICBib3JkZXI6IDFweCBzb2xpZCAjMjgyODI4O1xyXG4gICAgY29sb3I6IHdoaXRlO1xyXG59XHJcbi50bC11aS50bC1kYXJrIGJ1dHRvbjpob3ZlclxyXG57XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjNTI1MjUyO1xyXG59XHJcbi50bC11aS50bC1kYXJrIC50bC1uby1yZWFzb24td2FybmluZ1xyXG57XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMjUyNTI2O1xyXG59XHJcbi50bC13ZWVrZW5kLWRlc2NyaXB0aW9uIHtcclxuICAgIGNvbG9yOiBncmF5O1xyXG4gICAgZm9udC1zdHlsZTogaXRhbGljO1xyXG4gICAgZmxvYXQ6IHJpZ2h0O1xyXG4gICAgbWFyZ2luLXRvcDogMnB4O1xyXG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xyXG4gICAgbWF4LXdpZHRoOiA0MDBweDtcclxuICAgIG92ZXJmbG93OiBoaWRkZW47XHJcbiAgICBtYXgtaGVpZ2h0OiAzNXB4O1xyXG59XHJcbi50bC13ZWVrZW5kLWRlc2NyaXB0aW9uLnRsLXdlZWtlbmQtZGVzY3JpcHRpb24taGlkZGVuXHJcbntcclxuICAgIGRpc3BsYXk6IG5vbmU7XHJcbn1cclxuLnRsLXZlcnNpb24tbnVtYmVyIHtcclxuICAgIHBvc2l0aW9uOiBmaXhlZDtcclxuICAgIGJvdHRvbTogNXB4O1xyXG4gICAgbGVmdDogNXB4O1xyXG59XHJcblxyXG4udGwtc2V0dGluZ3Mge1xyXG4gICAgcG9zaXRpb246IGZpeGVkO1xyXG4gICAgaW5zZXQ6IDA7XHJcbiAgICB6LWluZGV4OiAxMDA7XHJcbn1cclxuLnRsLXNldHRpbmdzLWJhY2sge1xyXG4gICAgaW5zZXQ6IDA7XHJcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBibGFjaztcclxuICAgIG9wYWNpdHk6IDAuNTtcclxuICAgIGN1cnNvcjogcG9pbnRlcjtcclxufVxyXG5cclxuLnRsLXNldHRpbmdzLnRsLXNldHRpbmdzLWhpZGRlbiB7XHJcbiAgICBkaXNwbGF5OiBub25lO1xyXG59XHJcblxyXG4udGwtc2V0dGluZ3MtdmVyc2lvbiB7XHJcbiAgICBtYXJnaW46IDVweCAxMHB4O1xyXG4gICAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkIGdyYXk7XHJcbn1cclxuXHJcbi50bC1zZXR0aW5ncy12ZXJzaW9uOmxhc3QtY2hpbGQge1xyXG4gICAgYm9yZGVyLWJvdHRvbTogMDtcclxufVxyXG5cclxuLnRsLXNldHRpbmdzLXRpdGxlIHtcclxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG4gICAgZm9udC1zaXplOiAxLjI1ZW07XHJcbn1cclxuLnRsLXNldHRpbmdzLWlubmVyIHtcclxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xyXG4gICAgaGVpZ2h0OiA3MHZoO1xyXG4gICAgd2lkdGg6IDkwdnc7XHJcbiAgICBsZWZ0OiA1dnc7XHJcbiAgICB0b3A6IDE1dmg7XHJcbiAgICBib3JkZXI6IDFweCBzb2xpZCBncmF5O1xyXG4gICAgYm9yZGVyLXJhZGl1czogMTBweDtcclxuICAgIHBhZGRpbmc6IDEwcHg7XHJcbiAgICBvdmVyZmxvdzogYXV0bztcclxufVxyXG4udGwtc2V0dGluZ3MtdmVyc2lvbiBidXR0b25cclxue1xyXG4gICAgbWFyZ2luLWxlZnQ6IDVweDtcclxuICAgIG1hcmdpbi1ib3R0b206IDE1cHg7XHJcbn1cclxuXHJcbi50bC1kYXJrIC50bC1zZXR0aW5ncy1pbm5lclxyXG57XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMWExYTFhO1xyXG59XHJcblxyXG4udGwtYmFsYW5jZS13YXJuaW5nXHJcbntcclxuICAgIGZvbnQtc2l6ZTogMC44ZW07XHJcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XHJcbiAgICB0ZXh0LWRlY29yYXRpb246IHVuZGVybGluZTtcclxuICAgIGN1cnNvcjogaGVscDtcclxufVxyXG4udGwtaGlkZGVuXHJcbntcclxuICAgIGRpc3BsYXk6IG5vbmU7XHJcbn1cclxuXHJcbmA7IiwiaW1wb3J0IHsgVGltZWxvZ1VJIH0gZnJvbSBcIi4uL1RpbWVsb2cvVGltZWxvZ1VJXCI7XHJcbmltcG9ydCB7IFRpbWVsb2dVSVNldHRpbmdzQnV0dG9ucyB9IGZyb20gXCIuLi9UaW1lbG9nL1RpbWVsb2dVSVNldHRpbmdzQnV0dG9uc1wiO1xyXG5pbXBvcnQgeyBIb3VyU2NhbGluZyB9IGZyb20gXCIuLi9VdGlscy9Ib3VyU2NhbGluZ1wiO1xyXG5pbXBvcnQgeyBNYXRlcmlhbEljb24gfSBmcm9tIFwiLi4vVXRpbHMvTWF0ZXJpYWxJY29uXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgQXByaWxGb29sc1xyXG57XHJcbiAgICBwdWJsaWMgc3RhdGljIHNldEFwcmlsRm9vbHNPcHRPdXQob3B0T3V0OiBib29sZWFuKVxyXG4gICAge1xyXG4gICAgICAgIHdpbmRvdy5sb2NhbFN0b3JhZ2Uuc2V0SXRlbShcInRsX2FwcmlsX2Zvb2xzX29wdF9vdXRcIiwgSlNPTi5zdHJpbmdpZnkob3B0T3V0KSk7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgc3RhdGljIGdldEFwcmlsRm9vbHNPcHRPdXQoKVxyXG4gICAge1xyXG4gICAgICAgIHJldHVybiBKU09OLnBhcnNlKHdpbmRvdy5sb2NhbFN0b3JhZ2UuZ2V0SXRlbShcInRsX2FwcmlsX2Zvb2xzX29wdF9vdXRcIikgPz8gXCJmYWxzZVwiKSBhcyBib29sZWFuO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzdGF0aWMgc2V0SGFzU2VlblBvcHVwKHZhbHVlOiBib29sZWFuKVxyXG4gICAge1xyXG4gICAgICAgIHdpbmRvdy5sb2NhbFN0b3JhZ2Uuc2V0SXRlbShcInRsX2FwcmlsX2Zvb2xzX3BvcHVwXCIsIEpTT04uc3RyaW5naWZ5KHZhbHVlKSk7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgc3RhdGljIGhhc1NlZW5Qb3B1cCgpXHJcbiAgICB7XHJcbiAgICAgICAgcmV0dXJuIEpTT04ucGFyc2Uod2luZG93LmxvY2FsU3RvcmFnZS5nZXRJdGVtKFwidGxfYXByaWxfZm9vbHNfcG9wdXBcIikgPz8gXCJmYWxzZVwiKSBhcyBib29sZWFuO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgc3RhdGljIGlzQXByaWxGb29scygpXHJcbiAgICB7XHJcbiAgICAgICAgY29uc3Qgbm93ID0gbmV3IERhdGUoKTtcclxuICAgICAgICBjb25zdCB5ZWFyID0gbm93LmdldEZ1bGxZZWFyKCk7XHJcbiAgICAgICAgbGV0IG1vbnRoID0gNDtcclxuICAgICAgICBsZXQgZGF5ID0gMTtcclxuICAgICAgICBsZXQgYXByaWxGb29sczogRGF0ZSB8IG51bGw7XHJcbiAgICAgICAgbGV0IHdlZWtlbmREYXlzID0gWzYsIDddO1xyXG4gICAgICAgIHdoaWxlICh0cnVlKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaWYgKGRheSA8IDEpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGRheSA9IDMxO1xyXG4gICAgICAgICAgICAgICAgbW9udGgtLTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBhcHJpbEZvb2xzID0gbmV3IERhdGUoYCR7eWVhcn0vJHttb250aH0vJHtkYXl9YCk7XHJcbiAgICAgICAgICAgIGlmICghd2Vla2VuZERheXMuaW5jbHVkZXMoYXByaWxGb29scy5nZXREYXkoKSkpIGJyZWFrO1xyXG4gICAgICAgICAgICBkYXktLTtcclxuICAgICAgICB9XHJcbiAgICAgICAgbGV0IGFwcmlsRm9vbHNFbmQgPSBhcHJpbEZvb2xzLmdldFRpbWUoKSArICgxMDAwICogNjAgKiA2MCAqIDI0KTtcclxuICAgICAgICByZXR1cm4gbm93LmdldFRpbWUoKSA8PSBhcHJpbEZvb2xzRW5kICYmIG5vdy5nZXRUaW1lKCkgPj0gYXByaWxGb29scy5nZXRUaW1lKCk7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgc3RhdGljIGluaXQoKVxyXG4gICAge1xyXG4gICAgICAgIGlmICh0aGlzLmlzQXByaWxGb29scygpKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgVGltZWxvZ1VJU2V0dGluZ3NCdXR0b25zLmJ1dHRvbnMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICBpY29uOiBcImJvbHRcIixcclxuICAgICAgICAgICAgICAgIHRleHQ6IFwiT3B0IG91dCBvZiBUZXJhbGlnaHRtZXRlcnNcIixcclxuICAgICAgICAgICAgICAgIHRpdGxlOiBcIkFwcmlsIGZvb2xzIVwiLFxyXG4gICAgICAgICAgICAgICAgb25DbGljazogKCkgPT4geyB0aGlzLnNldEFwcmlsRm9vbHNPcHRPdXQoIXRoaXMuZ2V0QXByaWxGb29sc09wdE91dCgpKTsgbG9jYXRpb24ucmVsb2FkKCkgfVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICBpZiAoIXRoaXMuZ2V0QXByaWxGb29sc09wdE91dCgpKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBIb3VyU2NhbGluZy5zY2FsaW5nID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIHVuaXRHZW5lcmFsOiBcInRlcmFsaWdodG1ldGVyKHMpXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgdW5pdFBsdXJhbDogXCJ0ZXJhbGlnaHRtZXRlcnNcIixcclxuICAgICAgICAgICAgICAgICAgICB1bml0U2luZ3VsYXI6IFwidGVyYWxpZ2h0bWV0ZXJcIixcclxuICAgICAgICAgICAgICAgICAgICBzY2FsZTogdGhpcy5ob3VyMlRlcmFsaWdodG1ldGVyU2NhbGluZygpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIFRpbWVsb2dVSS5vblNob3cub24oKHVpKSA9PiB0aGlzLnNob3dBcHJpbEZvb2xzUG9wdXAodWkpLCB0aGlzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdGhpcy5zZXRBcHJpbEZvb2xzT3B0T3V0KGZhbHNlKTtcclxuICAgICAgICAgICAgdGhpcy5zZXRIYXNTZWVuUG9wdXAoZmFsc2UpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHByaXZhdGUgc3RhdGljIHNob3dBcHJpbEZvb2xzUG9wdXAodWk6IFRpbWVsb2dVSSlcclxuICAgIHtcclxuICAgICAgICBpZiAodGhpcy5oYXNTZWVuUG9wdXAoKSkgcmV0dXJuO1xyXG4gICAgICAgIC8vSnVzdCBnb25uYSB1c2UgdGhlIHNldHRpbmdzIENTUyBmb3IgdGhpcy4uLlxyXG4gICAgICAgIGNvbnN0IGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4gICAgICAgIGVsZW1lbnQuY2xhc3NOYW1lID0gXCJ0bC1zZXR0aW5nc1wiO1xyXG4gICAgICAgIGVsZW1lbnQuc3R5bGUuY3Vyc29yID0gXCJwb2ludGVyXCI7XHJcbiAgICAgICAgY29uc3QgYmFjayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcbiAgICAgICAgYmFjay5jbGFzc05hbWUgPSBcInRsLXNldHRpbmdzLWJhY2tcIjtcclxuICAgICAgICBlbGVtZW50LmFwcGVuZChiYWNrKTtcclxuICAgICAgICBjb25zdCBkaXNtaXNzID0gKCkgPT5cclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGVsZW1lbnQucmVtb3ZlKCk7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0SGFzU2VlblBvcHVwKHRydWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBiYWNrLm9uY2xpY2sgPSAoKSA9PiBkaXNtaXNzKCk7XHJcbiAgICAgICAgZWxlbWVudC5vbmNsaWNrID0gKCkgPT4gZGlzbWlzcygpO1xyXG5cclxuICAgICAgICBjb25zdCBpbm5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcbiAgICAgICAgaW5uZXIuY2xhc3NOYW1lID0gXCJ0bC1zZXR0aW5ncy1pbm5lclwiO1xyXG4gICAgICAgIGVsZW1lbnQuYXBwZW5kKGlubmVyKTtcclxuXHJcbiAgICAgICAgY29uc3QgcG9wdXBFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgICAgICBwb3B1cEVsZW1lbnQuY2xhc3NOYW1lID0gXCJ0bC1zZXR0aW5ncy12ZXJzaW9uXCI7XHJcbiAgICAgICAgaW5uZXIuYXBwZW5kKHBvcHVwRWxlbWVudCk7XHJcblxyXG4gICAgICAgIGNvbnN0IGlzRWFybHlBcHJpbEZvb2xzID0gbmV3IERhdGUoKS5nZXRNb250aCgpIDwgMzsgLy9BcHJpbCBpcyAwLWluZGV4IG1vbnRoIDMuXHJcbiAgICAgICAgcG9wdXBFbGVtZW50LmlubmVySFRNTCA9IGA8aDE+SW50cm9kdWNpbmc6IHRoZSB0ZXJhbGlnaHRtZXRlciE8L2gxPlxyXG4gICAgICAgIDxkaXY+V2UncmUgZXhjaXRlZCB0byBpbnRyb2R1Y2UgYSBuZXcgZmVhdHVyZSEgRXhjbHVzaXZlbHkgbWFkZSBmb3IgeW91ciBiZW5lZml0LCBpbiBubyB3YXkgcmVsYXRlZCB0byAke2lzRWFybHlBcHJpbEZvb2xzID8gYGFuIHVwY29taW5nIGRhdGUuYCA6IGB0b2RheSdzIGRhdGUuYH08L2Rpdj5cclxuICAgICAgICA8ZGl2PkFsbCB0aW1lIHdpbGwgbm93IGJlIG1lYXN1cmVkIGluIFRlcmFsaWdodG1ldGVycyAtIHRoZSB0aW1lIGl0IHRha2VzIGZvciBsaWdodCB0byB0cmF2ZWwgMSAwMDAgMDAwIDAwMCAwMDAgbWV0ZXJzLjwvZGl2PlxyXG4gICAgICAgIDxkaXY+SWYgeW91IHRoaW5rIGFib3V0IGl0LCB0aGF0J3MgYSBtdWNoIG1vcmUgdW5pdmVyc2FsIHdheSBvZiBtZWFzdXJpbmcgdGltZSwgbm90IGFyYml0cmFyaWx5IGJvdW5kIHRvIHRoZSByb3RhdGlvbiBzcGVlZCBvZiBhIHBsYW5ldC4gV2UgaG9wZSB5b3UgZW5qb3khPC9kaXY+YDtcclxuXHJcbiAgICAgICAgdWkudGltZWxvZ1VJSW5uZXI/LmFwcGVuZENoaWxkKGVsZW1lbnQpO1xyXG4gICAgfVxyXG4gICAgcHVibGljIHN0YXRpYyBob3VyMlRlcmFsaWdodG1ldGVyU2NhbGluZygpXHJcbiAgICB7XHJcbiAgICAgICAgY29uc3QgbGlnaHRNZXRlcnNQZXJNcyA9IDI5OTc5Mi40NTg7XHJcbiAgICAgICAgY29uc3QgbGlnaHRNZXRlck1zID0gMSAvIGxpZ2h0TWV0ZXJzUGVyTXM7XHJcbiAgICAgICAgY29uc3QgdGVyYUxpZ2h0TWV0ZXJzTXMgPSBsaWdodE1ldGVyTXMgKiAxMDAwICogMTAwMCAqIDEwMDAgKiAxMDAwO1xyXG4gICAgICAgIGNvbnN0IHRlcmFMaWdodE1ldGVyc0hvdXJzID0gdGVyYUxpZ2h0TWV0ZXJzTXMgLyAoMTAwMCAqIDYwICogNjApXHJcbiAgICAgICAgcmV0dXJuIDEgLyB0ZXJhTGlnaHRNZXRlcnNIb3VycztcclxuICAgIH1cclxufSIsImltcG9ydCB7IEFwcmlsRm9vbHMgfSBmcm9tIFwiLi9GdW4vQXByaWxGb29sc1wiO1xyXG5pbXBvcnQgeyBSZWFzb25FbmhhbmNlbWVudHMgfSBmcm9tIFwiLi9SZWFzb25FbmhhbmNlbWVudHMvUmVhc29uc0VuaGFuY2VtZW50c1wiO1xyXG5pbXBvcnQgeyBUaW1lbG9nVUkgfSBmcm9tIFwiLi9UaW1lbG9nL1RpbWVsb2dVSVwiO1xyXG5pbXBvcnQgeyBNYXRlcmlhbEljb24gfSBmcm9tIFwiLi9VdGlscy9NYXRlcmlhbEljb25cIjtcclxuXHJcbkFwcmlsRm9vbHMuaW5pdCgpO1xyXG5NYXRlcmlhbEljb24uaW5pdGlhbGl6ZSgpO1xyXG5uZXcgVGltZWxvZ1VJKCk7XHJcbm5ldyBSZWFzb25FbmhhbmNlbWVudHMoKTsiLCJleHBvcnQgY29uc3QgUmVhc29uRW5oYW5jZW1lbnRDc3MgPSBgXHJcbi5yZS1sYWJlbFxyXG57XHJcbiAgICBmb250LXNpemU6IDEuNWVtO1xyXG4gICAgbWFyZ2luLWJvdHRvbTogMTBweDtcclxufVxyXG4ucmUtcmVhc29uLXNlbGVjdFxyXG57XHJcbiAgICBwYWRkaW5nOiA1cHg7XHJcbn1cclxuLnJlLXJlYXNvbi11aVxyXG57XHJcbiAgICB6LWluZGV4OiAyMDAwO1xyXG4gICAgcG9zaXRpb246IGZpeGVkO1xyXG4gICAgaW5zZXQ6IDA7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDAsMCwwLDAuNzUpO1xyXG4gICAgcGFkZGluZy10b3A6IDQ1dmg7XHJcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgICBjb2xvcjogd2hpdGU7XHJcbiAgICBmb250LXdlaWdodDogYm9sZDtcclxufVxyXG4ucmUtYnRuXHJcbntcclxuICAgIHBhZGRpbmc6IDAgdmFyKC0tYnV0dG9uLXBhZGRpbmcteCwgMTVweCk7XHJcbiAgICBtaW4td2lkdGg6IDgwcHg7XHJcbiAgICBoZWlnaHQ6IHZhcigtLWJ1dHRvbi1zaXplLCAzMHB4KTtcclxuICAgIGZvbnQtd2VpZ2h0OiA2MDA7XHJcbiAgICBmb250LXNpemU6IHZhcigtLWJ1dHRvbi1mb250LXNpemUsIDEycHgpO1xyXG4gICAgZm9udC1mYW1pbHk6IHZhcigtLWJvZHktZm9udC1mYW1pbHkpO1xyXG4gICAgYm9yZGVyOiAwO1xyXG4gICAgYm9yZGVyLXJhZGl1czogNHB4O1xyXG4gICAgbWFyZ2luOiA1cHg7XHJcbn1cclxuLnJlLWJ0bi5yZS1wcmltYXJ5XHJcbntcclxuICAgIGNvbG9yOiB2YXIoLS1wcmltYXJ5LWJnLXRleHQtY29sb3IsIHdoaXRlKTtcclxuICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLXByaW1hcnktNjAwKTtcclxufVxyXG4ucmUtYnRuLnJlLXNlY29uZGFyeVxyXG57XHJcbiAgICBjb2xvcjogdmFyKC0tc2Vjb25kYXJ5LWJnLXRleHQtY29sb3IsICM1MzUzNTMpO1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tc2Vjb25kYXJ5LTYwMCk7XHJcbn1cclxuLnJlLWJsdXJcclxue1xyXG4gICAgZmlsdGVyOiBibHVyKDJweCk7XHJcbn1cclxuLnJlLXN1Ym1pdHRpbmcgLnJlLWJ0blxyXG57XHJcbiAgICBkaXNwbGF5OiBub25lO1xyXG59XHJcbi5yZS1zdWJtaXR0aW5nLXRleHRcclxue1xyXG4gICAgZGlzcGxheTogbm9uZTtcclxuICAgIGZvbnQtc2l6ZTogMS41ZW07XHJcbn1cclxuLnJlLXN1Ym1pdHRpbmcgLnJlLXN1Ym1pdHRpbmctdGV4dFxyXG57XHJcbiAgICBkaXNwbGF5OiBibG9jaztcclxufVxyXG5gOyJdLCJuYW1lcyI6WyJEYXRlcyIsInN0YXRpYyIsInN0ciIsInNwbGl0IiwibGVuZ3RoIiwicHVzaCIsIkRhdGUiLCJqb2luIiwiZ2V0VGltZSIsInRpbWUiLCJpbmNsdWRlVGltZXN0YW1wIiwiZGF0ZSIsImdldEZ1bGxZZWFyIiwiZ2V0TW9udGgiLCJ0b1N0cmluZyIsInBhZFN0YXJ0IiwiZ2V0RGF0ZSIsImdldEhvdXJzIiwiZ2V0TWludXRlcyIsImhvdXJzIiwiaG91ciIsIk1hdGgiLCJmbG9vciIsIm1pbnV0ZSIsInJvdW5kIiwic2V0SG91cnMiLCJzZXREYXRlIiwiZ2V0RGF5Iiwid2VlazEiLCJwYXJzZUludCIsIkV2ZW50SGFuZGxlciIsImhhbmRsZXJzIiwib24iLCJoYW5kbGVyIiwiY29udGV4dCIsInRoaXMiLCJvZmYiLCJmaWx0ZXIiLCJoIiwiZmlyZSIsInZhbCIsImZvckVhY2giLCJjYWxsIiwiTnVtYmVycyIsIm51bSIsImRlY2ltYWxzIiwiY2VpbCIsImFyciIsImkiLCJIb3VyU2NhbGluZyIsInNjYWxpbmciLCJzY2FsZSIsInNjYWxlZCIsInVuaXRHZW5lcmFsIiwidW5pdFNpbmd1bGFyIiwidW5pdFBsdXJhbCIsImdldFVuaXROYW1lIiwiTWF0ZXJpYWxJY29uIiwibGluayIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsImhyZWYiLCJyZWwiLCJoZWFkIiwiYXBwZW5kQ2hpbGQiLCJpY29uIiwiZmlsbCIsInNwYW4iLCJjbGFzc05hbWUiLCJpbm5lclRleHQiLCJzdHlsZSIsInZlcnRpY2FsQWxpZ24iLCJmb250U2l6ZSIsImZvbnRWYXJpYXRpb25TZXR0aW5ncyIsIldhaXQiLCJtcyIsIlByb21pc2UiLCJyZXNvbHZlIiwid2luZG93Iiwic2V0VGltZW91dCIsImRlbGVnYXRlIiwiaGFuZGxlIiwic2V0SW50ZXJ2YWwiLCJjbGVhckludGVydmFsIiwiQXBpIiwibWV0aG9kIiwidXJsIiwiYm9keSIsInhociIsIlhNTEh0dHBSZXF1ZXN0Iiwib3BlbiIsInNldFJlcXVlc3RIZWFkZXIiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyZWFkeVN0YXRlIiwicmVzdWx0IiwiSlNPTiIsInBhcnNlIiwicmVzcG9uc2VUZXh0Iiwic3RhdHVzIiwiaGFzT3duUHJvcGVydHkiLCJrZXkiLCJhbGVydCIsImVycm9yIiwiY29uc29sZSIsImxvZyIsInNlbmQiLCJzdHJpbmdpZnkiLCJIaUJvYiIsImVudHJpZXMiLCJzb21lIiwiZSIsInJlYXNvbklkIiwiZGF0YSIsIm1hcCIsInN0YXJ0IiwiZm9ybWF0Iiwic3RhcnRIb3VyIiwiZW5kIiwibGVuZ3RoSG91cnMiLCJ1bmRlZmluZWQiLCJyZWFzb24iLCJjb21tZW50IiwiZGF0ZVN0ciIsInVzZXJJZCIsImdldFVzZXJJZCIsIm1ldGFkYXRhIiwidGltZUxvZ0VudHJ5UmVhc29uIiwidmFsdWVzIiwidiIsImlkIiwic2VydmVySWQiLCJuYW1lIiwidmFsdWUiLCJzaGVldCIsInVzZXJJbmZvIiwiVGltZWxvZ1NhdmVTdGF0dXMiLCJSZWFzb25FbmhhbmNlbWVudE1vZGUiLCJUaW1lbG9nTW9kZWwiLCJzaGVldHMiLCJvbkRhdGVVcGRhdGVkIiwib25SZWFzb25zVXBkYXRlZCIsIm9uU2hlZXRVcGRhdGVkIiwib25TaGVldHNVcGRhdGVkIiwib25TYXZlU3RhdHVzVXBkYXRlZCIsInNhdmVIYW5kbGUiLCJzYXZpbmciLCJjYWxjdWxhdGluZ0ZsZXgiLCJmZXRjaGluZ1NoZWV0cyIsInJlYXNvbnMiLCJhc3luYyIsImZldGNoU2hlZXRzIiwiZmV0Y2hSZWFzb25zIiwiU2F2ZWQiLCJ1bnRpbCIsImVtcGxveWVlU2hlZXRzIiwiY3ljbGVTdGFydERhdGUiLCJjeWNsZUVuZERhdGUiLCJuZXdTaGVldCIsImRhdGVzIiwibG9ja2VkIiwiaG91cnNQZXJEYXkiLCJzb3J0IiwiYSIsImIiLCJmaW5kIiwicyIsImF0dGVuZGFuY2UiLCJzdW1tYXJ5IiwicG90ZW50aWFsV29ya2luZ0hvdXJzIiwicG90ZW50aWFsV29ya2luZ0RheXMiLCJkaXJ0eSIsIm5vdyIsIm5vbldvcmtpbmdEYXkiLCJob3Vyc1RvV29yayIsImZhdm9yaXRlZCIsImRhdGVEZXNjcmlwdGlvbiIsIm5vdGUiLCJkZXNjcmlwdGlvbiIsImhhc0NvbW1lbnQiLCJwYWlkVGltZW9mZlNlY29uZHMiLCJmYXZvcml0ZSIsImdldEZhdm9yaXRlZERhdGUiLCJjaGFuZ2VTdGFydEhvdXIiLCJpbmRleCIsImQiLCJxdWV1ZVNhdmUiLCJjaGFuZ2VMZW5ndGhIb3VycyIsImNoYW5nZVJlYXNvbiIsImNoYW5nZUNvbW1lbnQiLCJ0b2dnbGVDb21tZW50Iiwib2xkRmF2b3JpdGUiLCJsb2NhbFN0b3JhZ2UiLCJzZXRJdGVtIiwiZ2V0SXRlbSIsImZldGNoU2hlZXQiLCJkZWxldGVFbnRyeSIsInNwbGljZSIsIm9yaWdpbmFsRGF0ZSIsIm9yaWdpbmFsU2hlZXQiLCJkYXRlSW5kZXgiLCJpbmRleE9mIiwiZW50cnlJbmRleCIsInNoZWV0SW5kZXgiLCJsYXN0IiwiZmluZExhc3RFbnRyeSIsImluY2x1ZGVzIiwiZW50cnkiLCJjbGVhclRpbWVvdXQiLCJzYXZlIiwiV2FpdGluZyIsIlNhdmluZyIsIm1pbmltdW1XYWl0Iiwic3VibWl0IiwiRXJyb3IiLCJnZXRGbGV4UG9saWN5IiwicHJldmlvdXNEYXlzSW5jbHVkZWQiLCJmbGV4V2FybmluZ1RocmVzaG9sZCIsImNhY2hlS2V5IiwicmVtb3ZlSXRlbSIsInNoZWV0QmFsYW5jZXMiLCJkYXkiLCJiYWxhbmNlIiwic3VtIiwiZGF0ZVN0cmluZyIsInJlYWxCYWxhbmNlIiwicmVhbGxvY2F0ZWRCYWxhbmNlIiwicG9saWN5IiwiY3VycmVudERhdGVUaW1lIiwib3ZlcmR1ZURhdGVUaW1lIiwid2FybmluZ0RhdGVUaW1lIiwiYWxsRGF0ZXMiLCJnZXRDYWNoZWRCYWxhbmNlcyIsImoiLCJwcmV2RGF0ZSIsImFtb3VudCIsIm1pbiIsImFicyIsInVuYmFsYW5jZWREYXRlcyIsIm92ZXJkdWVEYXRlcyIsIndhcm5pbmdEYXRlcyIsIlRpbWVsb2dVSVNldHRpbmdzQnV0dG9ucyIsImJ1dHRvbnMiLCJ0ZXh0IiwidGl0bGUiLCJvbkNsaWNrIiwidWkiLCJtb2RlbCIsImNsZWFyU2hlZXRCYWxhbmNlQ2FjaGUiLCJ0aGVuIiwidXBkYXRlQmFsYW5jZSIsIlRpbWVsb2dVSSIsInNoZWV0RHJvcGRvd25PcHRpb25zIiwic2hlZXREYXRlcyIsIndlZWtTdW1zIiwib25EYXJrTW9kZUNoYW5nZSIsInRpbWVsb2ciLCJhZGRCdXR0b24iLCJwYXJlbnQiLCJxdWVyeVNlbGVjdG9yIiwidG9nZ2xlQnV0dG9uIiwiZ2V0Iiwib25jbGljayIsInRvZ2dsZVZpc2libGUiLCJjcmVhdGVVSSIsImNyZWF0ZU1vZGVsIiwibG9jYXRpb24iLCJoYXNoIiwiaXNEYXJrTW9kZSIsInRpbWVsb2dVSU91dGVyIiwiZGlzcGxheSIsIm92ZXJmbG93Iiwic2hlZXRDb250YWluZXIiLCJpbm5lckhUTUwiLCJvblNob3ciLCJ0b2dnbGVEYXJrTW9kZSIsImFwcGVuZCIsInRpbWVsb2dVSUlubmVyIiwiY2xvc2VCdXR0b24iLCJkYXJrTW9kZUJ1dHRvbiIsImRhcmsiLCJjbGFzc0xpc3QiLCJhZGQiLCJyZW1vdmUiLCJzZXR0aW5zV2luZG93IiwiY3JlYXRlU2V0dGluZ3NXaW5kb3ciLCJzZXR0aW5nc0J1dHRvbiIsImN1cnNvciIsInRleHREZWNvcmF0aW9uIiwic2hlZXREcm9wZG93bkxhYmVsIiwic2hlZXREcm9wZG93biIsIm9uY2hhbmdlIiwib25TZWxlY3RlZFNoZWV0Q2hhbmdlIiwic2F2ZVN0YXR1cyIsIm9uU2F2ZVN0YXR1c0NsaWNrIiwiYmFsYW5jZVBhcmVudCIsImJhbGFuY2VMYWJlbCIsImJhbGFuY2VXYXJuaW5nIiwiZWxlbWVudCIsImJhY2siLCJpbm5lciIsInNldHRpbmdzRWxlbWVudCIsImJ1dHRvbiIsImNoYW5nZWxvZyIsInZlcnNpb24iLCJ2ZXJzaW9uRWxlbWVudCIsInZlcnNpb25UaXRsZSIsImxpc3QiLCJ0ZXh0RWxlbWVudCIsImluaXRpYWxpemUiLCJnZXREYXRlQ29udGFpbmVyIiwic2VsZWN0ZWRTaGVldCIsImRhdGVDb250YWluZXIiLCJzdGFyQnV0dG9uIiwicGFzdGVCdXR0b24iLCJ3ZWVrZW5kRGVzY3JpcHRpb24iLCJ3ZWVrU2VwZXJhdG9yIiwic2V0RmF2b3JpdGVkRGF0ZSIsInRvRGF0ZVN0cmluZyIsIm5ld0VudHJ5IiwicGFzdGVGcm9tU3RhcnJlZCIsImFkZFRvV2Vla1N1bSIsImdldEVudHJ5Q29udGFpbmVyIiwiZW50cnlDb250YWluZXIiLCJwIiwiZW5kSG91ciIsImNvbW1lbnRCdXR0b24iLCJub1JlYXNvbldhcm5pbmciLCJ0eXBlIiwiZGlzYWJsZWQiLCJwYXJzZVRpbWVUb2hvdXJzIiwiZW5kTGFiZWwiLCJ1cGRhdGVSZWFzb25zRHJvcGRvd24iLCJzdW1Ib3VycyIsInN0ZXAiLCJ1bnNjYWxlIiwicGFyc2VGbG9hdCIsImR1cmF0aW9uTGFiZWwiLCJwbGFjZWhvbGRlciIsIndlZWtTdW0iLCJtYXJnaW5Ub3AiLCJmb3JtYXRIb3VyIiwicmVtb3ZlZEVudHJpZXMiLCJ3IiwidG90YWxIb3VycyIsIndlZWtOdW1iZXIiLCJnZXRXZWVrTnVtYmVyRnJvbURhdGUiLCJzZWxlY3QiLCJvcHRpb24iLCJjb250YWlucyIsIm8iLCJnZXRGbGV4U3RhdHVzIiwidG90YWxCYWxhbmNlIiwib3B0T3V0IiwieWVhciIsImFwcmlsRm9vbHMiLCJtb250aCIsIndlZWtlbmREYXlzIiwiYXByaWxGb29sc0VuZCIsImlzQXByaWxGb29scyIsInNldEFwcmlsRm9vbHNPcHRPdXQiLCJnZXRBcHJpbEZvb2xzT3B0T3V0IiwicmVsb2FkIiwiaG91cjJUZXJhbGlnaHRtZXRlclNjYWxpbmciLCJzaG93QXByaWxGb29sc1BvcHVwIiwic2V0SGFzU2VlblBvcHVwIiwiaGFzU2VlblBvcHVwIiwiZGlzbWlzcyIsInBvcHVwRWxlbWVudCIsImlzRWFybHlBcHJpbEZvb2xzIiwiaW5pdCIsInN1Ym1pdHRpbmciLCJjbG9ja0luQnV0dG9uRmluZGVyIiwicmVhc29uRW5oYW5jZW1lbnRVSSIsImxhYmVsIiwicmVhc29uU2VsZWN0Iiwic2F2ZURlZmF1bHRSZWFzb25WYWx1ZSIsImNhbmNlbEJ1dHRvbiIsImNhbmNlbCIsInN1Ym1pdEJ1dHRvbiIsInN1Ym1pdHRpbmdUZXh0IiwiZmluZFVuZW5oYW5jZWRCdXR0b25zIiwiZW5oYW5jZUNsb2NrSW5CdXR0b24iLCJGaXhMYXRlc3QiLCJGaXhBbGwiLCJhcHBSb290Iiwic2VsZWN0b3IiLCJxdWVyeSIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJtb2RlIiwiYWRkRXZlbnRMaXN0ZW5lciIsInNob3dSZWFzb25GaXhlciIsImxvYWREZWZhdWx0UmVhc29uVmFsdWUiLCJzZXRVSVZpc2libGUiLCJmaXhBbGwiLCJmaXhMYXRlc3QiLCJsYXRlc3QiXSwic291cmNlUm9vdCI6IiJ9