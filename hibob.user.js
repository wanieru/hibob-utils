// ==UserScript==
// @name        HiBob Time Utilities
// @version     1.0.10
// @author      Funday Factory
// @description Utilities to make it easier to log time in HiBob
// @match       https://app.hibob.com/*
// @namespace   http://tampermonkey.net/
// @icon        https://www.google.com/s2/favicons?sz=64&domain=hibob.com
// @grant       none
// ==/UserScript==

(()=>{"use strict";class e{static xhr(e,t,n){return new Promise((s=>{let a=new XMLHttpRequest;a.open(e,t),a.setRequestHeader("Accept","application/json"),a.setRequestHeader("Content-Type","application/json"),a.onreadystatechange=()=>{if(4===a.readyState){let e;try{e=JSON.parse(a.responseText)}catch(t){e={result:a.responseText}}200!==a.status&&(alert(`HiBob Utils: Error ${a.status} - check the developer console for more information.`),console.log(`HiBob Utils: Error ${a.status} - check the developer console for more information.`),console.log(a)),s({status:a.status,body:e})}},a.send(JSON.stringify(n))}))}}class t{static parse(e){if(!e)return null;const t=e.split("T");return t.length<2&&t.push("00:00"),new Date(t.join("T")).getTime()}static format(e,t){if(!e)return"";const n=new Date(e);return`${n.getFullYear()}-${(n.getMonth()+1).toString().padStart(2,"0")}-${n.getDate().toString().padStart(2,"0")}${t?`T${n.getHours().toString().padStart(2,"0")}:${n.getMinutes().toString().padStart(2,"0")}`:""}`}static formatHour(e){const t=Math.floor(e%24),n=Math.round(60*(e-t));return`${t.toString().padStart(2,"0")}:${n.toString().padStart(2,"0")}`}static getWeekNumberFromDate(e){var t=new Date(e);t.setHours(0,0,0,0),t.setDate(t.getDate()+3-(t.getDay()+6)%7);var n=new Date(t.getFullYear(),0,4);return 1+Math.round(((t.getTime()-n.getTime())/864e5-3+(n.getDay()+6)%7)/7)}static parseTimeTohours(e){const t=e.split(":");return parseInt(t[0])+parseInt(t[1])/60}}class n{static async submit(n,s){if(s.some((e=>!e.reasonId)))return void console.log("WARNING: SOME ENTRIES HAVE NO REASON SET - NOT SUBMITTING!!",n,s);const a=s.map((e=>{var s;return{start:t.format(n+3600*e.startHour*1e3,!0),end:e.lengthHours?t.format(n+3600*(e.startHour+e.lengthHours)*1e3,!0):void 0,reason:e.reasonId,comment:null!==(s=e.comment)&&void 0!==s?s:void 0}})),o=t.format(n,!1),i=await this.getUserId();await e.xhr("POST",`https://app.hibob.com/api/attendance/employees/${i}/attendance/entries?forDate=${o}`,a)}static async timelogReasons(){return(await this.metadata()).timeLogEntryReason.values.map((e=>({id:e.serverId,name:e.value})))}static async attendance(t){return(await e.xhr("GET",`https://app.hibob.com/api/employees/attendance/my/sheets/${t}`,{})).body}static async sheets(){const t=await this.getUserId();return(await e.xhr("GET",`https://app.hibob.com/api/employees/${t}/timelog/attendance/sheets`,{})).body}static async metadata(){return(await e.xhr("GET","https://app.hibob.com/api/company/metadata/lists/?includeArchived=true",{})).body}static async getUserId(){var e;return"string"!=typeof this.userId&&await this.userInfo(),null!==(e=this.userId)&&void 0!==e?e:""}static async userInfo(){const t=await e.xhr("GET","https://app.hibob.com/api/user",{});return this.userId=t.body.id,t.body}}class s{static for(e){return new Promise((t=>{window.setTimeout((()=>t()),e)}))}static until(e){return new Promise((t=>{const n=window.setInterval((()=>{e()&&(t(),window.clearInterval(n))}),1)}))}}var a,o;!function(e){e[e.FixAll=0]="FixAll",e[e.FixLatest=1]="FixLatest"}(a||(a={}));class i{static initialize(){const e=document.createElement("link");e.href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200",e.rel="stylesheet",document.head.appendChild(e)}static get(e,t=!1){const n=document.createElement("span");return n.className="material-symbols-outlined",n.innerText=e,n.style.verticalAlign="middle",n.style.fontSize="1.5em",n.style.fontVariationSettings="'FILL' "+(t?1:0),n}}class r{static round(e,t){return Math.round(e*10**t)/10**t}static floor(e,t){return Math.floor(e*10**t)/10**t}static ceil(e,t){return Math.ceil(e*10**t)/10**t}static sum(e){let t=0;for(let n=0;n<e.length;n++)t+=e[n];return t}}class l{constructor(){this.handlers=[]}on(e,t){this.handlers.push({handler:e,context:t})}off(e,t){this.handlers=this.handlers.filter((n=>n.handler!==e||n.context!==t))}fire(e){this.handlers.forEach((t=>t.handler.call(t.context,e)))}}!function(e){e[e.Waiting=0]="Waiting",e[e.Saving=1]="Saving",e[e.Saved=2]="Saved"}(o||(o={}));class d{constructor(){this.sheets=[],this.onDateUpdated=new l,this.onReasonsUpdated=new l,this.onSheetUpdated=new l,this.onSheetsUpdated=new l,this.onSaveStatusUpdated=new l,this.saveHandle=-1,this.saving=!1,this.calculatingFlex=!1,this.reasons=[]}initialize(){this.fetchSheets(),this.fetchReasons(),this.onSaveStatusUpdated.fire(o.Saved)}async fetchSheets(){var e,s;this.sheets=[];const a=await n.sheets();for(const n of a.employeeSheets){const a=null!==(e=t.parse(n.cycleStartDate))&&void 0!==e?e:0,o=null!==(s=t.parse(n.cycleEndDate))&&void 0!==s?s:0,i={id:n.id,status:n.status,start:a,end:o,dates:[],locked:n.locked,hoursPerDay:0};this.sheets.push(i)}this.sheets.sort(((e,t)=>t.start-e.start)),this.onSheetsUpdated.fire(this.sheets)}async fetchReasons(){this.reasons=(await n.metadata()).timeLogEntryReason.values,this.onReasonsUpdated.fire(this.reasons)}async fetchSheet(e){var s;const a=this.sheets.find((t=>t.id===e));if(!a)return;const o=await n.attendance(e);a.hoursPerDay=o.summary.potentialWorkingHours/o.summary.potentialWorkingDays,a.dates=[];for(const e of o.attendance){const n={dirty:!1,date:null!==(s=t.parse(e.date))&&void 0!==s?s:Date.now(),weekend:"WeekendEvent"===e.status,favorited:!1,entries:e.entries.map((n=>{var s,a,o,i,l;return{startHour:r.floor(((null!==(s=t.parse(n.start))&&void 0!==s?s:Date.now())-(null!==(a=t.parse(e.date))&&void 0!==a?a:Date.now()))/36e5,2),lengthHours:r.ceil(((null!==(o=t.parse(n.end))&&void 0!==o?o:Date.now())-(null!==(i=t.parse(n.start))&&void 0!==i?i:Date.now()))/36e5,2),reasonId:n.reason,comment:null!==(l=n.comment)&&void 0!==l?l:null,hasComment:!!n.comment}})).sort(((e,t)=>e.startHour-t.startHour))};a.dates.push(n)}a.dates.sort(((e,t)=>t.date-e.date));const i=await this.getFavoritedDate();i&&i.sheet===a&&(i.date.favorited=!0),this.onSheetUpdated.fire(a)}changeStartHour(e,t,n){const s=this.sheets.find((t=>t.dates.some((t=>t===e))));s&&(e.entries[t].startHour=n,e.dirty=!0,this.queueSave(),this.onDateUpdated.fire({sheet:s,date:e}))}changeLengthHours(e,t,n){const s=this.sheets.find((t=>t.dates.some((t=>t===e))));s&&(e.entries[t].lengthHours=n,e.dirty=!0,this.queueSave(),this.onDateUpdated.fire({sheet:s,date:e}))}changeReason(e,t,n){const s=this.sheets.find((t=>t.dates.some((t=>t===e))));s&&(e.entries[t].reasonId=n,e.dirty=!0,this.queueSave(),this.onDateUpdated.fire({sheet:s,date:e}))}changeComment(e,t,n){const s=this.sheets.find((t=>t.dates.some((t=>t===e))));s&&(e.entries[t].comment=n,e.entries[t].hasComment=!0,e.dirty=!0,this.queueSave(),this.onDateUpdated.fire({sheet:s,date:e}))}toggleComment(e,t){const n=this.sheets.find((t=>t.dates.some((t=>t===e))));n&&(e.entries[t].hasComment=!e.entries[t].hasComment,e.entries[t].comment=e.entries[t].hasComment?"":null,e.dirty=!0,this.queueSave(),this.onDateUpdated.fire({sheet:n,date:e}))}async setFavoritedDate(e){const n=this.sheets.find((t=>t.dates.some((t=>t===e))));if(!n)return;const s=await this.getFavoritedDate();s&&(s.date.favorited=!1,this.onDateUpdated.fire(s)),e.favorited=!0,this.onDateUpdated.fire({sheet:n,date:e}),window.localStorage.setItem("tl_favorite",JSON.stringify({date:t.format(e.date,!1)}))}async getFavoritedDate(){const e=window.localStorage.getItem("tl_favorite");if(!e)return null;const n=JSON.parse(e),s=t.parse(n.date);if("number"==typeof s){const e=this.sheets.find((e=>e.start<=s&&e.end>=s));if(e){e.dates.length<1&&await this.fetchSheet(e.id);const t=e.dates.find((e=>e.date===s));if(t)return{sheet:e,date:t}}}return null}deleteEntry(e,t){const n=this.sheets.find((t=>t.dates.some((t=>t===e))));n&&(e.entries.splice(t,1),e.dirty=!0,this.queueSave(),this.onDateUpdated.fire({sheet:n,date:e}))}async findLastEntry(e){const t=this.sheets.find((t=>t.dates.some((t=>t===e))));if(!t)return;let n=t.dates.indexOf(e),s=-1;for(let e=this.sheets.indexOf(t);e<this.sheets.length;e++){const t=this.sheets[e];for(t.dates.length<1&&await this.fetchSheet(t.id);n<t.dates.length;n++){const e=t.dates[n];if(e.entries.length>0)return s<0?e.entries[e.entries.length-1]:e.entries[s];s=0}n=0}}async newEntry(e){const t=this.sheets.find((t=>t.dates.some((t=>t===e))));if(!t)return;const n=await this.findLastEntry(e);let s=8.5,a=r.round(t.hoursPerDay,2),o="";n&&(e.entries.includes(n)&&(s=n.startHour+n.lengthHours,a=1),o=n.reasonId),e.entries.push({startHour:s,lengthHours:a,reasonId:o,comment:null,hasComment:!1}),e.dirty=!0,this.queueSave(),this.onDateUpdated.fire({sheet:t,date:e})}async pasteFromStarred(e){if(e.entries.length>0)return;const t=this.sheets.find((t=>t.dates.some((t=>t===e))));if(!t)return;const n=await this.getFavoritedDate();if(n&&n.date!==e){for(const t of n.date.entries)e.entries.push({startHour:t.startHour,lengthHours:t.lengthHours,reasonId:t.reasonId,comment:t.comment,hasComment:t.hasComment});e.dirty=!0,this.queueSave(),this.onDateUpdated.fire({sheet:t,date:e})}}queueSave(){window.clearTimeout(this.saveHandle),this.saveHandle=window.setTimeout((()=>this.save()),500),this.onSaveStatusUpdated.fire(o.Waiting)}async save(){await s.until((()=>!this.saving)),this.saving=!0,this.onSaveStatusUpdated.fire(o.Saving);for(const e of this.sheets)for(const t of e.dates)t.dirty&&(await n.submit(t.date,t.entries),t.dirty=!1);this.onSaveStatusUpdated.fire(o.Saved),this.saving=!1}async getCurrentBalanceHours(e){var t;const n=this.sheets.indexOf(e),a={};let o=0;if(this.sheets){await s.until((()=>!this.calculatingFlex)),this.calculatingFlex=!0;for(let e=n+1;e>=n&&e<this.sheets.length;e--){const n=this.sheets[e];if(!n)continue;const s=`tl_cached_hour_balance_${n.id}`;let i=0;if(n.locked&&null!==window.localStorage.getItem(s))i=parseFloat(null!==(t=window.localStorage.getItem(s))&&void 0!==t?t:"0");else{n.dates.length<1&&await this.fetchSheet(n.id);let e=n.dates.filter((e=>!e.weekend)).length*n.hoursPerDay,t=r.sum(n.dates.map((e=>r.sum(e.entries.map((e=>e.lengthHours))))));t>0&&(i-=e,i+=t),n.locked&&n.id>0&&window.localStorage.setItem(s,i.toString())}o+=i,a[n.id.toString()]=i}this.calculatingFlex=!1}return{sheets:a,balance:o}}}i.initialize(),new class{constructor(){this.sheetDropdownOptions=[],this.sheetDates=[],this.weekSums=[],this.reasons=[],window.timelog=this,this.addButton()}async addButton(){for(;;){const e=document.querySelector("div.app-content > app-top-bar.app-top-bar > div.actions");if(e){this.toggleButton=document.createElement("button"),this.toggleButton.className="tl-toggle-btn",this.toggleButton.appendChild(i.get("sentiment_very_satisfied")),this.toggleButton.title="HiBob Utilities",this.toggleButton.onclick=()=>this.toggleVisible(),e.appendChild(this.toggleButton),this.createUI(),this.createModel();break}await s.for(1)}}toggleVisible(){var e;this.timelogUIOuter&&("none"===this.timelogUIOuter.style.display?(this.timelogUIOuter.style.display="block",document.body.style.overflow="hidden",this.sheetContainer&&(this.sheetContainer.innerHTML=""),null===(e=this.model)||void 0===e||e.fetchSheets()):(this.timelogUIOuter.style.display="none",document.body.style.overflow="initial"))}createUI(){const e=document.createElement("style");e.innerHTML="\n.tl-toggle-btn\n{\n    border: none;\n    background: none;\n    font-size: 2em;\n}\n.tl-close-btn\n{\n    font-size: 2em;\n    position: absolute;\n    right: 5px;\n}\n.tl-ui\n{\n    position: fixed;\n    z-index: 1000;\n    inset: 0px;\n    background-color: white;\n    overflow-y: scroll;\n    padding: 10px;\n}        \n.tl-date\n{\n    margin-top: 10px;\n    padding: 10px;\n    border: 1px solid gray;\n    border-radius: 5px;\n}\n.tl-save-status, .tl-add-entry-btn\n{\n    margin-left: 10px;\n}\n.tl-entry\n{\n    margin-top: 5px;\n}\n.tl-entry > *\n{\n    margin-left: 5px;\n}\n.tl-entry > input[type=number]\n{\n    width: 50px;\n}\n.tl-entry > input[type=time]\n{\n    width: 75px;\n}\n.tl-save-status\n{\n    font-weight: bold;\n}\n.tl-sheet-select\n{\n    margin-left: 5px;\n}\n.tl-date-label\n{\n    font-weight: bold;\n}\n.tl-date-label.tl-date-label-weekend\n{\n    font-weight: initial;\n    font-style: italic;\n    color: gray;\n}\n.tl-entry-reason \n{\n    padding: 3px;\n}\n.tl-remove-entry-btn\n{\n    float: right;\n}\n.tl-week-seperator\n{\n    margin-top: 57px;\n}\n.tl-balance-label\n{\n    margin: 5px;\n}\n.tl-ui-inner\n{\n    display: table;\n    margin-left: auto;\n    margin-right: auto;\n}\n.tl-ui-inner, .tl-week-seperator, .tl-date\n{\n    min-width: 650px;\n}\n.tl-entry-comment {\n    margin-top: 5px;\n    margin-bottom: 15px;\n    width: 100%;\n    display: none;\n}\n.tl-has-comment .tl-entry-comment\n{\n    display: block;\n}\n.tl-success\n{\n    color: #02B875;\n}\n.tl-warning\n{\n    color: #F0AF52;\n}\n.tl-danger\n{\n    color: #DA5652;\n}\n.tl-sum-hours\n{\n    position: absolute;\n    margin-top: -23px;\n}\n.tl-week-sum\n{\n    position: absolute;\n    margin-top: -57px;\n    text-decoration: underline;\n}\n.tl-star-button\n{\n    background: none;\n    border: none;\n    margin: 0;\n    padding: 0;\n}\n.tl-star-button.tl-favorite\n{\n    color: #f1a00b;\n    opacity: 1;\n}\n.tl-paste-btn {\n    margin-left: 5px;\n    display: none;\n}\n.tl-has-favorite .tl-paste-btn:not(.tl-hide-favorite-button)\n{\n    display: inline-block;\n}\n.tl-show-on-hover\n{\n    opacity: 0;\n}\n.tl-date:hover .tl-show-on-hover\n{\n    opacity: 1;\n}\n",document.body.appendChild(e),this.timelogUIOuter=document.createElement("div"),this.timelogUIOuter.className="tl-ui",this.timelogUIOuter.style.display="none",document.body.append(this.timelogUIOuter),this.timelogUIInner=document.createElement("div"),this.timelogUIInner.className="tl-ui-inner",this.timelogUIOuter.append(this.timelogUIInner);const t=document.createElement("button");t.className="tl-close-btn",t.appendChild(i.get("close")),t.onclick=()=>this.toggleVisible(),this.timelogUIInner.appendChild(t);const n=document.createElement("span");n.innerText="Sheet:",this.timelogUIInner.appendChild(n),this.sheetDropdown=document.createElement("select"),this.sheetDropdown.className="tl-sheet-select",this.sheetDropdown.onchange=()=>this.onSelectedSheetChange(),this.timelogUIInner.appendChild(this.sheetDropdown),this.saveStatus=document.createElement("span"),this.saveStatus.className="tl-save-status",this.timelogUIInner.append(this.saveStatus),this.balanceLabel=document.createElement("div"),this.balanceLabel.innerText="Balance: ",this.balanceLabel.className="tl-balance-label",this.timelogUIInner.append(this.balanceLabel),this.sheetContainer=document.createElement("div"),this.sheetContainer.className="tl-sheet",this.timelogUIInner.appendChild(this.sheetContainer)}createModel(){this.model&&(this.model.onDateUpdated.off(this.onDateUpdated,this),this.model.onReasonsUpdated.off(this.onReasonsUpdated,this),this.model.onSaveStatusUpdated.off(this.onSaveStatusUpdated,this),this.model.onSheetUpdated.off(this.onSheetUpdated,this),this.model.onSheetsUpdated.off(this.onSheetsUpdated,this)),this.model=new d,this.model.onDateUpdated.on(this.onDateUpdated,this),this.model.onReasonsUpdated.on(this.onReasonsUpdated,this),this.model.onSaveStatusUpdated.on(this.onSaveStatusUpdated,this),this.model.onSheetUpdated.on(this.onSheetUpdated,this),this.model.onSheetsUpdated.on(this.onSheetsUpdated,this),this.model.initialize()}getDateContainer(e){if(this.selectedSheet===e.sheet&&this.sheetContainer){let t=this.sheetDates.find((t=>t.date===e.date));if(!t){if(t={date:e.date,parent:document.createElement("div"),entries:[],starButton:document.createElement("button"),pasteButton:document.createElement("button")},this.sheetDates.push(t),t.parent.className="tl-date",this.sheetContainer.appendChild(t.parent),1===new Date(e.date.date).getDay()){const e=document.createElement("div");e.className="tl-week-seperator",this.sheetContainer.appendChild(e)}t.parent.append(t.starButton),t.starButton.onclick=()=>{var t;return null===(t=this.model)||void 0===t?void 0:t.setFavoritedDate(e.date)},t.starButton.className="tl-star-button tl-show-on-hover",t.starButton.title="Favorite Day";const n=document.createElement("span");if(n.className="tl-date-label",n.innerText=new Date(e.date.date).toDateString(),e.date.weekend&&n.classList.add("tl-date-label-weekend"),t.parent.append(n),!e.sheet.locked){const n=document.createElement("button");n.appendChild(i.get("add")),n.className="tl-add-entry-btn tl-show-on-hover",n.onclick=()=>{var t;return null===(t=this.model)||void 0===t?void 0:t.newEntry(e.date)},t.parent.append(n),t.pasteButton=document.createElement("button"),t.pasteButton.appendChild(i.get("switch_access_shortcut_add")),t.pasteButton.title="Paste from Favorite Day",t.pasteButton.className="tl-paste-btn tl-show-on-hover",t.pasteButton.onclick=()=>{var t;return null===(t=this.model)||void 0===t?void 0:t.pasteFromStarred(e.date)},t.parent.append(t.pasteButton)}this.addToWeekSum(t)}return t}return null}getEntryContainer(e,n,s){let a=n.entries.find((e=>e.entry===s));if(!a){a={entry:s,parent:document.createElement("div"),startHour:document.createElement("input"),endHour:document.createElement("input"),length:document.createElement("input"),reason:document.createElement("select"),comment:document.createElement("input"),commentButton:document.createElement("button")},n.entries.push(a),a.parent.className="tl-entry",n.parent.appendChild(a.parent),a.startHour.type="time",a.startHour.className="tl-entry-start",e.sheet.locked&&(a.startHour.disabled=!0),a.startHour.onchange=()=>{var n,o,i;const l=s.startHour+s.lengthHours;null===(n=this.model)||void 0===n||n.changeStartHour(e.date,e.date.entries.indexOf(s),t.parseTimeTohours(null!==(o=null==a?void 0:a.startHour.value)&&void 0!==o?o:"08:00"));const d=r.round(l-s.startHour,2);null===(i=this.model)||void 0===i||i.changeLengthHours(e.date,e.date.entries.indexOf(s),d)},a.parent.appendChild(a.startHour);const o=document.createElement("span");o.className="tl-end-label",o.innerText="-",a.parent.appendChild(o),a.endHour.type="time",a.endHour.className="tl-entry-end",e.sheet.locked&&(a.endHour.disabled=!0),a.endHour.onchange=()=>{var n;if(null==a?void 0:a.endHour){const o=r.round(t.parseTimeTohours(a.endHour.value)-s.startHour,2);null===(n=this.model)||void 0===n||n.changeLengthHours(e.date,e.date.entries.indexOf(s),o)}},a.parent.appendChild(a.endHour),a.reason.onchange=()=>{var t,n;return null===(t=this.model)||void 0===t?void 0:t.changeReason(e.date,e.date.entries.indexOf(s),null!==(n=null==a?void 0:a.reason.value)&&void 0!==n?n:"")},e.sheet.locked&&(a.reason.disabled=!0),a.reason.className="tl-entry-reason",a.parent.appendChild(a.reason),this.updateReasonsDropdown(a.reason),1===n.entries.length&&(n.sumHours=document.createElement("span"),n.sumHours.className="tl-sum-hours",a.parent.append(n.sumHours)),a.length.type="number",a.length.className="tl-entry-length",a.length.step="0.01",e.sheet.locked&&(a.length.disabled=!0),a.length.onchange=()=>{var t;null===(t=this.model)||void 0===t||t.changeLengthHours(e.date,e.date.entries.indexOf(s),parseFloat((null==a?void 0:a.length.value)||"0"))},a.parent.appendChild(a.length);const l=document.createElement("span");if(l.className="tl-duration-label",l.innerText="hour(s)",a.parent.appendChild(l),!e.sheet.locked){a.commentButton.className="tl-add-comment-btn tl-show-on-hover",a.commentButton.onclick=()=>{var t;return null===(t=this.model)||void 0===t?void 0:t.toggleComment(e.date,e.date.entries.indexOf(s))},a.parent.appendChild(a.commentButton);const t=document.createElement("button");t.appendChild(i.get("delete")),t.className="tl-remove-entry-btn tl-show-on-hover",t.onclick=()=>{var t;return null===(t=this.model)||void 0===t?void 0:t.deleteEntry(e.date,e.date.entries.indexOf(s))},a.parent.appendChild(t)}a.comment.type="text",a.comment.placeholder="Write a note...",a.comment.title="Write a note...",a.comment.className="tl-entry-comment",e.sheet.locked&&(a.comment.disabled=!0),a.comment.onchange=()=>{var t,n;null===(t=this.model)||void 0===t||t.changeComment(e.date,e.date.entries.indexOf(s),null!==(n=null==a?void 0:a.comment.value)&&void 0!==n?n:"")},a.parent.appendChild(a.comment)}return a}addToWeekSum(e){if(this.weekSums.length<1||0===new Date(e.date.date).getDay()){const t={dates:[e],element:document.createElement("div")};t.element.className="tl-week-sum",this.weekSums.push(t),e.parent.appendChild(t.element),e.parent.style.marginTop="38px"}else this.weekSums[this.weekSums.length-1].dates.push(e)}onDateUpdated(e){var n;if(this.selectedSheet===e.sheet&&this.sheetContainer){let s=this.getDateContainer(e);if(s){for(const a of e.date.entries){let o=this.getEntryContainer(e,s,a);o.startHour.value=t.formatHour(a.startHour),o.length.value=a.lengthHours.toString(),o.endHour.value=t.formatHour(a.startHour+a.lengthHours),o.reason.value=a.reasonId,o.comment.value=null!==(n=a.comment)&&void 0!==n?n:"",o.commentButton.title=a.hasComment?"Remove note":"Add note",o.commentButton.innerHTML="",o.commentButton.appendChild(i.get(a.hasComment?"speaker_notes_off":"speaker_notes")),a.hasComment?o.parent.classList.add("tl-has-comment"):o.parent.classList.remove("tl-has-comment")}const a=s.entries.filter((t=>!e.date.entries.find((e=>e===t.entry))));if(s.entries=s.entries.filter((e=>!a.includes(e))),a.forEach((e=>e.parent.remove())),s.sumHours){const t=r.sum(e.date.entries.map((e=>e.lengthHours)));s.sumHours.innerText=`${r.round(t,2)} hour${1===t?"":"s"}`}s.starButton.innerHTML="",s.starButton.disabled=e.date.favorited,s.starButton.classList.remove("tl-favorite"),s.starButton.appendChild(i.get("star",e.date.favorited)),e.date.favorited&&s.starButton.classList.add("tl-favorite"),s.entries.length>0||s.date.favorited?s.pasteButton.classList.add("tl-hide-favorite-button"):s.pasteButton.classList.remove("tl-hide-favorite-button")}const a=this.weekSums.find((t=>t.dates.some((t=>t.date===e.date))));if(a){const n=r.sum(a.dates.map((e=>r.sum(e.entries.map((e=>e.entry.lengthHours)))))),s=a.dates.filter((e=>!e.date.weekend)).length,o=e.sheet.hoursPerDay*s,i=t.getWeekNumberFromDate(a.dates[0].date.date);a.element.innerHTML=`<b>Week ${i}</b>: ${r.round(n,2)} / ${r.round(o,2)} hours`}}this.updateBalance()}updateReasonsDropdown(e){e.innerHTML="";for(const t of this.reasons){const n=document.createElement("option");n.value=t.serverId,n.innerText=t.value,e.appendChild(n)}}onReasonsUpdated(e){this.reasons=e;for(const e of this.sheetDates)for(const t of e.entries)this.updateReasonsDropdown(t.reason)}onSaveStatusUpdated(e){this.saveStatus&&(this.saveStatus.innerHTML="",this.saveStatus.classList.remove("tl-success"),e===o.Saved&&(this.saveStatus.appendChild(i.get("cloud_done",!0)),this.saveStatus.append(" Saved"),this.saveStatus.classList.add("tl-success")),e===o.Waiting&&(this.saveStatus.appendChild(i.get("pending")),this.saveStatus.append(" Pending...")),e===o.Saving&&(this.saveStatus.appendChild(i.get("cloud_upload")),this.saveStatus.append(" Saving...")))}onSheetUpdated(e){if(this.sheetDropdown&&!this.sheetDropdownOptions.find((t=>t.sheet===e))){const t=document.createElement("option");t.value=e.id.toString(),t.innerText=`${new Date(e.start).toDateString()} - ${new Date(e.end).toDateString()}${e.locked?" (locked)":""}`,this.sheetDropdownOptions.push({sheet:e,element:t}),this.sheetDropdown.appendChild(t)}this.selectedSheet===e&&(this.sheetContainer&&(this.sheetContainer.innerHTML=""),this.sheetDates=[],this.weekSums=[]);for(const t of e.dates)this.onDateUpdated({sheet:e,date:t});this.updateBalance()}onSheetsUpdated(e){this.sheetDropdown&&(this.sheetDropdown.innerHTML=""),this.sheetDropdownOptions=[];for(const t of e)this.onSheetUpdated(t);this.onSelectedSheetChange()}onSelectedSheetChange(){var e;if(!this.sheetDropdown)return;this.sheetContainer&&(this.sheetContainer.innerHTML=""),this.sheetDates=[];const t=this.sheetDropdown.value;this.selectedSheet=null===(e=this.sheetDropdownOptions.find((e=>e.element.value===t)))||void 0===e?void 0:e.sheet,this.selectedSheet&&this.model&&this.model.fetchSheet(this.selectedSheet.id)}async updateBalance(){var e,t,n;if(!this.model||!this.balanceLabel||!this.selectedSheet)return;const s=await this.model.getCurrentBalanceHours(this.selectedSheet),a=r.round(null!==(e=s.sheets[this.selectedSheet.id.toString()])&&void 0!==e?e:0,2),o=r.round(s.balance,2);this.balanceLabel.innerText=`Flex: ${o} hour${1!=o?"s":""} (current month: ${a} hour${1!=a?"s":""})`,await this.model.getFavoritedDate()?null===(t=this.sheetContainer)||void 0===t||t.classList.add("tl-has-favorite"):null===(n=this.sheetContainer)||void 0===n||n.classList.remove("tl-has-favorite")}},new class{constructor(){this.submitting=!1,this.createUI(),this.clockInButtonFinder()}createUI(){const e=document.createElement("style");e.innerHTML="\n.re-label\n{\n    font-size: 1.5em;\n    margin-bottom: 10px;\n}\n.re-reason-select\n{\n    padding: 5px;\n}\n.re-reason-ui\n{\n    z-index: 2000;\n    position: fixed;\n    inset: 0;\n    background-color: rgba(0,0,0,0.75);\n    padding-top: 45vh;\n    text-align: center;\n    color: white;\n    font-weight: bold;\n}\n.re-btn\n{\n    padding: 0 var(--button-padding-x, 15px);\n    min-width: 80px;\n    height: var(--button-size, 30px);\n    font-weight: 600;\n    font-size: var(--button-font-size, 12px);\n    font-family: var(--body-font-family);\n    border: 0;\n    border-radius: 4px;\n    margin: 5px;\n}\n.re-btn.re-primary\n{\n    color: var(--primary-bg-text-color, white);\n    background-color: var(--primary-600);\n}\n.re-btn.re-secondary\n{\n    color: var(--secondary-bg-text-color, #535353);\n    background-color: var(--secondary-600);\n}\n.re-blur\n{\n    filter: blur(2px);\n}\n.re-submitting .re-btn\n{\n    display: none;\n}\n.re-submitting-text\n{\n    display: none;\n    font-size: 1.5em;\n}\n.re-submitting .re-submitting-text\n{\n    display: block;\n}\n",document.body.append(e),this.reasonEnhancementUI=document.createElement("div"),this.reasonEnhancementUI.className="re-reason-ui",this.reasonEnhancementUI.style.display="none",document.body.appendChild(this.reasonEnhancementUI);const t=document.createElement("div");t.innerText="Choose Default Reason",t.className="re-label",this.reasonEnhancementUI.appendChild(t),this.reasonSelect=document.createElement("select"),this.reasonSelect.className="re-reason-select",this.reasonSelect.onchange=()=>this.saveDefaultReasonValue(),this.reasonEnhancementUI.appendChild(this.reasonSelect),this.reasonEnhancementUI.appendChild(document.createElement("br"));const n=document.createElement("button");n.className="re-cancel-btn re-btn re-secondary",n.innerText="Cancel",n.onclick=()=>this.cancel(),this.reasonEnhancementUI.appendChild(n);const s=document.createElement("button");s.className="re-submit-btn re-btn re-primary",s.innerText="Submit",s.onclick=()=>this.submit(),this.reasonEnhancementUI.appendChild(s);const a=document.createElement("div");a.className="re-submitting-text",a.innerText="Submitting...",this.reasonEnhancementUI.appendChild(a)}async clockInButtonFinder(){for(var e;;)this.findUnenhancedButtons("b-button.punch-clock-button, b-button.time-widget-clock-in-btn, b-button.time-widget-clock-out-btn").forEach((e=>this.enhanceClockInButton(e,a.FixLatest))),this.findUnenhancedButtons("b-button.quick-fix-apply-button").forEach((e=>this.enhanceClockInButton(e,a.FixAll))),this.appRoot||(this.appRoot=null!==(e=document.querySelector("app-root"))&&void 0!==e?e:void 0),await s.for(10)}findUnenhancedButtons(e){var t=[],n=document.querySelectorAll(e);for(const e of n)e.classList.contains("re-enhanced")||(e.classList.add("re-enhanced"),t.push(e));return t}enhanceClockInButton(e,t){e.addEventListener("click",(()=>this.showReasonFixer(t)))}saveDefaultReasonValue(){this.reasonSelect&&window.localStorage.setItem("re-last-reason",this.reasonSelect.value)}loadDefaultReasonValue(){var e;this.reasonSelect&&(this.reasonSelect.value=null!==(e=window.localStorage.getItem("re-last-reason"))&&void 0!==e?e:"")}async showReasonFixer(e){if(this.reasonEnhancementUI&&(await s.for(250),this.setUIVisible(!0),this.mode=e,this.reasonSelect)){const e=await n.metadata();this.reasonSelect.innerHTML="";for(const t of e.timeLogEntryReason.values){const e=document.createElement("option");e.value=t.serverId,e.innerText=t.value,this.reasonSelect.appendChild(e)}this.loadDefaultReasonValue()}}cancel(){this.setUIVisible(!1)}setUIVisible(e){this.reasonEnhancementUI&&(this.reasonEnhancementUI.style.display=e?"block":"none"),this.appRoot&&(e?this.appRoot.classList.add("re-blur"):this.appRoot.classList.remove("re-blur"))}async submit(){var e,t;await s.until((()=>!this.submitting)),this.submitting=!0,null===(e=this.reasonEnhancementUI)||void 0===e||e.classList.add("re-submitting"),this.mode===a.FixAll&&await this.fixAll(),this.mode===a.FixLatest&&await this.fixLatest(),this.setUIVisible(!1),null===(t=this.reasonEnhancementUI)||void 0===t||t.classList.remove("re-submitting"),this.submitting=!1}async fixAll(){if(!this.reasonSelect)return;const e=this.reasonSelect.value,s=await n.sheets();for(const a of s.employeeSheets){if(a.locked)continue;const s=await n.attendance(a.id);for(const a of s.attendance)if(a.entries.some((e=>!e.reason))){const s=t.parse(a.date);if("number"!=typeof s)continue;const o=a.entries.map((n=>{var a,o,i,r;return{startHour:((null!==(a=t.parse(n.start))&&void 0!==a?a:Date.now())-s)/36e5,lengthHours:n.end?((null!==(o=t.parse(n.end))&&void 0!==o?o:Date.now())-(null!==(i=t.parse(n.start))&&void 0!==i?i:Date.now()))/36e5:null,reasonId:n.reason||e,comment:null!==(r=n.comment)&&void 0!==r?r:null}}));await n.submit(s,o)}}}async fixLatest(){if(!this.reasonSelect)return;const e=this.reasonSelect.value;let s=null;const a=await n.sheets();for(const e of a.employeeSheets){if(e.locked)continue;const a=await n.attendance(e.id);for(const e of a.attendance){const n=t.parse(e.date);if("number"==typeof n&&(!s||n>s.date)){const a=e.entries.map((e=>{var s,a,o,i;return{startHour:((null!==(s=t.parse(e.start))&&void 0!==s?s:Date.now())-n)/36e5,lengthHours:e.end?((null!==(a=t.parse(e.end))&&void 0!==a?a:Date.now())-(null!==(o=t.parse(e.start))&&void 0!==o?o:Date.now()))/36e5:null,reasonId:e.reason,comment:null!==(i=e.comment)&&void 0!==i?i:null}}));s={date:n,entries:a}}}}if(s){for(const t of s.entries)t.reasonId=t.reasonId||e;await n.submit(s.date,s.entries)}}}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,